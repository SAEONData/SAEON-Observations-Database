using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SAEON.ObservationsDB.Data
{
	/// <summary>
	/// Strongly-typed collection for the DataLog class.
	/// </summary>
    [Serializable]
	public partial class DataLogCollection : ActiveList<DataLog, DataLogCollection>
	{	   
		public DataLogCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DataLogCollection</returns>
		public DataLogCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DataLog o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the DataLog table.
	/// </summary>
	[Serializable]
	public partial class DataLog : ActiveRecord<DataLog>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DataLog()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DataLog(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DataLog(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DataLog(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("DataLog", TableType.Table, DataService.GetInstance("ObservationsDB"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarSensorProcedureID = new TableSchema.TableColumn(schema);
				colvarSensorProcedureID.ColumnName = "SensorProcedureID";
				colvarSensorProcedureID.DataType = DbType.Guid;
				colvarSensorProcedureID.MaxLength = 0;
				colvarSensorProcedureID.AutoIncrement = false;
				colvarSensorProcedureID.IsNullable = true;
				colvarSensorProcedureID.IsPrimaryKey = false;
				colvarSensorProcedureID.IsForeignKey = true;
				colvarSensorProcedureID.IsReadOnly = false;
				colvarSensorProcedureID.DefaultSetting = @"";
				
					colvarSensorProcedureID.ForeignKeyTableName = "SensorProcedure";
				schema.Columns.Add(colvarSensorProcedureID);
				
				TableSchema.TableColumn colvarImportDate = new TableSchema.TableColumn(schema);
				colvarImportDate.ColumnName = "ImportDate";
				colvarImportDate.DataType = DbType.DateTime;
				colvarImportDate.MaxLength = 0;
				colvarImportDate.AutoIncrement = false;
				colvarImportDate.IsNullable = false;
				colvarImportDate.IsPrimaryKey = false;
				colvarImportDate.IsForeignKey = false;
				colvarImportDate.IsReadOnly = false;
				
						colvarImportDate.DefaultSetting = @"(getdate())";
				colvarImportDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarImportDate);
				
				TableSchema.TableColumn colvarValueDate = new TableSchema.TableColumn(schema);
				colvarValueDate.ColumnName = "ValueDate";
				colvarValueDate.DataType = DbType.DateTime;
				colvarValueDate.MaxLength = 0;
				colvarValueDate.AutoIncrement = false;
				colvarValueDate.IsNullable = true;
				colvarValueDate.IsPrimaryKey = false;
				colvarValueDate.IsForeignKey = false;
				colvarValueDate.IsReadOnly = false;
				colvarValueDate.DefaultSetting = @"";
				colvarValueDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarValueDate);
				
				TableSchema.TableColumn colvarValueTime = new TableSchema.TableColumn(schema);
				colvarValueTime.ColumnName = "ValueTime";
				colvarValueTime.DataType = DbType.DateTime;
				colvarValueTime.MaxLength = 0;
				colvarValueTime.AutoIncrement = false;
				colvarValueTime.IsNullable = true;
				colvarValueTime.IsPrimaryKey = false;
				colvarValueTime.IsForeignKey = false;
				colvarValueTime.IsReadOnly = false;
				colvarValueTime.DefaultSetting = @"";
				colvarValueTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarValueTime);
				
				TableSchema.TableColumn colvarValueText = new TableSchema.TableColumn(schema);
				colvarValueText.ColumnName = "ValueText";
				colvarValueText.DataType = DbType.AnsiString;
				colvarValueText.MaxLength = 50;
				colvarValueText.AutoIncrement = false;
				colvarValueText.IsNullable = false;
				colvarValueText.IsPrimaryKey = false;
				colvarValueText.IsForeignKey = false;
				colvarValueText.IsReadOnly = false;
				colvarValueText.DefaultSetting = @"";
				colvarValueText.ForeignKeyTableName = "";
				schema.Columns.Add(colvarValueText);
				
				TableSchema.TableColumn colvarTransformValueText = new TableSchema.TableColumn(schema);
				colvarTransformValueText.ColumnName = "TransformValueText";
				colvarTransformValueText.DataType = DbType.AnsiString;
				colvarTransformValueText.MaxLength = 50;
				colvarTransformValueText.AutoIncrement = false;
				colvarTransformValueText.IsNullable = true;
				colvarTransformValueText.IsPrimaryKey = false;
				colvarTransformValueText.IsForeignKey = false;
				colvarTransformValueText.IsReadOnly = false;
				colvarTransformValueText.DefaultSetting = @"";
				colvarTransformValueText.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTransformValueText);
				
				TableSchema.TableColumn colvarRawValue = new TableSchema.TableColumn(schema);
				colvarRawValue.ColumnName = "RawValue";
				colvarRawValue.DataType = DbType.Double;
				colvarRawValue.MaxLength = 0;
				colvarRawValue.AutoIncrement = false;
				colvarRawValue.IsNullable = true;
				colvarRawValue.IsPrimaryKey = false;
				colvarRawValue.IsForeignKey = false;
				colvarRawValue.IsReadOnly = false;
				colvarRawValue.DefaultSetting = @"";
				colvarRawValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRawValue);
				
				TableSchema.TableColumn colvarDataValue = new TableSchema.TableColumn(schema);
				colvarDataValue.ColumnName = "DataValue";
				colvarDataValue.DataType = DbType.Double;
				colvarDataValue.MaxLength = 0;
				colvarDataValue.AutoIncrement = false;
				colvarDataValue.IsNullable = true;
				colvarDataValue.IsPrimaryKey = false;
				colvarDataValue.IsForeignKey = false;
				colvarDataValue.IsReadOnly = false;
				colvarDataValue.DefaultSetting = @"";
				colvarDataValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDataValue);
				
				TableSchema.TableColumn colvarComment = new TableSchema.TableColumn(schema);
				colvarComment.ColumnName = "Comment";
				colvarComment.DataType = DbType.AnsiString;
				colvarComment.MaxLength = 250;
				colvarComment.AutoIncrement = false;
				colvarComment.IsNullable = true;
				colvarComment.IsPrimaryKey = false;
				colvarComment.IsForeignKey = false;
				colvarComment.IsReadOnly = false;
				colvarComment.DefaultSetting = @"";
				colvarComment.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComment);
				
				TableSchema.TableColumn colvarInvalidDateValue = new TableSchema.TableColumn(schema);
				colvarInvalidDateValue.ColumnName = "InvalidDateValue";
				colvarInvalidDateValue.DataType = DbType.AnsiString;
				colvarInvalidDateValue.MaxLength = 50;
				colvarInvalidDateValue.AutoIncrement = false;
				colvarInvalidDateValue.IsNullable = true;
				colvarInvalidDateValue.IsPrimaryKey = false;
				colvarInvalidDateValue.IsForeignKey = false;
				colvarInvalidDateValue.IsReadOnly = false;
				colvarInvalidDateValue.DefaultSetting = @"";
				colvarInvalidDateValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvalidDateValue);
				
				TableSchema.TableColumn colvarInvalidTimeValue = new TableSchema.TableColumn(schema);
				colvarInvalidTimeValue.ColumnName = "InvalidTimeValue";
				colvarInvalidTimeValue.DataType = DbType.AnsiString;
				colvarInvalidTimeValue.MaxLength = 50;
				colvarInvalidTimeValue.AutoIncrement = false;
				colvarInvalidTimeValue.IsNullable = true;
				colvarInvalidTimeValue.IsPrimaryKey = false;
				colvarInvalidTimeValue.IsForeignKey = false;
				colvarInvalidTimeValue.IsReadOnly = false;
				colvarInvalidTimeValue.DefaultSetting = @"";
				colvarInvalidTimeValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvalidTimeValue);
				
				TableSchema.TableColumn colvarInvalidOffering = new TableSchema.TableColumn(schema);
				colvarInvalidOffering.ColumnName = "InvalidOffering";
				colvarInvalidOffering.DataType = DbType.AnsiString;
				colvarInvalidOffering.MaxLength = 50;
				colvarInvalidOffering.AutoIncrement = false;
				colvarInvalidOffering.IsNullable = true;
				colvarInvalidOffering.IsPrimaryKey = false;
				colvarInvalidOffering.IsForeignKey = false;
				colvarInvalidOffering.IsReadOnly = false;
				colvarInvalidOffering.DefaultSetting = @"";
				colvarInvalidOffering.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvalidOffering);
				
				TableSchema.TableColumn colvarInvalidUOM = new TableSchema.TableColumn(schema);
				colvarInvalidUOM.ColumnName = "InvalidUOM";
				colvarInvalidUOM.DataType = DbType.AnsiString;
				colvarInvalidUOM.MaxLength = 50;
				colvarInvalidUOM.AutoIncrement = false;
				colvarInvalidUOM.IsNullable = true;
				colvarInvalidUOM.IsPrimaryKey = false;
				colvarInvalidUOM.IsForeignKey = false;
				colvarInvalidUOM.IsReadOnly = false;
				colvarInvalidUOM.DefaultSetting = @"";
				colvarInvalidUOM.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvalidUOM);
				
				TableSchema.TableColumn colvarDataSourceTransformationID = new TableSchema.TableColumn(schema);
				colvarDataSourceTransformationID.ColumnName = "DataSourceTransformationID";
				colvarDataSourceTransformationID.DataType = DbType.Guid;
				colvarDataSourceTransformationID.MaxLength = 0;
				colvarDataSourceTransformationID.AutoIncrement = false;
				colvarDataSourceTransformationID.IsNullable = true;
				colvarDataSourceTransformationID.IsPrimaryKey = false;
				colvarDataSourceTransformationID.IsForeignKey = true;
				colvarDataSourceTransformationID.IsReadOnly = false;
				colvarDataSourceTransformationID.DefaultSetting = @"";
				
					colvarDataSourceTransformationID.ForeignKeyTableName = "DataSourceTransformation";
				schema.Columns.Add(colvarDataSourceTransformationID);
				
				TableSchema.TableColumn colvarStatusID = new TableSchema.TableColumn(schema);
				colvarStatusID.ColumnName = "StatusID";
				colvarStatusID.DataType = DbType.Guid;
				colvarStatusID.MaxLength = 0;
				colvarStatusID.AutoIncrement = false;
				colvarStatusID.IsNullable = false;
				colvarStatusID.IsPrimaryKey = false;
				colvarStatusID.IsForeignKey = true;
				colvarStatusID.IsReadOnly = false;
				colvarStatusID.DefaultSetting = @"";
				
					colvarStatusID.ForeignKeyTableName = "Status";
				schema.Columns.Add(colvarStatusID);
				
				TableSchema.TableColumn colvarImportStatus = new TableSchema.TableColumn(schema);
				colvarImportStatus.ColumnName = "ImportStatus";
				colvarImportStatus.DataType = DbType.AnsiString;
				colvarImportStatus.MaxLength = 500;
				colvarImportStatus.AutoIncrement = false;
				colvarImportStatus.IsNullable = false;
				colvarImportStatus.IsPrimaryKey = false;
				colvarImportStatus.IsForeignKey = false;
				colvarImportStatus.IsReadOnly = false;
				colvarImportStatus.DefaultSetting = @"";
				colvarImportStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarImportStatus);
				
				TableSchema.TableColumn colvarUserId = new TableSchema.TableColumn(schema);
				colvarUserId.ColumnName = "UserId";
				colvarUserId.DataType = DbType.Guid;
				colvarUserId.MaxLength = 0;
				colvarUserId.AutoIncrement = false;
				colvarUserId.IsNullable = true;
				colvarUserId.IsPrimaryKey = false;
				colvarUserId.IsForeignKey = true;
				colvarUserId.IsReadOnly = false;
				colvarUserId.DefaultSetting = @"";
				
					colvarUserId.ForeignKeyTableName = "aspnet_Users";
				schema.Columns.Add(colvarUserId);
				
				TableSchema.TableColumn colvarPhenomenonOfferingID = new TableSchema.TableColumn(schema);
				colvarPhenomenonOfferingID.ColumnName = "PhenomenonOfferingID";
				colvarPhenomenonOfferingID.DataType = DbType.Guid;
				colvarPhenomenonOfferingID.MaxLength = 0;
				colvarPhenomenonOfferingID.AutoIncrement = false;
				colvarPhenomenonOfferingID.IsNullable = true;
				colvarPhenomenonOfferingID.IsPrimaryKey = false;
				colvarPhenomenonOfferingID.IsForeignKey = true;
				colvarPhenomenonOfferingID.IsReadOnly = false;
				colvarPhenomenonOfferingID.DefaultSetting = @"";
				
					colvarPhenomenonOfferingID.ForeignKeyTableName = "PhenomenonOffering";
				schema.Columns.Add(colvarPhenomenonOfferingID);
				
				TableSchema.TableColumn colvarPhenomenonUOMID = new TableSchema.TableColumn(schema);
				colvarPhenomenonUOMID.ColumnName = "PhenomenonUOMID";
				colvarPhenomenonUOMID.DataType = DbType.Guid;
				colvarPhenomenonUOMID.MaxLength = 0;
				colvarPhenomenonUOMID.AutoIncrement = false;
				colvarPhenomenonUOMID.IsNullable = true;
				colvarPhenomenonUOMID.IsPrimaryKey = false;
				colvarPhenomenonUOMID.IsForeignKey = true;
				colvarPhenomenonUOMID.IsReadOnly = false;
				colvarPhenomenonUOMID.DefaultSetting = @"";
				
					colvarPhenomenonUOMID.ForeignKeyTableName = "PhenomenonUOM";
				schema.Columns.Add(colvarPhenomenonUOMID);
				
				TableSchema.TableColumn colvarImportBatchID = new TableSchema.TableColumn(schema);
				colvarImportBatchID.ColumnName = "ImportBatchID";
				colvarImportBatchID.DataType = DbType.Int32;
				colvarImportBatchID.MaxLength = 0;
				colvarImportBatchID.AutoIncrement = false;
				colvarImportBatchID.IsNullable = false;
				colvarImportBatchID.IsPrimaryKey = false;
				colvarImportBatchID.IsForeignKey = true;
				colvarImportBatchID.IsReadOnly = false;
				colvarImportBatchID.DefaultSetting = @"";
				
					colvarImportBatchID.ForeignKeyTableName = "ImportBatch";
				schema.Columns.Add(colvarImportBatchID);
				
				TableSchema.TableColumn colvarRawRecordData = new TableSchema.TableColumn(schema);
				colvarRawRecordData.ColumnName = "RawRecordData";
				colvarRawRecordData.DataType = DbType.AnsiString;
				colvarRawRecordData.MaxLength = 500;
				colvarRawRecordData.AutoIncrement = false;
				colvarRawRecordData.IsNullable = true;
				colvarRawRecordData.IsPrimaryKey = false;
				colvarRawRecordData.IsForeignKey = false;
				colvarRawRecordData.IsReadOnly = false;
				colvarRawRecordData.DefaultSetting = @"";
				colvarRawRecordData.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRawRecordData);
				
				TableSchema.TableColumn colvarRawFieldValue = new TableSchema.TableColumn(schema);
				colvarRawFieldValue.ColumnName = "RawFieldValue";
				colvarRawFieldValue.DataType = DbType.AnsiString;
				colvarRawFieldValue.MaxLength = 50;
				colvarRawFieldValue.AutoIncrement = false;
				colvarRawFieldValue.IsNullable = false;
				colvarRawFieldValue.IsPrimaryKey = false;
				colvarRawFieldValue.IsForeignKey = false;
				colvarRawFieldValue.IsReadOnly = false;
				colvarRawFieldValue.DefaultSetting = @"";
				colvarRawFieldValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRawFieldValue);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ObservationsDB"].AddSchema("DataLog",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("SensorProcedureID")]
		[Bindable(true)]
		public Guid? SensorProcedureID 
		{
			get { return GetColumnValue<Guid?>(Columns.SensorProcedureID); }
			set { SetColumnValue(Columns.SensorProcedureID, value); }
		}
		  
		[XmlAttribute("ImportDate")]
		[Bindable(true)]
		public DateTime ImportDate 
		{
			get { return GetColumnValue<DateTime>(Columns.ImportDate); }
			set { SetColumnValue(Columns.ImportDate, value); }
		}
		  
		[XmlAttribute("ValueDate")]
		[Bindable(true)]
		public DateTime? ValueDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ValueDate); }
			set { SetColumnValue(Columns.ValueDate, value); }
		}
		  
		[XmlAttribute("ValueTime")]
		[Bindable(true)]
		public DateTime? ValueTime 
		{
			get { return GetColumnValue<DateTime?>(Columns.ValueTime); }
			set { SetColumnValue(Columns.ValueTime, value); }
		}
		  
		[XmlAttribute("ValueText")]
		[Bindable(true)]
		public string ValueText 
		{
			get { return GetColumnValue<string>(Columns.ValueText); }
			set { SetColumnValue(Columns.ValueText, value); }
		}
		  
		[XmlAttribute("TransformValueText")]
		[Bindable(true)]
		public string TransformValueText 
		{
			get { return GetColumnValue<string>(Columns.TransformValueText); }
			set { SetColumnValue(Columns.TransformValueText, value); }
		}
		  
		[XmlAttribute("RawValue")]
		[Bindable(true)]
		public double? RawValue 
		{
			get { return GetColumnValue<double?>(Columns.RawValue); }
			set { SetColumnValue(Columns.RawValue, value); }
		}
		  
		[XmlAttribute("DataValue")]
		[Bindable(true)]
		public double? DataValue 
		{
			get { return GetColumnValue<double?>(Columns.DataValue); }
			set { SetColumnValue(Columns.DataValue, value); }
		}
		  
		[XmlAttribute("Comment")]
		[Bindable(true)]
		public string Comment 
		{
			get { return GetColumnValue<string>(Columns.Comment); }
			set { SetColumnValue(Columns.Comment, value); }
		}
		  
		[XmlAttribute("InvalidDateValue")]
		[Bindable(true)]
		public string InvalidDateValue 
		{
			get { return GetColumnValue<string>(Columns.InvalidDateValue); }
			set { SetColumnValue(Columns.InvalidDateValue, value); }
		}
		  
		[XmlAttribute("InvalidTimeValue")]
		[Bindable(true)]
		public string InvalidTimeValue 
		{
			get { return GetColumnValue<string>(Columns.InvalidTimeValue); }
			set { SetColumnValue(Columns.InvalidTimeValue, value); }
		}
		  
		[XmlAttribute("InvalidOffering")]
		[Bindable(true)]
		public string InvalidOffering 
		{
			get { return GetColumnValue<string>(Columns.InvalidOffering); }
			set { SetColumnValue(Columns.InvalidOffering, value); }
		}
		  
		[XmlAttribute("InvalidUOM")]
		[Bindable(true)]
		public string InvalidUOM 
		{
			get { return GetColumnValue<string>(Columns.InvalidUOM); }
			set { SetColumnValue(Columns.InvalidUOM, value); }
		}
		  
		[XmlAttribute("DataSourceTransformationID")]
		[Bindable(true)]
		public Guid? DataSourceTransformationID 
		{
			get { return GetColumnValue<Guid?>(Columns.DataSourceTransformationID); }
			set { SetColumnValue(Columns.DataSourceTransformationID, value); }
		}
		  
		[XmlAttribute("StatusID")]
		[Bindable(true)]
		public Guid StatusID 
		{
			get { return GetColumnValue<Guid>(Columns.StatusID); }
			set { SetColumnValue(Columns.StatusID, value); }
		}
		  
		[XmlAttribute("ImportStatus")]
		[Bindable(true)]
		public string ImportStatus 
		{
			get { return GetColumnValue<string>(Columns.ImportStatus); }
			set { SetColumnValue(Columns.ImportStatus, value); }
		}
		  
		[XmlAttribute("UserId")]
		[Bindable(true)]
		public Guid? UserId 
		{
			get { return GetColumnValue<Guid?>(Columns.UserId); }
			set { SetColumnValue(Columns.UserId, value); }
		}
		  
		[XmlAttribute("PhenomenonOfferingID")]
		[Bindable(true)]
		public Guid? PhenomenonOfferingID 
		{
			get { return GetColumnValue<Guid?>(Columns.PhenomenonOfferingID); }
			set { SetColumnValue(Columns.PhenomenonOfferingID, value); }
		}
		  
		[XmlAttribute("PhenomenonUOMID")]
		[Bindable(true)]
		public Guid? PhenomenonUOMID 
		{
			get { return GetColumnValue<Guid?>(Columns.PhenomenonUOMID); }
			set { SetColumnValue(Columns.PhenomenonUOMID, value); }
		}
		  
		[XmlAttribute("ImportBatchID")]
		[Bindable(true)]
		public int ImportBatchID 
		{
			get { return GetColumnValue<int>(Columns.ImportBatchID); }
			set { SetColumnValue(Columns.ImportBatchID, value); }
		}
		  
		[XmlAttribute("RawRecordData")]
		[Bindable(true)]
		public string RawRecordData 
		{
			get { return GetColumnValue<string>(Columns.RawRecordData); }
			set { SetColumnValue(Columns.RawRecordData, value); }
		}
		  
		[XmlAttribute("RawFieldValue")]
		[Bindable(true)]
		public string RawFieldValue 
		{
			get { return GetColumnValue<string>(Columns.RawFieldValue); }
			set { SetColumnValue(Columns.RawFieldValue, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a AspnetUser ActiveRecord object related to this DataLog
		/// 
		/// </summary>
		public SAEON.ObservationsDB.Data.AspnetUser AspnetUser
		{
			get { return SAEON.ObservationsDB.Data.AspnetUser.FetchByID(this.UserId); }
			set { SetColumnValue("UserId", value.UserId); }
		}
		
		
		/// <summary>
		/// Returns a DataSourceTransformation ActiveRecord object related to this DataLog
		/// 
		/// </summary>
		public SAEON.ObservationsDB.Data.DataSourceTransformation DataSourceTransformation
		{
			get { return SAEON.ObservationsDB.Data.DataSourceTransformation.FetchByID(this.DataSourceTransformationID); }
			set { SetColumnValue("DataSourceTransformationID", value.Id); }
		}
		
		
		/// <summary>
		/// Returns a ImportBatch ActiveRecord object related to this DataLog
		/// 
		/// </summary>
		public SAEON.ObservationsDB.Data.ImportBatch ImportBatch
		{
			get { return SAEON.ObservationsDB.Data.ImportBatch.FetchByID(this.ImportBatchID); }
			set { SetColumnValue("ImportBatchID", value.Id); }
		}
		
		
		/// <summary>
		/// Returns a PhenomenonOffering ActiveRecord object related to this DataLog
		/// 
		/// </summary>
		public SAEON.ObservationsDB.Data.PhenomenonOffering PhenomenonOffering
		{
			get { return SAEON.ObservationsDB.Data.PhenomenonOffering.FetchByID(this.PhenomenonOfferingID); }
			set { SetColumnValue("PhenomenonOfferingID", value.Id); }
		}
		
		
		/// <summary>
		/// Returns a PhenomenonUOM ActiveRecord object related to this DataLog
		/// 
		/// </summary>
		public SAEON.ObservationsDB.Data.PhenomenonUOM PhenomenonUOM
		{
			get { return SAEON.ObservationsDB.Data.PhenomenonUOM.FetchByID(this.PhenomenonUOMID); }
			set { SetColumnValue("PhenomenonUOMID", value.Id); }
		}
		
		
		/// <summary>
		/// Returns a SensorProcedure ActiveRecord object related to this DataLog
		/// 
		/// </summary>
		public SAEON.ObservationsDB.Data.SensorProcedure SensorProcedure
		{
			get { return SAEON.ObservationsDB.Data.SensorProcedure.FetchByID(this.SensorProcedureID); }
			set { SetColumnValue("SensorProcedureID", value.Id); }
		}
		
		
		/// <summary>
		/// Returns a Status ActiveRecord object related to this DataLog
		/// 
		/// </summary>
		public SAEON.ObservationsDB.Data.Status Status
		{
			get { return SAEON.ObservationsDB.Data.Status.FetchByID(this.StatusID); }
			set { SetColumnValue("StatusID", value.Id); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(Guid? varSensorProcedureID,DateTime varImportDate,DateTime? varValueDate,DateTime? varValueTime,string varValueText,string varTransformValueText,double? varRawValue,double? varDataValue,string varComment,string varInvalidDateValue,string varInvalidTimeValue,string varInvalidOffering,string varInvalidUOM,Guid? varDataSourceTransformationID,Guid varStatusID,string varImportStatus,Guid? varUserId,Guid? varPhenomenonOfferingID,Guid? varPhenomenonUOMID,int varImportBatchID,string varRawRecordData,string varRawFieldValue)
		{
			DataLog item = new DataLog();
			
			item.SensorProcedureID = varSensorProcedureID;
			
			item.ImportDate = varImportDate;
			
			item.ValueDate = varValueDate;
			
			item.ValueTime = varValueTime;
			
			item.ValueText = varValueText;
			
			item.TransformValueText = varTransformValueText;
			
			item.RawValue = varRawValue;
			
			item.DataValue = varDataValue;
			
			item.Comment = varComment;
			
			item.InvalidDateValue = varInvalidDateValue;
			
			item.InvalidTimeValue = varInvalidTimeValue;
			
			item.InvalidOffering = varInvalidOffering;
			
			item.InvalidUOM = varInvalidUOM;
			
			item.DataSourceTransformationID = varDataSourceTransformationID;
			
			item.StatusID = varStatusID;
			
			item.ImportStatus = varImportStatus;
			
			item.UserId = varUserId;
			
			item.PhenomenonOfferingID = varPhenomenonOfferingID;
			
			item.PhenomenonUOMID = varPhenomenonUOMID;
			
			item.ImportBatchID = varImportBatchID;
			
			item.RawRecordData = varRawRecordData;
			
			item.RawFieldValue = varRawFieldValue;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,Guid? varSensorProcedureID,DateTime varImportDate,DateTime? varValueDate,DateTime? varValueTime,string varValueText,string varTransformValueText,double? varRawValue,double? varDataValue,string varComment,string varInvalidDateValue,string varInvalidTimeValue,string varInvalidOffering,string varInvalidUOM,Guid? varDataSourceTransformationID,Guid varStatusID,string varImportStatus,Guid? varUserId,Guid? varPhenomenonOfferingID,Guid? varPhenomenonUOMID,int varImportBatchID,string varRawRecordData,string varRawFieldValue)
		{
			DataLog item = new DataLog();
			
				item.Id = varId;
			
				item.SensorProcedureID = varSensorProcedureID;
			
				item.ImportDate = varImportDate;
			
				item.ValueDate = varValueDate;
			
				item.ValueTime = varValueTime;
			
				item.ValueText = varValueText;
			
				item.TransformValueText = varTransformValueText;
			
				item.RawValue = varRawValue;
			
				item.DataValue = varDataValue;
			
				item.Comment = varComment;
			
				item.InvalidDateValue = varInvalidDateValue;
			
				item.InvalidTimeValue = varInvalidTimeValue;
			
				item.InvalidOffering = varInvalidOffering;
			
				item.InvalidUOM = varInvalidUOM;
			
				item.DataSourceTransformationID = varDataSourceTransformationID;
			
				item.StatusID = varStatusID;
			
				item.ImportStatus = varImportStatus;
			
				item.UserId = varUserId;
			
				item.PhenomenonOfferingID = varPhenomenonOfferingID;
			
				item.PhenomenonUOMID = varPhenomenonUOMID;
			
				item.ImportBatchID = varImportBatchID;
			
				item.RawRecordData = varRawRecordData;
			
				item.RawFieldValue = varRawFieldValue;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn SensorProcedureIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ImportDateColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ValueDateColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ValueTimeColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ValueTextColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn TransformValueTextColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn RawValueColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn DataValueColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn CommentColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn InvalidDateValueColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn InvalidTimeValueColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn InvalidOfferingColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn InvalidUOMColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn DataSourceTransformationIDColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn StatusIDColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn ImportStatusColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn UserIdColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn PhenomenonOfferingIDColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn PhenomenonUOMIDColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn ImportBatchIDColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn RawRecordDataColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn RawFieldValueColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string SensorProcedureID = @"SensorProcedureID";
			 public static string ImportDate = @"ImportDate";
			 public static string ValueDate = @"ValueDate";
			 public static string ValueTime = @"ValueTime";
			 public static string ValueText = @"ValueText";
			 public static string TransformValueText = @"TransformValueText";
			 public static string RawValue = @"RawValue";
			 public static string DataValue = @"DataValue";
			 public static string Comment = @"Comment";
			 public static string InvalidDateValue = @"InvalidDateValue";
			 public static string InvalidTimeValue = @"InvalidTimeValue";
			 public static string InvalidOffering = @"InvalidOffering";
			 public static string InvalidUOM = @"InvalidUOM";
			 public static string DataSourceTransformationID = @"DataSourceTransformationID";
			 public static string StatusID = @"StatusID";
			 public static string ImportStatus = @"ImportStatus";
			 public static string UserId = @"UserId";
			 public static string PhenomenonOfferingID = @"PhenomenonOfferingID";
			 public static string PhenomenonUOMID = @"PhenomenonUOMID";
			 public static string ImportBatchID = @"ImportBatchID";
			 public static string RawRecordData = @"RawRecordData";
			 public static string RawFieldValue = @"RawFieldValue";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
