using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Observations.Data{
    /// <summary>
    /// Strongly-typed collection for the VDataSchema class.
    /// </summary>
    [Serializable]
    public partial class VDataSchemaCollection : ReadOnlyList<VDataSchema, VDataSchemaCollection>
    {        
        public VDataSchemaCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the vDataSchema view.
    /// </summary>
    [Serializable]
    public partial class VDataSchema : ReadOnlyRecord<VDataSchema>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("vDataSchema", TableType.View, DataService.GetInstance("ObservationsDB"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
                colvarId.ColumnName = "ID";
                colvarId.DataType = DbType.Guid;
                colvarId.MaxLength = 0;
                colvarId.AutoIncrement = false;
                colvarId.IsNullable = false;
                colvarId.IsPrimaryKey = false;
                colvarId.IsForeignKey = false;
                colvarId.IsReadOnly = false;
                
                schema.Columns.Add(colvarId);
                
                TableSchema.TableColumn colvarCode = new TableSchema.TableColumn(schema);
                colvarCode.ColumnName = "Code";
                colvarCode.DataType = DbType.AnsiString;
                colvarCode.MaxLength = 50;
                colvarCode.AutoIncrement = false;
                colvarCode.IsNullable = false;
                colvarCode.IsPrimaryKey = false;
                colvarCode.IsForeignKey = false;
                colvarCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarCode);
                
                TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
                colvarName.ColumnName = "Name";
                colvarName.DataType = DbType.AnsiString;
                colvarName.MaxLength = 100;
                colvarName.AutoIncrement = false;
                colvarName.IsNullable = false;
                colvarName.IsPrimaryKey = false;
                colvarName.IsForeignKey = false;
                colvarName.IsReadOnly = false;
                
                schema.Columns.Add(colvarName);
                
                TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
                colvarDescription.ColumnName = "Description";
                colvarDescription.DataType = DbType.AnsiString;
                colvarDescription.MaxLength = 500;
                colvarDescription.AutoIncrement = false;
                colvarDescription.IsNullable = false;
                colvarDescription.IsPrimaryKey = false;
                colvarDescription.IsForeignKey = false;
                colvarDescription.IsReadOnly = false;
                
                schema.Columns.Add(colvarDescription);
                
                TableSchema.TableColumn colvarUserId = new TableSchema.TableColumn(schema);
                colvarUserId.ColumnName = "UserId";
                colvarUserId.DataType = DbType.Guid;
                colvarUserId.MaxLength = 0;
                colvarUserId.AutoIncrement = false;
                colvarUserId.IsNullable = false;
                colvarUserId.IsPrimaryKey = false;
                colvarUserId.IsForeignKey = false;
                colvarUserId.IsReadOnly = false;
                
                schema.Columns.Add(colvarUserId);
                
                TableSchema.TableColumn colvarDataSourceTypeID = new TableSchema.TableColumn(schema);
                colvarDataSourceTypeID.ColumnName = "DataSourceTypeID";
                colvarDataSourceTypeID.DataType = DbType.Guid;
                colvarDataSourceTypeID.MaxLength = 0;
                colvarDataSourceTypeID.AutoIncrement = false;
                colvarDataSourceTypeID.IsNullable = false;
                colvarDataSourceTypeID.IsPrimaryKey = false;
                colvarDataSourceTypeID.IsForeignKey = false;
                colvarDataSourceTypeID.IsReadOnly = false;
                
                schema.Columns.Add(colvarDataSourceTypeID);
                
                TableSchema.TableColumn colvarIgnoreFirst = new TableSchema.TableColumn(schema);
                colvarIgnoreFirst.ColumnName = "IgnoreFirst";
                colvarIgnoreFirst.DataType = DbType.Int32;
                colvarIgnoreFirst.MaxLength = 0;
                colvarIgnoreFirst.AutoIncrement = false;
                colvarIgnoreFirst.IsNullable = false;
                colvarIgnoreFirst.IsPrimaryKey = false;
                colvarIgnoreFirst.IsForeignKey = false;
                colvarIgnoreFirst.IsReadOnly = false;
                
                schema.Columns.Add(colvarIgnoreFirst);
                
                TableSchema.TableColumn colvarIgnoreLast = new TableSchema.TableColumn(schema);
                colvarIgnoreLast.ColumnName = "IgnoreLast";
                colvarIgnoreLast.DataType = DbType.Int32;
                colvarIgnoreLast.MaxLength = 0;
                colvarIgnoreLast.AutoIncrement = false;
                colvarIgnoreLast.IsNullable = false;
                colvarIgnoreLast.IsPrimaryKey = false;
                colvarIgnoreLast.IsForeignKey = false;
                colvarIgnoreLast.IsReadOnly = false;
                
                schema.Columns.Add(colvarIgnoreLast);
                
                TableSchema.TableColumn colvarDelimiter = new TableSchema.TableColumn(schema);
                colvarDelimiter.ColumnName = "Delimiter";
                colvarDelimiter.DataType = DbType.AnsiString;
                colvarDelimiter.MaxLength = 3;
                colvarDelimiter.AutoIncrement = false;
                colvarDelimiter.IsNullable = true;
                colvarDelimiter.IsPrimaryKey = false;
                colvarDelimiter.IsForeignKey = false;
                colvarDelimiter.IsReadOnly = false;
                
                schema.Columns.Add(colvarDelimiter);
                
                TableSchema.TableColumn colvarCondition = new TableSchema.TableColumn(schema);
                colvarCondition.ColumnName = "Condition";
                colvarCondition.DataType = DbType.AnsiString;
                colvarCondition.MaxLength = 500;
                colvarCondition.AutoIncrement = false;
                colvarCondition.IsNullable = true;
                colvarCondition.IsPrimaryKey = false;
                colvarCondition.IsForeignKey = false;
                colvarCondition.IsReadOnly = false;
                
                schema.Columns.Add(colvarCondition);
                
                TableSchema.TableColumn colvarSplitSelector = new TableSchema.TableColumn(schema);
                colvarSplitSelector.ColumnName = "SplitSelector";
                colvarSplitSelector.DataType = DbType.AnsiString;
                colvarSplitSelector.MaxLength = 50;
                colvarSplitSelector.AutoIncrement = false;
                colvarSplitSelector.IsNullable = true;
                colvarSplitSelector.IsPrimaryKey = false;
                colvarSplitSelector.IsForeignKey = false;
                colvarSplitSelector.IsReadOnly = false;
                
                schema.Columns.Add(colvarSplitSelector);
                
                TableSchema.TableColumn colvarSplitIndex = new TableSchema.TableColumn(schema);
                colvarSplitIndex.ColumnName = "SplitIndex";
                colvarSplitIndex.DataType = DbType.Int32;
                colvarSplitIndex.MaxLength = 0;
                colvarSplitIndex.AutoIncrement = false;
                colvarSplitIndex.IsNullable = true;
                colvarSplitIndex.IsPrimaryKey = false;
                colvarSplitIndex.IsForeignKey = false;
                colvarSplitIndex.IsReadOnly = false;
                
                schema.Columns.Add(colvarSplitIndex);
                
                TableSchema.TableColumn colvarDataSourceTypeCode = new TableSchema.TableColumn(schema);
                colvarDataSourceTypeCode.ColumnName = "DataSourceTypeCode";
                colvarDataSourceTypeCode.DataType = DbType.AnsiString;
                colvarDataSourceTypeCode.MaxLength = 50;
                colvarDataSourceTypeCode.AutoIncrement = false;
                colvarDataSourceTypeCode.IsNullable = false;
                colvarDataSourceTypeCode.IsPrimaryKey = false;
                colvarDataSourceTypeCode.IsForeignKey = false;
                colvarDataSourceTypeCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarDataSourceTypeCode);
                
                TableSchema.TableColumn colvarDataSourceTypeDesc = new TableSchema.TableColumn(schema);
                colvarDataSourceTypeDesc.ColumnName = "DataSourceTypeDesc";
                colvarDataSourceTypeDesc.DataType = DbType.AnsiString;
                colvarDataSourceTypeDesc.MaxLength = 500;
                colvarDataSourceTypeDesc.AutoIncrement = false;
                colvarDataSourceTypeDesc.IsNullable = false;
                colvarDataSourceTypeDesc.IsPrimaryKey = false;
                colvarDataSourceTypeDesc.IsForeignKey = false;
                colvarDataSourceTypeDesc.IsReadOnly = false;
                
                schema.Columns.Add(colvarDataSourceTypeDesc);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ObservationsDB"].AddSchema("vDataSchema",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VDataSchema()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VDataSchema(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VDataSchema(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VDataSchema(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Id")]
        [Bindable(true)]
        public Guid Id 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("ID");
		    }
            set 
		    {
			    SetColumnValue("ID", value);
            }
        }
	      
        [XmlAttribute("Code")]
        [Bindable(true)]
        public string Code 
	    {
		    get
		    {
			    return GetColumnValue<string>("Code");
		    }
            set 
		    {
			    SetColumnValue("Code", value);
            }
        }
	      
        [XmlAttribute("Name")]
        [Bindable(true)]
        public string Name 
	    {
		    get
		    {
			    return GetColumnValue<string>("Name");
		    }
            set 
		    {
			    SetColumnValue("Name", value);
            }
        }
	      
        [XmlAttribute("Description")]
        [Bindable(true)]
        public string Description 
	    {
		    get
		    {
			    return GetColumnValue<string>("Description");
		    }
            set 
		    {
			    SetColumnValue("Description", value);
            }
        }
	      
        [XmlAttribute("UserId")]
        [Bindable(true)]
        public Guid UserId 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("UserId");
		    }
            set 
		    {
			    SetColumnValue("UserId", value);
            }
        }
	      
        [XmlAttribute("DataSourceTypeID")]
        [Bindable(true)]
        public Guid DataSourceTypeID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("DataSourceTypeID");
		    }
            set 
		    {
			    SetColumnValue("DataSourceTypeID", value);
            }
        }
	      
        [XmlAttribute("IgnoreFirst")]
        [Bindable(true)]
        public int IgnoreFirst 
	    {
		    get
		    {
			    return GetColumnValue<int>("IgnoreFirst");
		    }
            set 
		    {
			    SetColumnValue("IgnoreFirst", value);
            }
        }
	      
        [XmlAttribute("IgnoreLast")]
        [Bindable(true)]
        public int IgnoreLast 
	    {
		    get
		    {
			    return GetColumnValue<int>("IgnoreLast");
		    }
            set 
		    {
			    SetColumnValue("IgnoreLast", value);
            }
        }
	      
        [XmlAttribute("Delimiter")]
        [Bindable(true)]
        public string Delimiter 
	    {
		    get
		    {
			    return GetColumnValue<string>("Delimiter");
		    }
            set 
		    {
			    SetColumnValue("Delimiter", value);
            }
        }
	      
        [XmlAttribute("Condition")]
        [Bindable(true)]
        public string Condition 
	    {
		    get
		    {
			    return GetColumnValue<string>("Condition");
		    }
            set 
		    {
			    SetColumnValue("Condition", value);
            }
        }
	      
        [XmlAttribute("SplitSelector")]
        [Bindable(true)]
        public string SplitSelector 
	    {
		    get
		    {
			    return GetColumnValue<string>("SplitSelector");
		    }
            set 
		    {
			    SetColumnValue("SplitSelector", value);
            }
        }
	      
        [XmlAttribute("SplitIndex")]
        [Bindable(true)]
        public int? SplitIndex 
	    {
		    get
		    {
			    return GetColumnValue<int?>("SplitIndex");
		    }
            set 
		    {
			    SetColumnValue("SplitIndex", value);
            }
        }
	      
        [XmlAttribute("DataSourceTypeCode")]
        [Bindable(true)]
        public string DataSourceTypeCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("DataSourceTypeCode");
		    }
            set 
		    {
			    SetColumnValue("DataSourceTypeCode", value);
            }
        }
	      
        [XmlAttribute("DataSourceTypeDesc")]
        [Bindable(true)]
        public string DataSourceTypeDesc 
	    {
		    get
		    {
			    return GetColumnValue<string>("DataSourceTypeDesc");
		    }
            set 
		    {
			    SetColumnValue("DataSourceTypeDesc", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Id = @"ID";
            
            public static string Code = @"Code";
            
            public static string Name = @"Name";
            
            public static string Description = @"Description";
            
            public static string UserId = @"UserId";
            
            public static string DataSourceTypeID = @"DataSourceTypeID";
            
            public static string IgnoreFirst = @"IgnoreFirst";
            
            public static string IgnoreLast = @"IgnoreLast";
            
            public static string Delimiter = @"Delimiter";
            
            public static string Condition = @"Condition";
            
            public static string SplitSelector = @"SplitSelector";
            
            public static string SplitIndex = @"SplitIndex";
            
            public static string DataSourceTypeCode = @"DataSourceTypeCode";
            
            public static string DataSourceTypeDesc = @"DataSourceTypeDesc";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
