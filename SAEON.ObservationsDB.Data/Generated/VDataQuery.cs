using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SAEON.ObservationsDB.Data{
    /// <summary>
    /// Strongly-typed collection for the VDataQuery class.
    /// </summary>
    [Serializable]
    public partial class VDataQueryCollection : ReadOnlyList<VDataQuery, VDataQueryCollection>
    {        
        public VDataQueryCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the vDataQuery view.
    /// </summary>
    [Serializable]
    public partial class VDataQuery : ReadOnlyRecord<VDataQuery>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("vDataQuery", TableType.View, DataService.GetInstance("ObservationsDB"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
                colvarId.ColumnName = "ID";
                colvarId.DataType = DbType.Guid;
                colvarId.MaxLength = 0;
                colvarId.AutoIncrement = false;
                colvarId.IsNullable = true;
                colvarId.IsPrimaryKey = false;
                colvarId.IsForeignKey = false;
                colvarId.IsReadOnly = false;
                
                schema.Columns.Add(colvarId);
                
                TableSchema.TableColumn colvarOrganisationID = new TableSchema.TableColumn(schema);
                colvarOrganisationID.ColumnName = "OrganisationID";
                colvarOrganisationID.DataType = DbType.Guid;
                colvarOrganisationID.MaxLength = 0;
                colvarOrganisationID.AutoIncrement = false;
                colvarOrganisationID.IsNullable = false;
                colvarOrganisationID.IsPrimaryKey = false;
                colvarOrganisationID.IsForeignKey = false;
                colvarOrganisationID.IsReadOnly = false;
                
                schema.Columns.Add(colvarOrganisationID);
                
                TableSchema.TableColumn colvarOrganisation = new TableSchema.TableColumn(schema);
                colvarOrganisation.ColumnName = "Organisation";
                colvarOrganisation.DataType = DbType.AnsiString;
                colvarOrganisation.MaxLength = 150;
                colvarOrganisation.AutoIncrement = false;
                colvarOrganisation.IsNullable = false;
                colvarOrganisation.IsPrimaryKey = false;
                colvarOrganisation.IsForeignKey = false;
                colvarOrganisation.IsReadOnly = false;
                
                schema.Columns.Add(colvarOrganisation);
                
                TableSchema.TableColumn colvarOrganisationDesc = new TableSchema.TableColumn(schema);
                colvarOrganisationDesc.ColumnName = "OrganisationDesc";
                colvarOrganisationDesc.DataType = DbType.AnsiString;
                colvarOrganisationDesc.MaxLength = 5000;
                colvarOrganisationDesc.AutoIncrement = false;
                colvarOrganisationDesc.IsNullable = true;
                colvarOrganisationDesc.IsPrimaryKey = false;
                colvarOrganisationDesc.IsForeignKey = false;
                colvarOrganisationDesc.IsReadOnly = false;
                
                schema.Columns.Add(colvarOrganisationDesc);
                
                TableSchema.TableColumn colvarProjectSiteID = new TableSchema.TableColumn(schema);
                colvarProjectSiteID.ColumnName = "ProjectSiteID";
                colvarProjectSiteID.DataType = DbType.Guid;
                colvarProjectSiteID.MaxLength = 0;
                colvarProjectSiteID.AutoIncrement = false;
                colvarProjectSiteID.IsNullable = false;
                colvarProjectSiteID.IsPrimaryKey = false;
                colvarProjectSiteID.IsForeignKey = false;
                colvarProjectSiteID.IsReadOnly = false;
                
                schema.Columns.Add(colvarProjectSiteID);
                
                TableSchema.TableColumn colvarProjectSite = new TableSchema.TableColumn(schema);
                colvarProjectSite.ColumnName = "ProjectSite";
                colvarProjectSite.DataType = DbType.AnsiString;
                colvarProjectSite.MaxLength = 150;
                colvarProjectSite.AutoIncrement = false;
                colvarProjectSite.IsNullable = false;
                colvarProjectSite.IsPrimaryKey = false;
                colvarProjectSite.IsForeignKey = false;
                colvarProjectSite.IsReadOnly = false;
                
                schema.Columns.Add(colvarProjectSite);
                
                TableSchema.TableColumn colvarProjectSiteDesc = new TableSchema.TableColumn(schema);
                colvarProjectSiteDesc.ColumnName = "ProjectSiteDesc";
                colvarProjectSiteDesc.DataType = DbType.AnsiString;
                colvarProjectSiteDesc.MaxLength = 5000;
                colvarProjectSiteDesc.AutoIncrement = false;
                colvarProjectSiteDesc.IsNullable = false;
                colvarProjectSiteDesc.IsPrimaryKey = false;
                colvarProjectSiteDesc.IsForeignKey = false;
                colvarProjectSiteDesc.IsReadOnly = false;
                
                schema.Columns.Add(colvarProjectSiteDesc);
                
                TableSchema.TableColumn colvarStationID = new TableSchema.TableColumn(schema);
                colvarStationID.ColumnName = "StationID";
                colvarStationID.DataType = DbType.Guid;
                colvarStationID.MaxLength = 0;
                colvarStationID.AutoIncrement = false;
                colvarStationID.IsNullable = false;
                colvarStationID.IsPrimaryKey = false;
                colvarStationID.IsForeignKey = false;
                colvarStationID.IsReadOnly = false;
                
                schema.Columns.Add(colvarStationID);
                
                TableSchema.TableColumn colvarStation = new TableSchema.TableColumn(schema);
                colvarStation.ColumnName = "Station";
                colvarStation.DataType = DbType.AnsiString;
                colvarStation.MaxLength = 150;
                colvarStation.AutoIncrement = false;
                colvarStation.IsNullable = false;
                colvarStation.IsPrimaryKey = false;
                colvarStation.IsForeignKey = false;
                colvarStation.IsReadOnly = false;
                
                schema.Columns.Add(colvarStation);
                
                TableSchema.TableColumn colvarStationDesc = new TableSchema.TableColumn(schema);
                colvarStationDesc.ColumnName = "StationDesc";
                colvarStationDesc.DataType = DbType.AnsiString;
                colvarStationDesc.MaxLength = 5000;
                colvarStationDesc.AutoIncrement = false;
                colvarStationDesc.IsNullable = true;
                colvarStationDesc.IsPrimaryKey = false;
                colvarStationDesc.IsForeignKey = false;
                colvarStationDesc.IsReadOnly = false;
                
                schema.Columns.Add(colvarStationDesc);
                
                TableSchema.TableColumn colvarSensorID = new TableSchema.TableColumn(schema);
                colvarSensorID.ColumnName = "SensorID";
                colvarSensorID.DataType = DbType.Guid;
                colvarSensorID.MaxLength = 0;
                colvarSensorID.AutoIncrement = false;
                colvarSensorID.IsNullable = false;
                colvarSensorID.IsPrimaryKey = false;
                colvarSensorID.IsForeignKey = false;
                colvarSensorID.IsReadOnly = false;
                
                schema.Columns.Add(colvarSensorID);
                
                TableSchema.TableColumn colvarSensor = new TableSchema.TableColumn(schema);
                colvarSensor.ColumnName = "Sensor";
                colvarSensor.DataType = DbType.AnsiString;
                colvarSensor.MaxLength = 150;
                colvarSensor.AutoIncrement = false;
                colvarSensor.IsNullable = false;
                colvarSensor.IsPrimaryKey = false;
                colvarSensor.IsForeignKey = false;
                colvarSensor.IsReadOnly = false;
                
                schema.Columns.Add(colvarSensor);
                
                TableSchema.TableColumn colvarSensorDesc = new TableSchema.TableColumn(schema);
                colvarSensorDesc.ColumnName = "SensorDesc";
                colvarSensorDesc.DataType = DbType.AnsiString;
                colvarSensorDesc.MaxLength = 5000;
                colvarSensorDesc.AutoIncrement = false;
                colvarSensorDesc.IsNullable = true;
                colvarSensorDesc.IsPrimaryKey = false;
                colvarSensorDesc.IsForeignKey = false;
                colvarSensorDesc.IsReadOnly = false;
                
                schema.Columns.Add(colvarSensorDesc);
                
                TableSchema.TableColumn colvarPhenomenonID = new TableSchema.TableColumn(schema);
                colvarPhenomenonID.ColumnName = "PhenomenonID";
                colvarPhenomenonID.DataType = DbType.Guid;
                colvarPhenomenonID.MaxLength = 0;
                colvarPhenomenonID.AutoIncrement = false;
                colvarPhenomenonID.IsNullable = false;
                colvarPhenomenonID.IsPrimaryKey = false;
                colvarPhenomenonID.IsForeignKey = false;
                colvarPhenomenonID.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhenomenonID);
                
                TableSchema.TableColumn colvarPhenomenon = new TableSchema.TableColumn(schema);
                colvarPhenomenon.ColumnName = "Phenomenon";
                colvarPhenomenon.DataType = DbType.AnsiString;
                colvarPhenomenon.MaxLength = 150;
                colvarPhenomenon.AutoIncrement = false;
                colvarPhenomenon.IsNullable = false;
                colvarPhenomenon.IsPrimaryKey = false;
                colvarPhenomenon.IsForeignKey = false;
                colvarPhenomenon.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhenomenon);
                
                TableSchema.TableColumn colvarPhenomenonDesc = new TableSchema.TableColumn(schema);
                colvarPhenomenonDesc.ColumnName = "PhenomenonDesc";
                colvarPhenomenonDesc.DataType = DbType.AnsiString;
                colvarPhenomenonDesc.MaxLength = 5000;
                colvarPhenomenonDesc.AutoIncrement = false;
                colvarPhenomenonDesc.IsNullable = true;
                colvarPhenomenonDesc.IsPrimaryKey = false;
                colvarPhenomenonDesc.IsForeignKey = false;
                colvarPhenomenonDesc.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhenomenonDesc);
                
                TableSchema.TableColumn colvarOfferingID = new TableSchema.TableColumn(schema);
                colvarOfferingID.ColumnName = "OfferingID";
                colvarOfferingID.DataType = DbType.Guid;
                colvarOfferingID.MaxLength = 0;
                colvarOfferingID.AutoIncrement = false;
                colvarOfferingID.IsNullable = false;
                colvarOfferingID.IsPrimaryKey = false;
                colvarOfferingID.IsForeignKey = false;
                colvarOfferingID.IsReadOnly = false;
                
                schema.Columns.Add(colvarOfferingID);
                
                TableSchema.TableColumn colvarOffering = new TableSchema.TableColumn(schema);
                colvarOffering.ColumnName = "Offering";
                colvarOffering.DataType = DbType.AnsiString;
                colvarOffering.MaxLength = 150;
                colvarOffering.AutoIncrement = false;
                colvarOffering.IsNullable = false;
                colvarOffering.IsPrimaryKey = false;
                colvarOffering.IsForeignKey = false;
                colvarOffering.IsReadOnly = false;
                
                schema.Columns.Add(colvarOffering);
                
                TableSchema.TableColumn colvarOfferingDesc = new TableSchema.TableColumn(schema);
                colvarOfferingDesc.ColumnName = "OfferingDesc";
                colvarOfferingDesc.DataType = DbType.AnsiString;
                colvarOfferingDesc.MaxLength = 5000;
                colvarOfferingDesc.AutoIncrement = false;
                colvarOfferingDesc.IsNullable = true;
                colvarOfferingDesc.IsPrimaryKey = false;
                colvarOfferingDesc.IsForeignKey = false;
                colvarOfferingDesc.IsReadOnly = false;
                
                schema.Columns.Add(colvarOfferingDesc);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ObservationsDB"].AddSchema("vDataQuery",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VDataQuery()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VDataQuery(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VDataQuery(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VDataQuery(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Id")]
        [Bindable(true)]
        public Guid? Id 
	    {
		    get
		    {
			    return GetColumnValue<Guid?>("ID");
		    }
            set 
		    {
			    SetColumnValue("ID", value);
            }
        }
	      
        [XmlAttribute("OrganisationID")]
        [Bindable(true)]
        public Guid OrganisationID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("OrganisationID");
		    }
            set 
		    {
			    SetColumnValue("OrganisationID", value);
            }
        }
	      
        [XmlAttribute("Organisation")]
        [Bindable(true)]
        public string Organisation 
	    {
		    get
		    {
			    return GetColumnValue<string>("Organisation");
		    }
            set 
		    {
			    SetColumnValue("Organisation", value);
            }
        }
	      
        [XmlAttribute("OrganisationDesc")]
        [Bindable(true)]
        public string OrganisationDesc 
	    {
		    get
		    {
			    return GetColumnValue<string>("OrganisationDesc");
		    }
            set 
		    {
			    SetColumnValue("OrganisationDesc", value);
            }
        }
	      
        [XmlAttribute("ProjectSiteID")]
        [Bindable(true)]
        public Guid ProjectSiteID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("ProjectSiteID");
		    }
            set 
		    {
			    SetColumnValue("ProjectSiteID", value);
            }
        }
	      
        [XmlAttribute("ProjectSite")]
        [Bindable(true)]
        public string ProjectSite 
	    {
		    get
		    {
			    return GetColumnValue<string>("ProjectSite");
		    }
            set 
		    {
			    SetColumnValue("ProjectSite", value);
            }
        }
	      
        [XmlAttribute("ProjectSiteDesc")]
        [Bindable(true)]
        public string ProjectSiteDesc 
	    {
		    get
		    {
			    return GetColumnValue<string>("ProjectSiteDesc");
		    }
            set 
		    {
			    SetColumnValue("ProjectSiteDesc", value);
            }
        }
	      
        [XmlAttribute("StationID")]
        [Bindable(true)]
        public Guid StationID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("StationID");
		    }
            set 
		    {
			    SetColumnValue("StationID", value);
            }
        }
	      
        [XmlAttribute("Station")]
        [Bindable(true)]
        public string Station 
	    {
		    get
		    {
			    return GetColumnValue<string>("Station");
		    }
            set 
		    {
			    SetColumnValue("Station", value);
            }
        }
	      
        [XmlAttribute("StationDesc")]
        [Bindable(true)]
        public string StationDesc 
	    {
		    get
		    {
			    return GetColumnValue<string>("StationDesc");
		    }
            set 
		    {
			    SetColumnValue("StationDesc", value);
            }
        }
	      
        [XmlAttribute("SensorID")]
        [Bindable(true)]
        public Guid SensorID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("SensorID");
		    }
            set 
		    {
			    SetColumnValue("SensorID", value);
            }
        }
	      
        [XmlAttribute("Sensor")]
        [Bindable(true)]
        public string Sensor 
	    {
		    get
		    {
			    return GetColumnValue<string>("Sensor");
		    }
            set 
		    {
			    SetColumnValue("Sensor", value);
            }
        }
	      
        [XmlAttribute("SensorDesc")]
        [Bindable(true)]
        public string SensorDesc 
	    {
		    get
		    {
			    return GetColumnValue<string>("SensorDesc");
		    }
            set 
		    {
			    SetColumnValue("SensorDesc", value);
            }
        }
	      
        [XmlAttribute("PhenomenonID")]
        [Bindable(true)]
        public Guid PhenomenonID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("PhenomenonID");
		    }
            set 
		    {
			    SetColumnValue("PhenomenonID", value);
            }
        }
	      
        [XmlAttribute("Phenomenon")]
        [Bindable(true)]
        public string Phenomenon 
	    {
		    get
		    {
			    return GetColumnValue<string>("Phenomenon");
		    }
            set 
		    {
			    SetColumnValue("Phenomenon", value);
            }
        }
	      
        [XmlAttribute("PhenomenonDesc")]
        [Bindable(true)]
        public string PhenomenonDesc 
	    {
		    get
		    {
			    return GetColumnValue<string>("PhenomenonDesc");
		    }
            set 
		    {
			    SetColumnValue("PhenomenonDesc", value);
            }
        }
	      
        [XmlAttribute("OfferingID")]
        [Bindable(true)]
        public Guid OfferingID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("OfferingID");
		    }
            set 
		    {
			    SetColumnValue("OfferingID", value);
            }
        }
	      
        [XmlAttribute("Offering")]
        [Bindable(true)]
        public string Offering 
	    {
		    get
		    {
			    return GetColumnValue<string>("Offering");
		    }
            set 
		    {
			    SetColumnValue("Offering", value);
            }
        }
	      
        [XmlAttribute("OfferingDesc")]
        [Bindable(true)]
        public string OfferingDesc 
	    {
		    get
		    {
			    return GetColumnValue<string>("OfferingDesc");
		    }
            set 
		    {
			    SetColumnValue("OfferingDesc", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Id = @"ID";
            
            public static string OrganisationID = @"OrganisationID";
            
            public static string Organisation = @"Organisation";
            
            public static string OrganisationDesc = @"OrganisationDesc";
            
            public static string ProjectSiteID = @"ProjectSiteID";
            
            public static string ProjectSite = @"ProjectSite";
            
            public static string ProjectSiteDesc = @"ProjectSiteDesc";
            
            public static string StationID = @"StationID";
            
            public static string Station = @"Station";
            
            public static string StationDesc = @"StationDesc";
            
            public static string SensorID = @"SensorID";
            
            public static string Sensor = @"Sensor";
            
            public static string SensorDesc = @"SensorDesc";
            
            public static string PhenomenonID = @"PhenomenonID";
            
            public static string Phenomenon = @"Phenomenon";
            
            public static string PhenomenonDesc = @"PhenomenonDesc";
            
            public static string OfferingID = @"OfferingID";
            
            public static string Offering = @"Offering";
            
            public static string OfferingDesc = @"OfferingDesc";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
