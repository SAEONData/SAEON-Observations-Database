@using SAEON.Observations.QuerySite.Models
@model QueryModel
@{
    Html.EJ()
        .Button("btnLoadQuery")
        .Text("Load Query")
        .ShowRoundedCorner(true)
        .Type(ButtonType.Button)
        .Size(ButtonSize.Medium)
        .ContentType(ContentType.TextAndImage)
        .PrefixIcon("e-icon e-reload")
        .ClientSideEvents(e => e.Click("onLoadQueryClick"))
        .Render();
    Html.EJ()
        .Dialog("dialogLoadQuery")
        .Title("Load query")
        .ShowOnInit(false)
        .Width("auto")
        .ClientSideEvents(ev => ev.Close("onLoadQueryClose"))
        .ContentTemplate(
        @<text>
            <div class="row">
                <div class="col-md-12">
                    @(Html.EJ()
                        .Autocomplete("editLoadName")
                        .Datasource(ds => ds.URL("/Query/GetUserQueries").Adaptor(AdaptorType.WebApiAdaptor))
                        .AutocompleteFields(f => f.Text("Name").Key("Id"))
                        .WatermarkText("Name")
                        .Width("300px")
                        .ShowPopupButton(true)
                        .ClientSideEvents(ev => ev.Change("onLoadNameChange"))
                    )
                </div>
            </div>
            <div class="row ErrorRow">
                <div class="col-md-12" id="LoadError">
                </div>
            </div>
            <div class="row ButtonRow">
                <div class="col-md-12">
                    @(Html.EJ()
                        .Button("btnLoad")
                        .Text("Load")
                        .ShowRoundedCorner(true)
                        .Type(ButtonType.Button)
                        .Size(ButtonSize.Medium)
                        .ContentType(ContentType.TextAndImage)
                        .PrefixIcon("e-icon e-save")
                        .Enabled(false)
                        .ClientSideEvents(e => e.Click("onLoadClick"))
                    )
                </div>
            </div>
        </text>)
        .Render();
    Html.EJ()
        .Button("btnSaveQuery")
        .Text("Save Query")
        .ShowRoundedCorner(true)
        .Type(ButtonType.Button)
        .Size(ButtonSize.Medium)
        .ContentType(ContentType.TextAndImage)
        .PrefixIcon("e-icon e-save")
        .Enabled(false)
        .ClientSideEvents(e => e.Click("onSaveQueryClick"))
        .Render();
    Html.EJ()
        .Dialog("dialogSaveQuery")
        .Title("Save query")
        .ShowOnInit(false)
        .Width("auto")
        .ClientSideEvents(ev => ev.Close("onSaveQueryClose"))
        .ContentTemplate(
        @<text>
            <div class="row">
                <div class="col-md-12">
                    @(Html.EJ()
                        .MaskEdit("editSaveName")
                        .WatermarkText("Name")
                        .Width("300px")
                        .ClientSideEvents(ev => ev.Change("onSaveNameChange"))
                    )
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    @Html.EJ().MaskEdit("SaveDescription").WatermarkText("Description").Width("500px")
                </div>
            </div>
            <div class="row ErrorRow">
                <div class="col-md-12" id="SaveError">
                </div>
            </div>
            <div class="row ButtonRow">
                <div class="col-md-12">
                    @(Html.EJ()
                        .Button("btnSave")
                        .Text("Save")
                        .ShowRoundedCorner(true)
                        .Type(ButtonType.Button)
                        .Size(ButtonSize.Medium)
                        .ContentType(ContentType.TextAndImage)
                        .PrefixIcon("e-icon e-save")
                        .Enabled(false)
                        .ClientSideEvents(e => e.Click("onSaveClick"))
                    )
                </div>
            </div>
        </text>)
        .Render();
    Html.EJ()
        .Button("btnSearch")
        .Text("Search")
        .ShowRoundedCorner(true)
        .Type(ButtonType.Button)
        .Size(ButtonSize.Medium)
        .ContentType(ContentType.TextAndImage)
        .PrefixIcon("e-icon e-search")
        .Enabled(false)
        .ClientSideEvents(e => e.Click("onSearchClick"))
        .Render();
    Html.EJ()
        .Button("btnDownload")
        .Text("Download")
        .ShowRoundedCorner(true)
        .Type(ButtonType.Button)
        .Size(ButtonSize.Medium)
        .ContentType(ContentType.TextAndImage)
        .PrefixIcon("e-icon e-dataexport")
        .Enabled(false)
        .ClientSideEvents(e => e.Click("onDownloadClick"))
        .Render();
}
<script type="text/javascript">
    function onLoadQueryClick() {
        DisableButtons();
        $("#dialogLoadQuery").ejDialog("open");
    }
    function onLoadNameChange() {
        var loadName = $("#editLoadName").val();
        var btnLoad = $("#btnLoad").data("ejButton");
        if (loadName == "") {
            btnLoad.disable()
        }
        else {
            btnLoad.enable()
        }
    }
    function onLoadClick() {
        ShowWaiting();
        $.ajax({
            url: "/Query/LoadQuery",
            data: JSON.stringify({
                Name: $("#editLoadName").val()
            }),
            async: false,
            type: "POST",
            contentType: "application/json",
            success: function () {
                $("#PartialLocations").load("/Query/GetLocationsHtml", function () {
                    $("#PartialSelectedLocations").load("/Query/GetSelectedLocationsHtml", function () {
                        $("#PartialFeatures").load("/Query/GetFeaturesHtml", function () {
                            $("#PartialSelectedFeatures").load("/Query/GetSelectedFeaturesHtml", function () {
                                $("#PartialFilters").load("/Query/GetFiltersHtml", function () {
                                    UpdateMap();
                                    $("PartialTable").text("");
                                    $("PartialCards").text("");
                                    $("PartialChart").text("");
                                    HideResults();
                                    $("#dialogLoadQuery").ejDialog("close");
                                    HideWaiting();
                                    EnableButtons();
                                });
                            });
                        });
                    });
                });
            },
            error: function (jqXHR, textStatus, errorThrown) {
                ErrorInFunc("Error in onLoadClick Status: " + textStatus + " Error: " + errorThrown);
            }
        });
    }
    function onLoadQueryClose()
    {
        HideWaiting();
        EnableButtons();
    }
    function onSaveQueryClick() {
        DisableButtons();
        $("#dialogSaveQuery").ejDialog("open");
    }
    function onSaveNameChange() {
        var saveName = $("#editSaveName").val();
        var btnSave = $("#btnSave").data("ejButton");
        if (saveName == "") {
            btnSave.disable()
        }
        else {
            btnSave.enable()
        }
    }
    function onSaveClick() {
        ShowWaiting();
        $.ajax({
            url: "/Query/SaveQuery",
            data: JSON.stringify({
                Name: $("#editSaveName").val(),
                Description: $("#SaveDescription").val()
            }),
            async: true,
            type: "POST",
            contentType: "application/json"
        })
            .done(function () {
                $("#dialogSaveQuery").ejDialog("close");
                HideWaiting();
                EnableButtons();
            })
            .fail(function (jqXHR, textStatus, errorThrown) {
                if (errorThrown == "Conflict") {
                    $("#SaveError").text("A query with that name already exists!");
                    HideWaiting();
                }
                else {
                    ErrorInFunc("Error in onSaveClick Status: " + textStatus + " Error: " + errorThrown);
                }
            });
    }
    function onSaveQueryClose() {
        HideWaiting();
        EnableButtons();
    }
    function onSearchClick() {
        ShowWaiting();
        $.get("/Query/GetData")
            .done(function () {
                $("#PartialTable").load("/Query/GetTableHtml", function () {
                    $("#PartialCards").load("/Query/GetCardsHtml", function () {
                        $("#PartialChart").load("/Query/GetChartHtml", function () {
                            ShowResults();
                            EnableButtons();
                            HideWaiting();
                        });
                    });
                });
            })
            .fail(function (jqXHR, textStatus, errorThrown) {
                ErrorInFunc("Error in GetData Status: " + textStatus + " Error: " + errorThrown)
            });
    }
    function onDownloadClick() {

    }
    function ErrorInFunc(msg) {
        HideWaiting();
        alert(msg);
    }
    function EnableButtons() {
        var btnLoadQuery = $("#btnLoadQuery").data("ejButton");
        var btnSaveQuery = $("#btnSaveQuery").data("ejButton");
        var btnSearch = $("#btnSearch").data("ejButton");
        var btnDownload = $("#btnDownload").data("ejButton");
        treeObj = $("#treeViewLocations").data('ejTreeView');
        var checkedNodes = treeObj.getCheckedNodes();
        var selectedLocations = 0
        for (i = 0; i < checkedNodes.length; i++) {
            var checkedNode = checkedNodes[i];
            var nodeData = treeObj.getNode(checkedNode);
            if (nodeData.id.startsWith("STA~")) {
                selectedLocations = selectedLocations + 1;
            }
        }
        treeObj = $("#treeViewFeatures").data('ejTreeView');
        var checkedNodes = treeObj.getCheckedNodes();
        var selectedFeatures = 0
        for (i = 0; i < checkedNodes.length; i++) {
            var checkedNode = checkedNodes[i];
            var nodeData = treeObj.getNode(checkedNode);
            if (nodeData.id.startsWith("OFF~")) {
                selectedFeatures = selectedFeatures + 1;
            }
        }
        btnLoadQuery.enable();
        if ((selectedLocations > 0) & (selectedFeatures > 0)) {
            btnSaveQuery.enable();
            btnSearch.enable();
        }
        else {
            btnSaveQuery.disable();
            btnSearch.disable();
        }
        btnDownload.disable();
    }
    function DisableButtons() {
        var btnLoadQuery = $("#btnLoadQuery").data("ejButton");
        btnLoadQuery.disable();
        var btnSaveQuery = $("#btnSaveQuery").data("ejButton");
        btnSaveQuery.disable();
        var btnSearch = $("#btnSearch").data("ejButton");
        btnSearch.disable();
        var btnDownload = $("#btnDownload").data("ejButton");
        btnDownload.disable();
    }
    function ShowResults() {
        $("#TableTab").removeClass("hidden");
        $("#CardsTab").removeClass("hidden");
        $("#ChartTab").removeClass("hidden");
    }
    function HideResults() {
        $("#TableTab").addClass("hidden");
        $("#CardsTab").addClass("hidden");
        $("#ChartTab").addClass("hidden");
    }
</script>
