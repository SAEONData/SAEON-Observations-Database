using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SAEON.Observations.Data
{
    /// <summary>
    /// Controller class for DataSourceTransformation
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class DataSourceTransformationController
    {
        // Preload our schema..
        DataSourceTransformation thisSchemaLoad = new DataSourceTransformation();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public DataSourceTransformationCollection FetchAll()
        {
            DataSourceTransformationCollection coll = new DataSourceTransformationCollection();
            Query qry = new Query(DataSourceTransformation.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public DataSourceTransformationCollection FetchByID(object Id)
        {
            DataSourceTransformationCollection coll = new DataSourceTransformationCollection().Where("ID", Id).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public DataSourceTransformationCollection FetchByQuery(Query qry)
        {
            DataSourceTransformationCollection coll = new DataSourceTransformationCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object Id)
        {
            return (DataSourceTransformation.Delete(Id) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object Id)
        {
            return (DataSourceTransformation.Destroy(Id) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(Guid Id,Guid TransformationTypeID,Guid PhenomenonID,Guid? PhenomenonOfferingID,Guid? PhenomenonUOMID,DateTime? StartDate,DateTime? EndDate,Guid DataSourceID,string Definition,Guid? NewPhenomenonOfferingID,Guid? NewPhenomenonUOMID,int? Rank,Guid? SensorID,Guid? UserId,DateTime? AddedAt,DateTime? UpdatedAt,byte[] RowVersion,double? ParamA,double? ParamB,double? ParamC,double? ParamD,double? ParamE,double? ParamF,double? ParamG,double? ParamH,double? ParamI,double? ParamJ,double? ParamK,double? ParamL,double? ParamM,double? ParamN,double? ParamO,double? ParamP,double? ParamQ,double? ParamR,double? ParamSX,double? ParamT,double? ParamU,double? ParamV,double? ParamW,double? ParamX,double? ParamY,Guid? NewPhenomenonID)
	    {
		    DataSourceTransformation item = new DataSourceTransformation();
		    
            item.Id = Id;
            
            item.TransformationTypeID = TransformationTypeID;
            
            item.PhenomenonID = PhenomenonID;
            
            item.PhenomenonOfferingID = PhenomenonOfferingID;
            
            item.PhenomenonUOMID = PhenomenonUOMID;
            
            item.StartDate = StartDate;
            
            item.EndDate = EndDate;
            
            item.DataSourceID = DataSourceID;
            
            item.Definition = Definition;
            
            item.NewPhenomenonOfferingID = NewPhenomenonOfferingID;
            
            item.NewPhenomenonUOMID = NewPhenomenonUOMID;
            
            item.Rank = Rank;
            
            item.SensorID = SensorID;
            
            item.UserId = UserId;
            
            item.AddedAt = AddedAt;
            
            item.UpdatedAt = UpdatedAt;
            
            item.RowVersion = RowVersion;
            
            item.ParamA = ParamA;
            
            item.ParamB = ParamB;
            
            item.ParamC = ParamC;
            
            item.ParamD = ParamD;
            
            item.ParamE = ParamE;
            
            item.ParamF = ParamF;
            
            item.ParamG = ParamG;
            
            item.ParamH = ParamH;
            
            item.ParamI = ParamI;
            
            item.ParamJ = ParamJ;
            
            item.ParamK = ParamK;
            
            item.ParamL = ParamL;
            
            item.ParamM = ParamM;
            
            item.ParamN = ParamN;
            
            item.ParamO = ParamO;
            
            item.ParamP = ParamP;
            
            item.ParamQ = ParamQ;
            
            item.ParamR = ParamR;
            
            item.ParamSX = ParamSX;
            
            item.ParamT = ParamT;
            
            item.ParamU = ParamU;
            
            item.ParamV = ParamV;
            
            item.ParamW = ParamW;
            
            item.ParamX = ParamX;
            
            item.ParamY = ParamY;
            
            item.NewPhenomenonID = NewPhenomenonID;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(Guid Id,Guid TransformationTypeID,Guid PhenomenonID,Guid? PhenomenonOfferingID,Guid? PhenomenonUOMID,DateTime? StartDate,DateTime? EndDate,Guid DataSourceID,string Definition,Guid? NewPhenomenonOfferingID,Guid? NewPhenomenonUOMID,int? Rank,Guid? SensorID,Guid? UserId,DateTime? AddedAt,DateTime? UpdatedAt,byte[] RowVersion,double? ParamA,double? ParamB,double? ParamC,double? ParamD,double? ParamE,double? ParamF,double? ParamG,double? ParamH,double? ParamI,double? ParamJ,double? ParamK,double? ParamL,double? ParamM,double? ParamN,double? ParamO,double? ParamP,double? ParamQ,double? ParamR,double? ParamSX,double? ParamT,double? ParamU,double? ParamV,double? ParamW,double? ParamX,double? ParamY,Guid? NewPhenomenonID)
	    {
		    DataSourceTransformation item = new DataSourceTransformation();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.Id = Id;
				
			item.TransformationTypeID = TransformationTypeID;
				
			item.PhenomenonID = PhenomenonID;
				
			item.PhenomenonOfferingID = PhenomenonOfferingID;
				
			item.PhenomenonUOMID = PhenomenonUOMID;
				
			item.StartDate = StartDate;
				
			item.EndDate = EndDate;
				
			item.DataSourceID = DataSourceID;
				
			item.Definition = Definition;
				
			item.NewPhenomenonOfferingID = NewPhenomenonOfferingID;
				
			item.NewPhenomenonUOMID = NewPhenomenonUOMID;
				
			item.Rank = Rank;
				
			item.SensorID = SensorID;
				
			item.UserId = UserId;
				
			item.AddedAt = AddedAt;
				
			item.UpdatedAt = UpdatedAt;
				
			item.RowVersion = RowVersion;
				
			item.ParamA = ParamA;
				
			item.ParamB = ParamB;
				
			item.ParamC = ParamC;
				
			item.ParamD = ParamD;
				
			item.ParamE = ParamE;
				
			item.ParamF = ParamF;
				
			item.ParamG = ParamG;
				
			item.ParamH = ParamH;
				
			item.ParamI = ParamI;
				
			item.ParamJ = ParamJ;
				
			item.ParamK = ParamK;
				
			item.ParamL = ParamL;
				
			item.ParamM = ParamM;
				
			item.ParamN = ParamN;
				
			item.ParamO = ParamO;
				
			item.ParamP = ParamP;
				
			item.ParamQ = ParamQ;
				
			item.ParamR = ParamR;
				
			item.ParamSX = ParamSX;
				
			item.ParamT = ParamT;
				
			item.ParamU = ParamU;
				
			item.ParamV = ParamV;
				
			item.ParamW = ParamW;
				
			item.ParamX = ParamX;
				
			item.ParamY = ParamY;
				
			item.NewPhenomenonID = NewPhenomenonID;
				
	        item.Save(UserName);
	    }
    }
}
