using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SAEON.Observations.Data
{
	/// <summary>
	/// Strongly-typed collection for the AspNetUser class.
	/// </summary>
    [Serializable]
	public partial class AspNetUserCollection : ActiveList<AspNetUser, AspNetUserCollection>
	{	   
		public AspNetUserCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>AspNetUserCollection</returns>
		public AspNetUserCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                AspNetUser o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the AspNetUsers table.
	/// </summary>
	[Serializable]
	public partial class AspNetUser : ActiveRecord<AspNetUser>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public AspNetUser()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public AspNetUser(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public AspNetUser(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public AspNetUser(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AspNetUsers", TableType.Table, DataService.GetInstance("ObservationsDB"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "Id";
				colvarId.DataType = DbType.String;
				colvarId.MaxLength = 128;
				colvarId.AutoIncrement = false;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.String;
				colvarName.MaxLength = -1;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = false;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);
				
				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.String;
				colvarEmail.MaxLength = 256;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);
				
				TableSchema.TableColumn colvarEmailConfirmed = new TableSchema.TableColumn(schema);
				colvarEmailConfirmed.ColumnName = "EmailConfirmed";
				colvarEmailConfirmed.DataType = DbType.Boolean;
				colvarEmailConfirmed.MaxLength = 0;
				colvarEmailConfirmed.AutoIncrement = false;
				colvarEmailConfirmed.IsNullable = false;
				colvarEmailConfirmed.IsPrimaryKey = false;
				colvarEmailConfirmed.IsForeignKey = false;
				colvarEmailConfirmed.IsReadOnly = false;
				colvarEmailConfirmed.DefaultSetting = @"";
				colvarEmailConfirmed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmailConfirmed);
				
				TableSchema.TableColumn colvarPasswordHash = new TableSchema.TableColumn(schema);
				colvarPasswordHash.ColumnName = "PasswordHash";
				colvarPasswordHash.DataType = DbType.String;
				colvarPasswordHash.MaxLength = -1;
				colvarPasswordHash.AutoIncrement = false;
				colvarPasswordHash.IsNullable = true;
				colvarPasswordHash.IsPrimaryKey = false;
				colvarPasswordHash.IsForeignKey = false;
				colvarPasswordHash.IsReadOnly = false;
				colvarPasswordHash.DefaultSetting = @"";
				colvarPasswordHash.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPasswordHash);
				
				TableSchema.TableColumn colvarSecurityStamp = new TableSchema.TableColumn(schema);
				colvarSecurityStamp.ColumnName = "SecurityStamp";
				colvarSecurityStamp.DataType = DbType.String;
				colvarSecurityStamp.MaxLength = -1;
				colvarSecurityStamp.AutoIncrement = false;
				colvarSecurityStamp.IsNullable = true;
				colvarSecurityStamp.IsPrimaryKey = false;
				colvarSecurityStamp.IsForeignKey = false;
				colvarSecurityStamp.IsReadOnly = false;
				colvarSecurityStamp.DefaultSetting = @"";
				colvarSecurityStamp.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSecurityStamp);
				
				TableSchema.TableColumn colvarPhoneNumber = new TableSchema.TableColumn(schema);
				colvarPhoneNumber.ColumnName = "PhoneNumber";
				colvarPhoneNumber.DataType = DbType.String;
				colvarPhoneNumber.MaxLength = -1;
				colvarPhoneNumber.AutoIncrement = false;
				colvarPhoneNumber.IsNullable = true;
				colvarPhoneNumber.IsPrimaryKey = false;
				colvarPhoneNumber.IsForeignKey = false;
				colvarPhoneNumber.IsReadOnly = false;
				colvarPhoneNumber.DefaultSetting = @"";
				colvarPhoneNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneNumber);
				
				TableSchema.TableColumn colvarPhoneNumberConfirmed = new TableSchema.TableColumn(schema);
				colvarPhoneNumberConfirmed.ColumnName = "PhoneNumberConfirmed";
				colvarPhoneNumberConfirmed.DataType = DbType.Boolean;
				colvarPhoneNumberConfirmed.MaxLength = 0;
				colvarPhoneNumberConfirmed.AutoIncrement = false;
				colvarPhoneNumberConfirmed.IsNullable = false;
				colvarPhoneNumberConfirmed.IsPrimaryKey = false;
				colvarPhoneNumberConfirmed.IsForeignKey = false;
				colvarPhoneNumberConfirmed.IsReadOnly = false;
				colvarPhoneNumberConfirmed.DefaultSetting = @"";
				colvarPhoneNumberConfirmed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneNumberConfirmed);
				
				TableSchema.TableColumn colvarTwoFactorEnabled = new TableSchema.TableColumn(schema);
				colvarTwoFactorEnabled.ColumnName = "TwoFactorEnabled";
				colvarTwoFactorEnabled.DataType = DbType.Boolean;
				colvarTwoFactorEnabled.MaxLength = 0;
				colvarTwoFactorEnabled.AutoIncrement = false;
				colvarTwoFactorEnabled.IsNullable = false;
				colvarTwoFactorEnabled.IsPrimaryKey = false;
				colvarTwoFactorEnabled.IsForeignKey = false;
				colvarTwoFactorEnabled.IsReadOnly = false;
				colvarTwoFactorEnabled.DefaultSetting = @"";
				colvarTwoFactorEnabled.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTwoFactorEnabled);
				
				TableSchema.TableColumn colvarLockoutEndDateUtc = new TableSchema.TableColumn(schema);
				colvarLockoutEndDateUtc.ColumnName = "LockoutEndDateUtc";
				colvarLockoutEndDateUtc.DataType = DbType.DateTime;
				colvarLockoutEndDateUtc.MaxLength = 0;
				colvarLockoutEndDateUtc.AutoIncrement = false;
				colvarLockoutEndDateUtc.IsNullable = true;
				colvarLockoutEndDateUtc.IsPrimaryKey = false;
				colvarLockoutEndDateUtc.IsForeignKey = false;
				colvarLockoutEndDateUtc.IsReadOnly = false;
				colvarLockoutEndDateUtc.DefaultSetting = @"";
				colvarLockoutEndDateUtc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLockoutEndDateUtc);
				
				TableSchema.TableColumn colvarLockoutEnabled = new TableSchema.TableColumn(schema);
				colvarLockoutEnabled.ColumnName = "LockoutEnabled";
				colvarLockoutEnabled.DataType = DbType.Boolean;
				colvarLockoutEnabled.MaxLength = 0;
				colvarLockoutEnabled.AutoIncrement = false;
				colvarLockoutEnabled.IsNullable = false;
				colvarLockoutEnabled.IsPrimaryKey = false;
				colvarLockoutEnabled.IsForeignKey = false;
				colvarLockoutEnabled.IsReadOnly = false;
				colvarLockoutEnabled.DefaultSetting = @"";
				colvarLockoutEnabled.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLockoutEnabled);
				
				TableSchema.TableColumn colvarAccessFailedCount = new TableSchema.TableColumn(schema);
				colvarAccessFailedCount.ColumnName = "AccessFailedCount";
				colvarAccessFailedCount.DataType = DbType.Int32;
				colvarAccessFailedCount.MaxLength = 0;
				colvarAccessFailedCount.AutoIncrement = false;
				colvarAccessFailedCount.IsNullable = false;
				colvarAccessFailedCount.IsPrimaryKey = false;
				colvarAccessFailedCount.IsForeignKey = false;
				colvarAccessFailedCount.IsReadOnly = false;
				colvarAccessFailedCount.DefaultSetting = @"";
				colvarAccessFailedCount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccessFailedCount);
				
				TableSchema.TableColumn colvarUserName = new TableSchema.TableColumn(schema);
				colvarUserName.ColumnName = "UserName";
				colvarUserName.DataType = DbType.String;
				colvarUserName.MaxLength = 256;
				colvarUserName.AutoIncrement = false;
				colvarUserName.IsNullable = false;
				colvarUserName.IsPrimaryKey = false;
				colvarUserName.IsForeignKey = false;
				colvarUserName.IsReadOnly = false;
				colvarUserName.DefaultSetting = @"";
				colvarUserName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserName);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ObservationsDB"].AddSchema("AspNetUsers",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public string Id 
		{
			get { return GetColumnValue<string>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("Name")]
		[Bindable(true)]
		public string Name 
		{
			get { return GetColumnValue<string>(Columns.Name); }
			set { SetColumnValue(Columns.Name, value); }
		}
		  
		[XmlAttribute("Email")]
		[Bindable(true)]
		public string Email 
		{
			get { return GetColumnValue<string>(Columns.Email); }
			set { SetColumnValue(Columns.Email, value); }
		}
		  
		[XmlAttribute("EmailConfirmed")]
		[Bindable(true)]
		public bool EmailConfirmed 
		{
			get { return GetColumnValue<bool>(Columns.EmailConfirmed); }
			set { SetColumnValue(Columns.EmailConfirmed, value); }
		}
		  
		[XmlAttribute("PasswordHash")]
		[Bindable(true)]
		public string PasswordHash 
		{
			get { return GetColumnValue<string>(Columns.PasswordHash); }
			set { SetColumnValue(Columns.PasswordHash, value); }
		}
		  
		[XmlAttribute("SecurityStamp")]
		[Bindable(true)]
		public string SecurityStamp 
		{
			get { return GetColumnValue<string>(Columns.SecurityStamp); }
			set { SetColumnValue(Columns.SecurityStamp, value); }
		}
		  
		[XmlAttribute("PhoneNumber")]
		[Bindable(true)]
		public string PhoneNumber 
		{
			get { return GetColumnValue<string>(Columns.PhoneNumber); }
			set { SetColumnValue(Columns.PhoneNumber, value); }
		}
		  
		[XmlAttribute("PhoneNumberConfirmed")]
		[Bindable(true)]
		public bool PhoneNumberConfirmed 
		{
			get { return GetColumnValue<bool>(Columns.PhoneNumberConfirmed); }
			set { SetColumnValue(Columns.PhoneNumberConfirmed, value); }
		}
		  
		[XmlAttribute("TwoFactorEnabled")]
		[Bindable(true)]
		public bool TwoFactorEnabled 
		{
			get { return GetColumnValue<bool>(Columns.TwoFactorEnabled); }
			set { SetColumnValue(Columns.TwoFactorEnabled, value); }
		}
		  
		[XmlAttribute("LockoutEndDateUtc")]
		[Bindable(true)]
		public DateTime? LockoutEndDateUtc 
		{
			get { return GetColumnValue<DateTime?>(Columns.LockoutEndDateUtc); }
			set { SetColumnValue(Columns.LockoutEndDateUtc, value); }
		}
		  
		[XmlAttribute("LockoutEnabled")]
		[Bindable(true)]
		public bool LockoutEnabled 
		{
			get { return GetColumnValue<bool>(Columns.LockoutEnabled); }
			set { SetColumnValue(Columns.LockoutEnabled, value); }
		}
		  
		[XmlAttribute("AccessFailedCount")]
		[Bindable(true)]
		public int AccessFailedCount 
		{
			get { return GetColumnValue<int>(Columns.AccessFailedCount); }
			set { SetColumnValue(Columns.AccessFailedCount, value); }
		}
		  
		[XmlAttribute("UserName")]
		[Bindable(true)]
		public string UserName 
		{
			get { return GetColumnValue<string>(Columns.UserName); }
			set { SetColumnValue(Columns.UserName, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public SAEON.Observations.Data.AspNetUserClaimCollection AspNetUserClaims()
		{
			return new SAEON.Observations.Data.AspNetUserClaimCollection().Where(AspNetUserClaim.Columns.UserId, Id).Load();
		}
		public SAEON.Observations.Data.AspNetUserLoginCollection AspNetUserLogins()
		{
			return new SAEON.Observations.Data.AspNetUserLoginCollection().Where(AspNetUserLogin.Columns.UserId, Id).Load();
		}
		public SAEON.Observations.Data.AspNetUserRoleCollection AspNetUserRoles()
		{
			return new SAEON.Observations.Data.AspNetUserRoleCollection().Where(AspNetUserRole.Columns.UserId, Id).Load();
		}
		#endregion
		
			
		
		//no foreign key tables defined (0)
		
		
		
		#region Many To Many Helpers
		
		 
		public SAEON.Observations.Data.AspNetRoleCollection GetAspNetRoleCollection() { return AspNetUser.GetAspNetRoleCollection(this.Id); }
		public static SAEON.Observations.Data.AspNetRoleCollection GetAspNetRoleCollection(string varId)
		{
		    SubSonic.QueryCommand cmd = new SubSonic.QueryCommand("SELECT * FROM [dbo].[AspNetRoles] INNER JOIN [AspNetUserRoles] ON [AspNetRoles].[Id] = [AspNetUserRoles].[RoleId] WHERE [AspNetUserRoles].[UserId] = @UserId", AspNetUser.Schema.Provider.Name);
			cmd.AddParameter("@UserId", varId, DbType.String);
			IDataReader rdr = SubSonic.DataService.GetReader(cmd);
			AspNetRoleCollection coll = new AspNetRoleCollection();
			coll.LoadAndCloseReader(rdr);
			return coll;
		}
		
		public static void SaveAspNetRoleMap(string varId, AspNetRoleCollection items)
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			QueryCommand cmdDel = new QueryCommand("DELETE FROM [AspNetUserRoles] WHERE [AspNetUserRoles].[UserId] = @UserId", AspNetUser.Schema.Provider.Name);
			cmdDel.AddParameter("@UserId", varId, DbType.String);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (AspNetRole item in items)
			{
				AspNetUserRole varAspNetUserRole = new AspNetUserRole();
				varAspNetUserRole.SetColumnValue("UserId", varId);
				varAspNetUserRole.SetColumnValue("RoleId", item.GetPrimaryKeyValue());
				varAspNetUserRole.Save();
			}
		}
		public static void SaveAspNetRoleMap(string varId, System.Web.UI.WebControls.ListItemCollection itemList) 
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			 QueryCommand cmdDel = new QueryCommand("DELETE FROM [AspNetUserRoles] WHERE [AspNetUserRoles].[UserId] = @UserId", AspNetUser.Schema.Provider.Name);
			cmdDel.AddParameter("@UserId", varId, DbType.String);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (System.Web.UI.WebControls.ListItem l in itemList) 
			{
				if (l.Selected) 
				{
					AspNetUserRole varAspNetUserRole = new AspNetUserRole();
					varAspNetUserRole.SetColumnValue("UserId", varId);
					varAspNetUserRole.SetColumnValue("RoleId", l.Value);
					varAspNetUserRole.Save();
				}
			}
		}
		public static void SaveAspNetRoleMap(string varId , string[] itemList) 
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			 QueryCommand cmdDel = new QueryCommand("DELETE FROM [AspNetUserRoles] WHERE [AspNetUserRoles].[UserId] = @UserId", AspNetUser.Schema.Provider.Name);
			cmdDel.AddParameter("@UserId", varId, DbType.String);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (string item in itemList) 
			{
				AspNetUserRole varAspNetUserRole = new AspNetUserRole();
				varAspNetUserRole.SetColumnValue("UserId", varId);
				varAspNetUserRole.SetColumnValue("RoleId", item);
				varAspNetUserRole.Save();
			}
		}
		
		public static void DeleteAspNetRoleMap(string varId) 
		{
			QueryCommand cmdDel = new QueryCommand("DELETE FROM [AspNetUserRoles] WHERE [AspNetUserRoles].[UserId] = @UserId", AspNetUser.Schema.Provider.Name);
			cmdDel.AddParameter("@UserId", varId, DbType.String);
			DataService.ExecuteQuery(cmdDel);
		}
		
		#endregion
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varId,string varName,string varEmail,bool varEmailConfirmed,string varPasswordHash,string varSecurityStamp,string varPhoneNumber,bool varPhoneNumberConfirmed,bool varTwoFactorEnabled,DateTime? varLockoutEndDateUtc,bool varLockoutEnabled,int varAccessFailedCount,string varUserName)
		{
			AspNetUser item = new AspNetUser();
			
			item.Id = varId;
			
			item.Name = varName;
			
			item.Email = varEmail;
			
			item.EmailConfirmed = varEmailConfirmed;
			
			item.PasswordHash = varPasswordHash;
			
			item.SecurityStamp = varSecurityStamp;
			
			item.PhoneNumber = varPhoneNumber;
			
			item.PhoneNumberConfirmed = varPhoneNumberConfirmed;
			
			item.TwoFactorEnabled = varTwoFactorEnabled;
			
			item.LockoutEndDateUtc = varLockoutEndDateUtc;
			
			item.LockoutEnabled = varLockoutEnabled;
			
			item.AccessFailedCount = varAccessFailedCount;
			
			item.UserName = varUserName;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varId,string varName,string varEmail,bool varEmailConfirmed,string varPasswordHash,string varSecurityStamp,string varPhoneNumber,bool varPhoneNumberConfirmed,bool varTwoFactorEnabled,DateTime? varLockoutEndDateUtc,bool varLockoutEnabled,int varAccessFailedCount,string varUserName)
		{
			AspNetUser item = new AspNetUser();
			
				item.Id = varId;
			
				item.Name = varName;
			
				item.Email = varEmail;
			
				item.EmailConfirmed = varEmailConfirmed;
			
				item.PasswordHash = varPasswordHash;
			
				item.SecurityStamp = varSecurityStamp;
			
				item.PhoneNumber = varPhoneNumber;
			
				item.PhoneNumberConfirmed = varPhoneNumberConfirmed;
			
				item.TwoFactorEnabled = varTwoFactorEnabled;
			
				item.LockoutEndDateUtc = varLockoutEndDateUtc;
			
				item.LockoutEnabled = varLockoutEnabled;
			
				item.AccessFailedCount = varAccessFailedCount;
			
				item.UserName = varUserName;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn NameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn EmailColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn EmailConfirmedColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn PasswordHashColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn SecurityStampColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn PhoneNumberColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn PhoneNumberConfirmedColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn TwoFactorEnabledColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn LockoutEndDateUtcColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn LockoutEnabledColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn AccessFailedCountColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn UserNameColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"Id";
			 public static string Name = @"Name";
			 public static string Email = @"Email";
			 public static string EmailConfirmed = @"EmailConfirmed";
			 public static string PasswordHash = @"PasswordHash";
			 public static string SecurityStamp = @"SecurityStamp";
			 public static string PhoneNumber = @"PhoneNumber";
			 public static string PhoneNumberConfirmed = @"PhoneNumberConfirmed";
			 public static string TwoFactorEnabled = @"TwoFactorEnabled";
			 public static string LockoutEndDateUtc = @"LockoutEndDateUtc";
			 public static string LockoutEnabled = @"LockoutEnabled";
			 public static string AccessFailedCount = @"AccessFailedCount";
			 public static string UserName = @"UserName";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
