using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SAEON.Observations.Data{
    /// <summary>
    /// Strongly-typed collection for the VImportBatchSummary class.
    /// </summary>
    [Serializable]
    public partial class VImportBatchSummaryCollection : ReadOnlyList<VImportBatchSummary, VImportBatchSummaryCollection>
    {        
        public VImportBatchSummaryCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the vImportBatchSummary view.
    /// </summary>
    [Serializable]
    public partial class VImportBatchSummary : ReadOnlyRecord<VImportBatchSummary>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("vImportBatchSummary", TableType.View, DataService.GetInstance("ObservationsDB"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
                colvarId.ColumnName = "ID";
                colvarId.DataType = DbType.Guid;
                colvarId.MaxLength = 0;
                colvarId.AutoIncrement = false;
                colvarId.IsNullable = false;
                colvarId.IsPrimaryKey = false;
                colvarId.IsForeignKey = false;
                colvarId.IsReadOnly = false;
                
                schema.Columns.Add(colvarId);
                
                TableSchema.TableColumn colvarImportBatchID = new TableSchema.TableColumn(schema);
                colvarImportBatchID.ColumnName = "ImportBatchID";
                colvarImportBatchID.DataType = DbType.Guid;
                colvarImportBatchID.MaxLength = 0;
                colvarImportBatchID.AutoIncrement = false;
                colvarImportBatchID.IsNullable = false;
                colvarImportBatchID.IsPrimaryKey = false;
                colvarImportBatchID.IsForeignKey = false;
                colvarImportBatchID.IsReadOnly = false;
                
                schema.Columns.Add(colvarImportBatchID);
                
                TableSchema.TableColumn colvarSensorID = new TableSchema.TableColumn(schema);
                colvarSensorID.ColumnName = "SensorID";
                colvarSensorID.DataType = DbType.Guid;
                colvarSensorID.MaxLength = 0;
                colvarSensorID.AutoIncrement = false;
                colvarSensorID.IsNullable = false;
                colvarSensorID.IsPrimaryKey = false;
                colvarSensorID.IsForeignKey = false;
                colvarSensorID.IsReadOnly = false;
                
                schema.Columns.Add(colvarSensorID);
                
                TableSchema.TableColumn colvarInstrumentID = new TableSchema.TableColumn(schema);
                colvarInstrumentID.ColumnName = "InstrumentID";
                colvarInstrumentID.DataType = DbType.Guid;
                colvarInstrumentID.MaxLength = 0;
                colvarInstrumentID.AutoIncrement = false;
                colvarInstrumentID.IsNullable = false;
                colvarInstrumentID.IsPrimaryKey = false;
                colvarInstrumentID.IsForeignKey = false;
                colvarInstrumentID.IsReadOnly = false;
                
                schema.Columns.Add(colvarInstrumentID);
                
                TableSchema.TableColumn colvarStationID = new TableSchema.TableColumn(schema);
                colvarStationID.ColumnName = "StationID";
                colvarStationID.DataType = DbType.Guid;
                colvarStationID.MaxLength = 0;
                colvarStationID.AutoIncrement = false;
                colvarStationID.IsNullable = false;
                colvarStationID.IsPrimaryKey = false;
                colvarStationID.IsForeignKey = false;
                colvarStationID.IsReadOnly = false;
                
                schema.Columns.Add(colvarStationID);
                
                TableSchema.TableColumn colvarSiteID = new TableSchema.TableColumn(schema);
                colvarSiteID.ColumnName = "SiteID";
                colvarSiteID.DataType = DbType.Guid;
                colvarSiteID.MaxLength = 0;
                colvarSiteID.AutoIncrement = false;
                colvarSiteID.IsNullable = false;
                colvarSiteID.IsPrimaryKey = false;
                colvarSiteID.IsForeignKey = false;
                colvarSiteID.IsReadOnly = false;
                
                schema.Columns.Add(colvarSiteID);
                
                TableSchema.TableColumn colvarPhenomenonOfferingID = new TableSchema.TableColumn(schema);
                colvarPhenomenonOfferingID.ColumnName = "PhenomenonOfferingID";
                colvarPhenomenonOfferingID.DataType = DbType.Guid;
                colvarPhenomenonOfferingID.MaxLength = 0;
                colvarPhenomenonOfferingID.AutoIncrement = false;
                colvarPhenomenonOfferingID.IsNullable = false;
                colvarPhenomenonOfferingID.IsPrimaryKey = false;
                colvarPhenomenonOfferingID.IsForeignKey = false;
                colvarPhenomenonOfferingID.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhenomenonOfferingID);
                
                TableSchema.TableColumn colvarPhenomenonUOMID = new TableSchema.TableColumn(schema);
                colvarPhenomenonUOMID.ColumnName = "PhenomenonUOMID";
                colvarPhenomenonUOMID.DataType = DbType.Guid;
                colvarPhenomenonUOMID.MaxLength = 0;
                colvarPhenomenonUOMID.AutoIncrement = false;
                colvarPhenomenonUOMID.IsNullable = false;
                colvarPhenomenonUOMID.IsPrimaryKey = false;
                colvarPhenomenonUOMID.IsForeignKey = false;
                colvarPhenomenonUOMID.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhenomenonUOMID);
                
                TableSchema.TableColumn colvarCount = new TableSchema.TableColumn(schema);
                colvarCount.ColumnName = "Count";
                colvarCount.DataType = DbType.Int32;
                colvarCount.MaxLength = 0;
                colvarCount.AutoIncrement = false;
                colvarCount.IsNullable = false;
                colvarCount.IsPrimaryKey = false;
                colvarCount.IsForeignKey = false;
                colvarCount.IsReadOnly = false;
                
                schema.Columns.Add(colvarCount);
                
                TableSchema.TableColumn colvarMinimum = new TableSchema.TableColumn(schema);
                colvarMinimum.ColumnName = "Minimum";
                colvarMinimum.DataType = DbType.Double;
                colvarMinimum.MaxLength = 0;
                colvarMinimum.AutoIncrement = false;
                colvarMinimum.IsNullable = true;
                colvarMinimum.IsPrimaryKey = false;
                colvarMinimum.IsForeignKey = false;
                colvarMinimum.IsReadOnly = false;
                
                schema.Columns.Add(colvarMinimum);
                
                TableSchema.TableColumn colvarMaximum = new TableSchema.TableColumn(schema);
                colvarMaximum.ColumnName = "Maximum";
                colvarMaximum.DataType = DbType.Double;
                colvarMaximum.MaxLength = 0;
                colvarMaximum.AutoIncrement = false;
                colvarMaximum.IsNullable = true;
                colvarMaximum.IsPrimaryKey = false;
                colvarMaximum.IsForeignKey = false;
                colvarMaximum.IsReadOnly = false;
                
                schema.Columns.Add(colvarMaximum);
                
                TableSchema.TableColumn colvarAverage = new TableSchema.TableColumn(schema);
                colvarAverage.ColumnName = "Average";
                colvarAverage.DataType = DbType.Double;
                colvarAverage.MaxLength = 0;
                colvarAverage.AutoIncrement = false;
                colvarAverage.IsNullable = true;
                colvarAverage.IsPrimaryKey = false;
                colvarAverage.IsForeignKey = false;
                colvarAverage.IsReadOnly = false;
                
                schema.Columns.Add(colvarAverage);
                
                TableSchema.TableColumn colvarStandardDeviation = new TableSchema.TableColumn(schema);
                colvarStandardDeviation.ColumnName = "StandardDeviation";
                colvarStandardDeviation.DataType = DbType.Double;
                colvarStandardDeviation.MaxLength = 0;
                colvarStandardDeviation.AutoIncrement = false;
                colvarStandardDeviation.IsNullable = true;
                colvarStandardDeviation.IsPrimaryKey = false;
                colvarStandardDeviation.IsForeignKey = false;
                colvarStandardDeviation.IsReadOnly = false;
                
                schema.Columns.Add(colvarStandardDeviation);
                
                TableSchema.TableColumn colvarVariance = new TableSchema.TableColumn(schema);
                colvarVariance.ColumnName = "Variance";
                colvarVariance.DataType = DbType.Double;
                colvarVariance.MaxLength = 0;
                colvarVariance.AutoIncrement = false;
                colvarVariance.IsNullable = true;
                colvarVariance.IsPrimaryKey = false;
                colvarVariance.IsForeignKey = false;
                colvarVariance.IsReadOnly = false;
                
                schema.Columns.Add(colvarVariance);
                
                TableSchema.TableColumn colvarTopLatitude = new TableSchema.TableColumn(schema);
                colvarTopLatitude.ColumnName = "TopLatitude";
                colvarTopLatitude.DataType = DbType.Double;
                colvarTopLatitude.MaxLength = 0;
                colvarTopLatitude.AutoIncrement = false;
                colvarTopLatitude.IsNullable = true;
                colvarTopLatitude.IsPrimaryKey = false;
                colvarTopLatitude.IsForeignKey = false;
                colvarTopLatitude.IsReadOnly = false;
                
                schema.Columns.Add(colvarTopLatitude);
                
                TableSchema.TableColumn colvarBottomLatitude = new TableSchema.TableColumn(schema);
                colvarBottomLatitude.ColumnName = "BottomLatitude";
                colvarBottomLatitude.DataType = DbType.Double;
                colvarBottomLatitude.MaxLength = 0;
                colvarBottomLatitude.AutoIncrement = false;
                colvarBottomLatitude.IsNullable = true;
                colvarBottomLatitude.IsPrimaryKey = false;
                colvarBottomLatitude.IsForeignKey = false;
                colvarBottomLatitude.IsReadOnly = false;
                
                schema.Columns.Add(colvarBottomLatitude);
                
                TableSchema.TableColumn colvarLeftLongitude = new TableSchema.TableColumn(schema);
                colvarLeftLongitude.ColumnName = "LeftLongitude";
                colvarLeftLongitude.DataType = DbType.Double;
                colvarLeftLongitude.MaxLength = 0;
                colvarLeftLongitude.AutoIncrement = false;
                colvarLeftLongitude.IsNullable = true;
                colvarLeftLongitude.IsPrimaryKey = false;
                colvarLeftLongitude.IsForeignKey = false;
                colvarLeftLongitude.IsReadOnly = false;
                
                schema.Columns.Add(colvarLeftLongitude);
                
                TableSchema.TableColumn colvarRightLongitude = new TableSchema.TableColumn(schema);
                colvarRightLongitude.ColumnName = "RightLongitude";
                colvarRightLongitude.DataType = DbType.Double;
                colvarRightLongitude.MaxLength = 0;
                colvarRightLongitude.AutoIncrement = false;
                colvarRightLongitude.IsNullable = true;
                colvarRightLongitude.IsPrimaryKey = false;
                colvarRightLongitude.IsForeignKey = false;
                colvarRightLongitude.IsReadOnly = false;
                
                schema.Columns.Add(colvarRightLongitude);
                
                TableSchema.TableColumn colvarPhenomenonCode = new TableSchema.TableColumn(schema);
                colvarPhenomenonCode.ColumnName = "PhenomenonCode";
                colvarPhenomenonCode.DataType = DbType.AnsiString;
                colvarPhenomenonCode.MaxLength = 50;
                colvarPhenomenonCode.AutoIncrement = false;
                colvarPhenomenonCode.IsNullable = false;
                colvarPhenomenonCode.IsPrimaryKey = false;
                colvarPhenomenonCode.IsForeignKey = false;
                colvarPhenomenonCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhenomenonCode);
                
                TableSchema.TableColumn colvarPhenomenonName = new TableSchema.TableColumn(schema);
                colvarPhenomenonName.ColumnName = "PhenomenonName";
                colvarPhenomenonName.DataType = DbType.AnsiString;
                colvarPhenomenonName.MaxLength = 150;
                colvarPhenomenonName.AutoIncrement = false;
                colvarPhenomenonName.IsNullable = false;
                colvarPhenomenonName.IsPrimaryKey = false;
                colvarPhenomenonName.IsForeignKey = false;
                colvarPhenomenonName.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhenomenonName);
                
                TableSchema.TableColumn colvarOfferingCode = new TableSchema.TableColumn(schema);
                colvarOfferingCode.ColumnName = "OfferingCode";
                colvarOfferingCode.DataType = DbType.AnsiString;
                colvarOfferingCode.MaxLength = 50;
                colvarOfferingCode.AutoIncrement = false;
                colvarOfferingCode.IsNullable = false;
                colvarOfferingCode.IsPrimaryKey = false;
                colvarOfferingCode.IsForeignKey = false;
                colvarOfferingCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarOfferingCode);
                
                TableSchema.TableColumn colvarOfferingName = new TableSchema.TableColumn(schema);
                colvarOfferingName.ColumnName = "OfferingName";
                colvarOfferingName.DataType = DbType.AnsiString;
                colvarOfferingName.MaxLength = 150;
                colvarOfferingName.AutoIncrement = false;
                colvarOfferingName.IsNullable = false;
                colvarOfferingName.IsPrimaryKey = false;
                colvarOfferingName.IsForeignKey = false;
                colvarOfferingName.IsReadOnly = false;
                
                schema.Columns.Add(colvarOfferingName);
                
                TableSchema.TableColumn colvarUnitOfMeasureCode = new TableSchema.TableColumn(schema);
                colvarUnitOfMeasureCode.ColumnName = "UnitOfMeasureCode";
                colvarUnitOfMeasureCode.DataType = DbType.AnsiString;
                colvarUnitOfMeasureCode.MaxLength = 50;
                colvarUnitOfMeasureCode.AutoIncrement = false;
                colvarUnitOfMeasureCode.IsNullable = false;
                colvarUnitOfMeasureCode.IsPrimaryKey = false;
                colvarUnitOfMeasureCode.IsForeignKey = false;
                colvarUnitOfMeasureCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarUnitOfMeasureCode);
                
                TableSchema.TableColumn colvarUnitOfMeasureUnit = new TableSchema.TableColumn(schema);
                colvarUnitOfMeasureUnit.ColumnName = "UnitOfMeasureUnit";
                colvarUnitOfMeasureUnit.DataType = DbType.AnsiString;
                colvarUnitOfMeasureUnit.MaxLength = 100;
                colvarUnitOfMeasureUnit.AutoIncrement = false;
                colvarUnitOfMeasureUnit.IsNullable = false;
                colvarUnitOfMeasureUnit.IsPrimaryKey = false;
                colvarUnitOfMeasureUnit.IsForeignKey = false;
                colvarUnitOfMeasureUnit.IsReadOnly = false;
                
                schema.Columns.Add(colvarUnitOfMeasureUnit);
                
                TableSchema.TableColumn colvarUnitOfMeasureSymbol = new TableSchema.TableColumn(schema);
                colvarUnitOfMeasureSymbol.ColumnName = "UnitOfMeasureSymbol";
                colvarUnitOfMeasureSymbol.DataType = DbType.AnsiString;
                colvarUnitOfMeasureSymbol.MaxLength = 20;
                colvarUnitOfMeasureSymbol.AutoIncrement = false;
                colvarUnitOfMeasureSymbol.IsNullable = false;
                colvarUnitOfMeasureSymbol.IsPrimaryKey = false;
                colvarUnitOfMeasureSymbol.IsForeignKey = false;
                colvarUnitOfMeasureSymbol.IsReadOnly = false;
                
                schema.Columns.Add(colvarUnitOfMeasureSymbol);
                
                TableSchema.TableColumn colvarSensorCode = new TableSchema.TableColumn(schema);
                colvarSensorCode.ColumnName = "SensorCode";
                colvarSensorCode.DataType = DbType.AnsiString;
                colvarSensorCode.MaxLength = 50;
                colvarSensorCode.AutoIncrement = false;
                colvarSensorCode.IsNullable = false;
                colvarSensorCode.IsPrimaryKey = false;
                colvarSensorCode.IsForeignKey = false;
                colvarSensorCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarSensorCode);
                
                TableSchema.TableColumn colvarSensorName = new TableSchema.TableColumn(schema);
                colvarSensorName.ColumnName = "SensorName";
                colvarSensorName.DataType = DbType.AnsiString;
                colvarSensorName.MaxLength = 150;
                colvarSensorName.AutoIncrement = false;
                colvarSensorName.IsNullable = false;
                colvarSensorName.IsPrimaryKey = false;
                colvarSensorName.IsForeignKey = false;
                colvarSensorName.IsReadOnly = false;
                
                schema.Columns.Add(colvarSensorName);
                
                TableSchema.TableColumn colvarInstrumentCode = new TableSchema.TableColumn(schema);
                colvarInstrumentCode.ColumnName = "InstrumentCode";
                colvarInstrumentCode.DataType = DbType.AnsiString;
                colvarInstrumentCode.MaxLength = 50;
                colvarInstrumentCode.AutoIncrement = false;
                colvarInstrumentCode.IsNullable = false;
                colvarInstrumentCode.IsPrimaryKey = false;
                colvarInstrumentCode.IsForeignKey = false;
                colvarInstrumentCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarInstrumentCode);
                
                TableSchema.TableColumn colvarInstrumentName = new TableSchema.TableColumn(schema);
                colvarInstrumentName.ColumnName = "InstrumentName";
                colvarInstrumentName.DataType = DbType.AnsiString;
                colvarInstrumentName.MaxLength = 150;
                colvarInstrumentName.AutoIncrement = false;
                colvarInstrumentName.IsNullable = false;
                colvarInstrumentName.IsPrimaryKey = false;
                colvarInstrumentName.IsForeignKey = false;
                colvarInstrumentName.IsReadOnly = false;
                
                schema.Columns.Add(colvarInstrumentName);
                
                TableSchema.TableColumn colvarStationCode = new TableSchema.TableColumn(schema);
                colvarStationCode.ColumnName = "StationCode";
                colvarStationCode.DataType = DbType.AnsiString;
                colvarStationCode.MaxLength = 50;
                colvarStationCode.AutoIncrement = false;
                colvarStationCode.IsNullable = false;
                colvarStationCode.IsPrimaryKey = false;
                colvarStationCode.IsForeignKey = false;
                colvarStationCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarStationCode);
                
                TableSchema.TableColumn colvarStationName = new TableSchema.TableColumn(schema);
                colvarStationName.ColumnName = "StationName";
                colvarStationName.DataType = DbType.AnsiString;
                colvarStationName.MaxLength = 150;
                colvarStationName.AutoIncrement = false;
                colvarStationName.IsNullable = false;
                colvarStationName.IsPrimaryKey = false;
                colvarStationName.IsForeignKey = false;
                colvarStationName.IsReadOnly = false;
                
                schema.Columns.Add(colvarStationName);
                
                TableSchema.TableColumn colvarSiteCode = new TableSchema.TableColumn(schema);
                colvarSiteCode.ColumnName = "SiteCode";
                colvarSiteCode.DataType = DbType.AnsiString;
                colvarSiteCode.MaxLength = 50;
                colvarSiteCode.AutoIncrement = false;
                colvarSiteCode.IsNullable = false;
                colvarSiteCode.IsPrimaryKey = false;
                colvarSiteCode.IsForeignKey = false;
                colvarSiteCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarSiteCode);
                
                TableSchema.TableColumn colvarSiteName = new TableSchema.TableColumn(schema);
                colvarSiteName.ColumnName = "SiteName";
                colvarSiteName.DataType = DbType.AnsiString;
                colvarSiteName.MaxLength = 150;
                colvarSiteName.AutoIncrement = false;
                colvarSiteName.IsNullable = false;
                colvarSiteName.IsPrimaryKey = false;
                colvarSiteName.IsForeignKey = false;
                colvarSiteName.IsReadOnly = false;
                
                schema.Columns.Add(colvarSiteName);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ObservationsDB"].AddSchema("vImportBatchSummary",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VImportBatchSummary()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VImportBatchSummary(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VImportBatchSummary(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VImportBatchSummary(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Id")]
        [Bindable(true)]
        public Guid Id 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("ID");
		    }
            set 
		    {
			    SetColumnValue("ID", value);
            }
        }
	      
        [XmlAttribute("ImportBatchID")]
        [Bindable(true)]
        public Guid ImportBatchID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("ImportBatchID");
		    }
            set 
		    {
			    SetColumnValue("ImportBatchID", value);
            }
        }
	      
        [XmlAttribute("SensorID")]
        [Bindable(true)]
        public Guid SensorID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("SensorID");
		    }
            set 
		    {
			    SetColumnValue("SensorID", value);
            }
        }
	      
        [XmlAttribute("InstrumentID")]
        [Bindable(true)]
        public Guid InstrumentID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("InstrumentID");
		    }
            set 
		    {
			    SetColumnValue("InstrumentID", value);
            }
        }
	      
        [XmlAttribute("StationID")]
        [Bindable(true)]
        public Guid StationID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("StationID");
		    }
            set 
		    {
			    SetColumnValue("StationID", value);
            }
        }
	      
        [XmlAttribute("SiteID")]
        [Bindable(true)]
        public Guid SiteID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("SiteID");
		    }
            set 
		    {
			    SetColumnValue("SiteID", value);
            }
        }
	      
        [XmlAttribute("PhenomenonOfferingID")]
        [Bindable(true)]
        public Guid PhenomenonOfferingID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("PhenomenonOfferingID");
		    }
            set 
		    {
			    SetColumnValue("PhenomenonOfferingID", value);
            }
        }
	      
        [XmlAttribute("PhenomenonUOMID")]
        [Bindable(true)]
        public Guid PhenomenonUOMID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("PhenomenonUOMID");
		    }
            set 
		    {
			    SetColumnValue("PhenomenonUOMID", value);
            }
        }
	      
        [XmlAttribute("Count")]
        [Bindable(true)]
        public int Count 
	    {
		    get
		    {
			    return GetColumnValue<int>("Count");
		    }
            set 
		    {
			    SetColumnValue("Count", value);
            }
        }
	      
        [XmlAttribute("Minimum")]
        [Bindable(true)]
        public double? Minimum 
	    {
		    get
		    {
			    return GetColumnValue<double?>("Minimum");
		    }
            set 
		    {
			    SetColumnValue("Minimum", value);
            }
        }
	      
        [XmlAttribute("Maximum")]
        [Bindable(true)]
        public double? Maximum 
	    {
		    get
		    {
			    return GetColumnValue<double?>("Maximum");
		    }
            set 
		    {
			    SetColumnValue("Maximum", value);
            }
        }
	      
        [XmlAttribute("Average")]
        [Bindable(true)]
        public double? Average 
	    {
		    get
		    {
			    return GetColumnValue<double?>("Average");
		    }
            set 
		    {
			    SetColumnValue("Average", value);
            }
        }
	      
        [XmlAttribute("StandardDeviation")]
        [Bindable(true)]
        public double? StandardDeviation 
	    {
		    get
		    {
			    return GetColumnValue<double?>("StandardDeviation");
		    }
            set 
		    {
			    SetColumnValue("StandardDeviation", value);
            }
        }
	      
        [XmlAttribute("Variance")]
        [Bindable(true)]
        public double? Variance 
	    {
		    get
		    {
			    return GetColumnValue<double?>("Variance");
		    }
            set 
		    {
			    SetColumnValue("Variance", value);
            }
        }
	      
        [XmlAttribute("TopLatitude")]
        [Bindable(true)]
        public double? TopLatitude 
	    {
		    get
		    {
			    return GetColumnValue<double?>("TopLatitude");
		    }
            set 
		    {
			    SetColumnValue("TopLatitude", value);
            }
        }
	      
        [XmlAttribute("BottomLatitude")]
        [Bindable(true)]
        public double? BottomLatitude 
	    {
		    get
		    {
			    return GetColumnValue<double?>("BottomLatitude");
		    }
            set 
		    {
			    SetColumnValue("BottomLatitude", value);
            }
        }
	      
        [XmlAttribute("LeftLongitude")]
        [Bindable(true)]
        public double? LeftLongitude 
	    {
		    get
		    {
			    return GetColumnValue<double?>("LeftLongitude");
		    }
            set 
		    {
			    SetColumnValue("LeftLongitude", value);
            }
        }
	      
        [XmlAttribute("RightLongitude")]
        [Bindable(true)]
        public double? RightLongitude 
	    {
		    get
		    {
			    return GetColumnValue<double?>("RightLongitude");
		    }
            set 
		    {
			    SetColumnValue("RightLongitude", value);
            }
        }
	      
        [XmlAttribute("PhenomenonCode")]
        [Bindable(true)]
        public string PhenomenonCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("PhenomenonCode");
		    }
            set 
		    {
			    SetColumnValue("PhenomenonCode", value);
            }
        }
	      
        [XmlAttribute("PhenomenonName")]
        [Bindable(true)]
        public string PhenomenonName 
	    {
		    get
		    {
			    return GetColumnValue<string>("PhenomenonName");
		    }
            set 
		    {
			    SetColumnValue("PhenomenonName", value);
            }
        }
	      
        [XmlAttribute("OfferingCode")]
        [Bindable(true)]
        public string OfferingCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("OfferingCode");
		    }
            set 
		    {
			    SetColumnValue("OfferingCode", value);
            }
        }
	      
        [XmlAttribute("OfferingName")]
        [Bindable(true)]
        public string OfferingName 
	    {
		    get
		    {
			    return GetColumnValue<string>("OfferingName");
		    }
            set 
		    {
			    SetColumnValue("OfferingName", value);
            }
        }
	      
        [XmlAttribute("UnitOfMeasureCode")]
        [Bindable(true)]
        public string UnitOfMeasureCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("UnitOfMeasureCode");
		    }
            set 
		    {
			    SetColumnValue("UnitOfMeasureCode", value);
            }
        }
	      
        [XmlAttribute("UnitOfMeasureUnit")]
        [Bindable(true)]
        public string UnitOfMeasureUnit 
	    {
		    get
		    {
			    return GetColumnValue<string>("UnitOfMeasureUnit");
		    }
            set 
		    {
			    SetColumnValue("UnitOfMeasureUnit", value);
            }
        }
	      
        [XmlAttribute("UnitOfMeasureSymbol")]
        [Bindable(true)]
        public string UnitOfMeasureSymbol 
	    {
		    get
		    {
			    return GetColumnValue<string>("UnitOfMeasureSymbol");
		    }
            set 
		    {
			    SetColumnValue("UnitOfMeasureSymbol", value);
            }
        }
	      
        [XmlAttribute("SensorCode")]
        [Bindable(true)]
        public string SensorCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("SensorCode");
		    }
            set 
		    {
			    SetColumnValue("SensorCode", value);
            }
        }
	      
        [XmlAttribute("SensorName")]
        [Bindable(true)]
        public string SensorName 
	    {
		    get
		    {
			    return GetColumnValue<string>("SensorName");
		    }
            set 
		    {
			    SetColumnValue("SensorName", value);
            }
        }
	      
        [XmlAttribute("InstrumentCode")]
        [Bindable(true)]
        public string InstrumentCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("InstrumentCode");
		    }
            set 
		    {
			    SetColumnValue("InstrumentCode", value);
            }
        }
	      
        [XmlAttribute("InstrumentName")]
        [Bindable(true)]
        public string InstrumentName 
	    {
		    get
		    {
			    return GetColumnValue<string>("InstrumentName");
		    }
            set 
		    {
			    SetColumnValue("InstrumentName", value);
            }
        }
	      
        [XmlAttribute("StationCode")]
        [Bindable(true)]
        public string StationCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("StationCode");
		    }
            set 
		    {
			    SetColumnValue("StationCode", value);
            }
        }
	      
        [XmlAttribute("StationName")]
        [Bindable(true)]
        public string StationName 
	    {
		    get
		    {
			    return GetColumnValue<string>("StationName");
		    }
            set 
		    {
			    SetColumnValue("StationName", value);
            }
        }
	      
        [XmlAttribute("SiteCode")]
        [Bindable(true)]
        public string SiteCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("SiteCode");
		    }
            set 
		    {
			    SetColumnValue("SiteCode", value);
            }
        }
	      
        [XmlAttribute("SiteName")]
        [Bindable(true)]
        public string SiteName 
	    {
		    get
		    {
			    return GetColumnValue<string>("SiteName");
		    }
            set 
		    {
			    SetColumnValue("SiteName", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Id = @"ID";
            
            public static string ImportBatchID = @"ImportBatchID";
            
            public static string SensorID = @"SensorID";
            
            public static string InstrumentID = @"InstrumentID";
            
            public static string StationID = @"StationID";
            
            public static string SiteID = @"SiteID";
            
            public static string PhenomenonOfferingID = @"PhenomenonOfferingID";
            
            public static string PhenomenonUOMID = @"PhenomenonUOMID";
            
            public static string Count = @"Count";
            
            public static string Minimum = @"Minimum";
            
            public static string Maximum = @"Maximum";
            
            public static string Average = @"Average";
            
            public static string StandardDeviation = @"StandardDeviation";
            
            public static string Variance = @"Variance";
            
            public static string TopLatitude = @"TopLatitude";
            
            public static string BottomLatitude = @"BottomLatitude";
            
            public static string LeftLongitude = @"LeftLongitude";
            
            public static string RightLongitude = @"RightLongitude";
            
            public static string PhenomenonCode = @"PhenomenonCode";
            
            public static string PhenomenonName = @"PhenomenonName";
            
            public static string OfferingCode = @"OfferingCode";
            
            public static string OfferingName = @"OfferingName";
            
            public static string UnitOfMeasureCode = @"UnitOfMeasureCode";
            
            public static string UnitOfMeasureUnit = @"UnitOfMeasureUnit";
            
            public static string UnitOfMeasureSymbol = @"UnitOfMeasureSymbol";
            
            public static string SensorCode = @"SensorCode";
            
            public static string SensorName = @"SensorName";
            
            public static string InstrumentCode = @"InstrumentCode";
            
            public static string InstrumentName = @"InstrumentName";
            
            public static string StationCode = @"StationCode";
            
            public static string StationName = @"StationName";
            
            public static string SiteCode = @"SiteCode";
            
            public static string SiteName = @"SiteName";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
