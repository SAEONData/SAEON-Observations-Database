using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SAEON.Observations.Data{
    /// <summary>
    /// Strongly-typed collection for the VInventory class.
    /// </summary>
    [Serializable]
    public partial class VInventoryCollection : ReadOnlyList<VInventory, VInventoryCollection>
    {        
        public VInventoryCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the vInventory view.
    /// </summary>
    [Serializable]
    public partial class VInventory : ReadOnlyRecord<VInventory>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("vInventory", TableType.View, DataService.GetInstance("ObservationsDB"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarSite = new TableSchema.TableColumn(schema);
                colvarSite.ColumnName = "Site";
                colvarSite.DataType = DbType.AnsiString;
                colvarSite.MaxLength = 150;
                colvarSite.AutoIncrement = false;
                colvarSite.IsNullable = false;
                colvarSite.IsPrimaryKey = false;
                colvarSite.IsForeignKey = false;
                colvarSite.IsReadOnly = false;
                
                schema.Columns.Add(colvarSite);
                
                TableSchema.TableColumn colvarStation = new TableSchema.TableColumn(schema);
                colvarStation.ColumnName = "Station";
                colvarStation.DataType = DbType.AnsiString;
                colvarStation.MaxLength = 150;
                colvarStation.AutoIncrement = false;
                colvarStation.IsNullable = false;
                colvarStation.IsPrimaryKey = false;
                colvarStation.IsForeignKey = false;
                colvarStation.IsReadOnly = false;
                
                schema.Columns.Add(colvarStation);
                
                TableSchema.TableColumn colvarInstrument = new TableSchema.TableColumn(schema);
                colvarInstrument.ColumnName = "Instrument";
                colvarInstrument.DataType = DbType.AnsiString;
                colvarInstrument.MaxLength = 150;
                colvarInstrument.AutoIncrement = false;
                colvarInstrument.IsNullable = false;
                colvarInstrument.IsPrimaryKey = false;
                colvarInstrument.IsForeignKey = false;
                colvarInstrument.IsReadOnly = false;
                
                schema.Columns.Add(colvarInstrument);
                
                TableSchema.TableColumn colvarSensor = new TableSchema.TableColumn(schema);
                colvarSensor.ColumnName = "Sensor";
                colvarSensor.DataType = DbType.AnsiString;
                colvarSensor.MaxLength = 150;
                colvarSensor.AutoIncrement = false;
                colvarSensor.IsNullable = false;
                colvarSensor.IsPrimaryKey = false;
                colvarSensor.IsForeignKey = false;
                colvarSensor.IsReadOnly = false;
                
                schema.Columns.Add(colvarSensor);
                
                TableSchema.TableColumn colvarPhenomenon = new TableSchema.TableColumn(schema);
                colvarPhenomenon.ColumnName = "Phenomenon";
                colvarPhenomenon.DataType = DbType.AnsiString;
                colvarPhenomenon.MaxLength = 150;
                colvarPhenomenon.AutoIncrement = false;
                colvarPhenomenon.IsNullable = false;
                colvarPhenomenon.IsPrimaryKey = false;
                colvarPhenomenon.IsForeignKey = false;
                colvarPhenomenon.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhenomenon);
                
                TableSchema.TableColumn colvarStartDate = new TableSchema.TableColumn(schema);
                colvarStartDate.ColumnName = "StartDate";
                colvarStartDate.DataType = DbType.DateTime;
                colvarStartDate.MaxLength = 0;
                colvarStartDate.AutoIncrement = false;
                colvarStartDate.IsNullable = true;
                colvarStartDate.IsPrimaryKey = false;
                colvarStartDate.IsForeignKey = false;
                colvarStartDate.IsReadOnly = false;
                
                schema.Columns.Add(colvarStartDate);
                
                TableSchema.TableColumn colvarEndDate = new TableSchema.TableColumn(schema);
                colvarEndDate.ColumnName = "EndDate";
                colvarEndDate.DataType = DbType.DateTime;
                colvarEndDate.MaxLength = 0;
                colvarEndDate.AutoIncrement = false;
                colvarEndDate.IsNullable = true;
                colvarEndDate.IsPrimaryKey = false;
                colvarEndDate.IsForeignKey = false;
                colvarEndDate.IsReadOnly = false;
                
                schema.Columns.Add(colvarEndDate);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ObservationsDB"].AddSchema("vInventory",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VInventory()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VInventory(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VInventory(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VInventory(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Site")]
        [Bindable(true)]
        public string Site 
	    {
		    get
		    {
			    return GetColumnValue<string>("Site");
		    }
            set 
		    {
			    SetColumnValue("Site", value);
            }
        }
	      
        [XmlAttribute("Station")]
        [Bindable(true)]
        public string Station 
	    {
		    get
		    {
			    return GetColumnValue<string>("Station");
		    }
            set 
		    {
			    SetColumnValue("Station", value);
            }
        }
	      
        [XmlAttribute("Instrument")]
        [Bindable(true)]
        public string Instrument 
	    {
		    get
		    {
			    return GetColumnValue<string>("Instrument");
		    }
            set 
		    {
			    SetColumnValue("Instrument", value);
            }
        }
	      
        [XmlAttribute("Sensor")]
        [Bindable(true)]
        public string Sensor 
	    {
		    get
		    {
			    return GetColumnValue<string>("Sensor");
		    }
            set 
		    {
			    SetColumnValue("Sensor", value);
            }
        }
	      
        [XmlAttribute("Phenomenon")]
        [Bindable(true)]
        public string Phenomenon 
	    {
		    get
		    {
			    return GetColumnValue<string>("Phenomenon");
		    }
            set 
		    {
			    SetColumnValue("Phenomenon", value);
            }
        }
	      
        [XmlAttribute("StartDate")]
        [Bindable(true)]
        public DateTime? StartDate 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("StartDate");
		    }
            set 
		    {
			    SetColumnValue("StartDate", value);
            }
        }
	      
        [XmlAttribute("EndDate")]
        [Bindable(true)]
        public DateTime? EndDate 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("EndDate");
		    }
            set 
		    {
			    SetColumnValue("EndDate", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Site = @"Site";
            
            public static string Station = @"Station";
            
            public static string Instrument = @"Instrument";
            
            public static string Sensor = @"Sensor";
            
            public static string Phenomenon = @"Phenomenon";
            
            public static string StartDate = @"StartDate";
            
            public static string EndDate = @"EndDate";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
