using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SAEON.Observations.Data{
    /// <summary>
    /// Strongly-typed collection for the VDataSourceTransformation class.
    /// </summary>
    [Serializable]
    public partial class VDataSourceTransformationCollection : ReadOnlyList<VDataSourceTransformation, VDataSourceTransformationCollection>
    {        
        public VDataSourceTransformationCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the vDataSourceTransformation view.
    /// </summary>
    [Serializable]
    public partial class VDataSourceTransformation : ReadOnlyRecord<VDataSourceTransformation>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("vDataSourceTransformation", TableType.View, DataService.GetInstance("ObservationsDB"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
                colvarId.ColumnName = "ID";
                colvarId.DataType = DbType.Guid;
                colvarId.MaxLength = 0;
                colvarId.AutoIncrement = false;
                colvarId.IsNullable = false;
                colvarId.IsPrimaryKey = false;
                colvarId.IsForeignKey = false;
                colvarId.IsReadOnly = false;
                
                schema.Columns.Add(colvarId);
                
                TableSchema.TableColumn colvarTransformationTypeID = new TableSchema.TableColumn(schema);
                colvarTransformationTypeID.ColumnName = "TransformationTypeID";
                colvarTransformationTypeID.DataType = DbType.Guid;
                colvarTransformationTypeID.MaxLength = 0;
                colvarTransformationTypeID.AutoIncrement = false;
                colvarTransformationTypeID.IsNullable = false;
                colvarTransformationTypeID.IsPrimaryKey = false;
                colvarTransformationTypeID.IsForeignKey = false;
                colvarTransformationTypeID.IsReadOnly = false;
                
                schema.Columns.Add(colvarTransformationTypeID);
                
                TableSchema.TableColumn colvarPhenomenonID = new TableSchema.TableColumn(schema);
                colvarPhenomenonID.ColumnName = "PhenomenonID";
                colvarPhenomenonID.DataType = DbType.Guid;
                colvarPhenomenonID.MaxLength = 0;
                colvarPhenomenonID.AutoIncrement = false;
                colvarPhenomenonID.IsNullable = false;
                colvarPhenomenonID.IsPrimaryKey = false;
                colvarPhenomenonID.IsForeignKey = false;
                colvarPhenomenonID.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhenomenonID);
                
                TableSchema.TableColumn colvarPhenomenonOfferingID = new TableSchema.TableColumn(schema);
                colvarPhenomenonOfferingID.ColumnName = "PhenomenonOfferingID";
                colvarPhenomenonOfferingID.DataType = DbType.Guid;
                colvarPhenomenonOfferingID.MaxLength = 0;
                colvarPhenomenonOfferingID.AutoIncrement = false;
                colvarPhenomenonOfferingID.IsNullable = true;
                colvarPhenomenonOfferingID.IsPrimaryKey = false;
                colvarPhenomenonOfferingID.IsForeignKey = false;
                colvarPhenomenonOfferingID.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhenomenonOfferingID);
                
                TableSchema.TableColumn colvarPhenomenonUOMID = new TableSchema.TableColumn(schema);
                colvarPhenomenonUOMID.ColumnName = "PhenomenonUOMID";
                colvarPhenomenonUOMID.DataType = DbType.Guid;
                colvarPhenomenonUOMID.MaxLength = 0;
                colvarPhenomenonUOMID.AutoIncrement = false;
                colvarPhenomenonUOMID.IsNullable = true;
                colvarPhenomenonUOMID.IsPrimaryKey = false;
                colvarPhenomenonUOMID.IsForeignKey = false;
                colvarPhenomenonUOMID.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhenomenonUOMID);
                
                TableSchema.TableColumn colvarStartDate = new TableSchema.TableColumn(schema);
                colvarStartDate.ColumnName = "StartDate";
                colvarStartDate.DataType = DbType.DateTime;
                colvarStartDate.MaxLength = 0;
                colvarStartDate.AutoIncrement = false;
                colvarStartDate.IsNullable = true;
                colvarStartDate.IsPrimaryKey = false;
                colvarStartDate.IsForeignKey = false;
                colvarStartDate.IsReadOnly = false;
                
                schema.Columns.Add(colvarStartDate);
                
                TableSchema.TableColumn colvarEndDate = new TableSchema.TableColumn(schema);
                colvarEndDate.ColumnName = "EndDate";
                colvarEndDate.DataType = DbType.DateTime;
                colvarEndDate.MaxLength = 0;
                colvarEndDate.AutoIncrement = false;
                colvarEndDate.IsNullable = true;
                colvarEndDate.IsPrimaryKey = false;
                colvarEndDate.IsForeignKey = false;
                colvarEndDate.IsReadOnly = false;
                
                schema.Columns.Add(colvarEndDate);
                
                TableSchema.TableColumn colvarDataSourceID = new TableSchema.TableColumn(schema);
                colvarDataSourceID.ColumnName = "DataSourceID";
                colvarDataSourceID.DataType = DbType.Guid;
                colvarDataSourceID.MaxLength = 0;
                colvarDataSourceID.AutoIncrement = false;
                colvarDataSourceID.IsNullable = false;
                colvarDataSourceID.IsPrimaryKey = false;
                colvarDataSourceID.IsForeignKey = false;
                colvarDataSourceID.IsReadOnly = false;
                
                schema.Columns.Add(colvarDataSourceID);
                
                TableSchema.TableColumn colvarDefinition = new TableSchema.TableColumn(schema);
                colvarDefinition.ColumnName = "Definition";
                colvarDefinition.DataType = DbType.AnsiString;
                colvarDefinition.MaxLength = 2147483647;
                colvarDefinition.AutoIncrement = false;
                colvarDefinition.IsNullable = false;
                colvarDefinition.IsPrimaryKey = false;
                colvarDefinition.IsForeignKey = false;
                colvarDefinition.IsReadOnly = false;
                
                schema.Columns.Add(colvarDefinition);
                
                TableSchema.TableColumn colvarNewPhenomenonOfferingID = new TableSchema.TableColumn(schema);
                colvarNewPhenomenonOfferingID.ColumnName = "NewPhenomenonOfferingID";
                colvarNewPhenomenonOfferingID.DataType = DbType.Guid;
                colvarNewPhenomenonOfferingID.MaxLength = 0;
                colvarNewPhenomenonOfferingID.AutoIncrement = false;
                colvarNewPhenomenonOfferingID.IsNullable = true;
                colvarNewPhenomenonOfferingID.IsPrimaryKey = false;
                colvarNewPhenomenonOfferingID.IsForeignKey = false;
                colvarNewPhenomenonOfferingID.IsReadOnly = false;
                
                schema.Columns.Add(colvarNewPhenomenonOfferingID);
                
                TableSchema.TableColumn colvarNewPhenomenonUOMID = new TableSchema.TableColumn(schema);
                colvarNewPhenomenonUOMID.ColumnName = "NewPhenomenonUOMID";
                colvarNewPhenomenonUOMID.DataType = DbType.Guid;
                colvarNewPhenomenonUOMID.MaxLength = 0;
                colvarNewPhenomenonUOMID.AutoIncrement = false;
                colvarNewPhenomenonUOMID.IsNullable = true;
                colvarNewPhenomenonUOMID.IsPrimaryKey = false;
                colvarNewPhenomenonUOMID.IsForeignKey = false;
                colvarNewPhenomenonUOMID.IsReadOnly = false;
                
                schema.Columns.Add(colvarNewPhenomenonUOMID);
                
                TableSchema.TableColumn colvarRank = new TableSchema.TableColumn(schema);
                colvarRank.ColumnName = "Rank";
                colvarRank.DataType = DbType.Int32;
                colvarRank.MaxLength = 0;
                colvarRank.AutoIncrement = false;
                colvarRank.IsNullable = true;
                colvarRank.IsPrimaryKey = false;
                colvarRank.IsForeignKey = false;
                colvarRank.IsReadOnly = false;
                
                schema.Columns.Add(colvarRank);
                
                TableSchema.TableColumn colvarSensorID = new TableSchema.TableColumn(schema);
                colvarSensorID.ColumnName = "SensorID";
                colvarSensorID.DataType = DbType.Guid;
                colvarSensorID.MaxLength = 0;
                colvarSensorID.AutoIncrement = false;
                colvarSensorID.IsNullable = true;
                colvarSensorID.IsPrimaryKey = false;
                colvarSensorID.IsForeignKey = false;
                colvarSensorID.IsReadOnly = false;
                
                schema.Columns.Add(colvarSensorID);
                
                TableSchema.TableColumn colvarUserId = new TableSchema.TableColumn(schema);
                colvarUserId.ColumnName = "UserId";
                colvarUserId.DataType = DbType.Guid;
                colvarUserId.MaxLength = 0;
                colvarUserId.AutoIncrement = false;
                colvarUserId.IsNullable = true;
                colvarUserId.IsPrimaryKey = false;
                colvarUserId.IsForeignKey = false;
                colvarUserId.IsReadOnly = false;
                
                schema.Columns.Add(colvarUserId);
                
                TableSchema.TableColumn colvarAddedAt = new TableSchema.TableColumn(schema);
                colvarAddedAt.ColumnName = "AddedAt";
                colvarAddedAt.DataType = DbType.DateTime;
                colvarAddedAt.MaxLength = 0;
                colvarAddedAt.AutoIncrement = false;
                colvarAddedAt.IsNullable = true;
                colvarAddedAt.IsPrimaryKey = false;
                colvarAddedAt.IsForeignKey = false;
                colvarAddedAt.IsReadOnly = false;
                
                schema.Columns.Add(colvarAddedAt);
                
                TableSchema.TableColumn colvarUpdatedAt = new TableSchema.TableColumn(schema);
                colvarUpdatedAt.ColumnName = "UpdatedAt";
                colvarUpdatedAt.DataType = DbType.DateTime;
                colvarUpdatedAt.MaxLength = 0;
                colvarUpdatedAt.AutoIncrement = false;
                colvarUpdatedAt.IsNullable = true;
                colvarUpdatedAt.IsPrimaryKey = false;
                colvarUpdatedAt.IsForeignKey = false;
                colvarUpdatedAt.IsReadOnly = false;
                
                schema.Columns.Add(colvarUpdatedAt);
                
                TableSchema.TableColumn colvarRowVersion = new TableSchema.TableColumn(schema);
                colvarRowVersion.ColumnName = "RowVersion";
                colvarRowVersion.DataType = DbType.Binary;
                colvarRowVersion.MaxLength = 0;
                colvarRowVersion.AutoIncrement = false;
                colvarRowVersion.IsNullable = false;
                colvarRowVersion.IsPrimaryKey = false;
                colvarRowVersion.IsForeignKey = false;
                colvarRowVersion.IsReadOnly = true;
                
                schema.Columns.Add(colvarRowVersion);
                
                TableSchema.TableColumn colvarParamA = new TableSchema.TableColumn(schema);
                colvarParamA.ColumnName = "ParamA";
                colvarParamA.DataType = DbType.Double;
                colvarParamA.MaxLength = 0;
                colvarParamA.AutoIncrement = false;
                colvarParamA.IsNullable = true;
                colvarParamA.IsPrimaryKey = false;
                colvarParamA.IsForeignKey = false;
                colvarParamA.IsReadOnly = false;
                
                schema.Columns.Add(colvarParamA);
                
                TableSchema.TableColumn colvarParamB = new TableSchema.TableColumn(schema);
                colvarParamB.ColumnName = "ParamB";
                colvarParamB.DataType = DbType.Double;
                colvarParamB.MaxLength = 0;
                colvarParamB.AutoIncrement = false;
                colvarParamB.IsNullable = true;
                colvarParamB.IsPrimaryKey = false;
                colvarParamB.IsForeignKey = false;
                colvarParamB.IsReadOnly = false;
                
                schema.Columns.Add(colvarParamB);
                
                TableSchema.TableColumn colvarParamC = new TableSchema.TableColumn(schema);
                colvarParamC.ColumnName = "ParamC";
                colvarParamC.DataType = DbType.Double;
                colvarParamC.MaxLength = 0;
                colvarParamC.AutoIncrement = false;
                colvarParamC.IsNullable = true;
                colvarParamC.IsPrimaryKey = false;
                colvarParamC.IsForeignKey = false;
                colvarParamC.IsReadOnly = false;
                
                schema.Columns.Add(colvarParamC);
                
                TableSchema.TableColumn colvarParamD = new TableSchema.TableColumn(schema);
                colvarParamD.ColumnName = "ParamD";
                colvarParamD.DataType = DbType.Double;
                colvarParamD.MaxLength = 0;
                colvarParamD.AutoIncrement = false;
                colvarParamD.IsNullable = true;
                colvarParamD.IsPrimaryKey = false;
                colvarParamD.IsForeignKey = false;
                colvarParamD.IsReadOnly = false;
                
                schema.Columns.Add(colvarParamD);
                
                TableSchema.TableColumn colvarParamE = new TableSchema.TableColumn(schema);
                colvarParamE.ColumnName = "ParamE";
                colvarParamE.DataType = DbType.Double;
                colvarParamE.MaxLength = 0;
                colvarParamE.AutoIncrement = false;
                colvarParamE.IsNullable = true;
                colvarParamE.IsPrimaryKey = false;
                colvarParamE.IsForeignKey = false;
                colvarParamE.IsReadOnly = false;
                
                schema.Columns.Add(colvarParamE);
                
                TableSchema.TableColumn colvarParamF = new TableSchema.TableColumn(schema);
                colvarParamF.ColumnName = "ParamF";
                colvarParamF.DataType = DbType.Double;
                colvarParamF.MaxLength = 0;
                colvarParamF.AutoIncrement = false;
                colvarParamF.IsNullable = true;
                colvarParamF.IsPrimaryKey = false;
                colvarParamF.IsForeignKey = false;
                colvarParamF.IsReadOnly = false;
                
                schema.Columns.Add(colvarParamF);
                
                TableSchema.TableColumn colvarParamG = new TableSchema.TableColumn(schema);
                colvarParamG.ColumnName = "ParamG";
                colvarParamG.DataType = DbType.Double;
                colvarParamG.MaxLength = 0;
                colvarParamG.AutoIncrement = false;
                colvarParamG.IsNullable = true;
                colvarParamG.IsPrimaryKey = false;
                colvarParamG.IsForeignKey = false;
                colvarParamG.IsReadOnly = false;
                
                schema.Columns.Add(colvarParamG);
                
                TableSchema.TableColumn colvarParamH = new TableSchema.TableColumn(schema);
                colvarParamH.ColumnName = "ParamH";
                colvarParamH.DataType = DbType.Double;
                colvarParamH.MaxLength = 0;
                colvarParamH.AutoIncrement = false;
                colvarParamH.IsNullable = true;
                colvarParamH.IsPrimaryKey = false;
                colvarParamH.IsForeignKey = false;
                colvarParamH.IsReadOnly = false;
                
                schema.Columns.Add(colvarParamH);
                
                TableSchema.TableColumn colvarParamI = new TableSchema.TableColumn(schema);
                colvarParamI.ColumnName = "ParamI";
                colvarParamI.DataType = DbType.Double;
                colvarParamI.MaxLength = 0;
                colvarParamI.AutoIncrement = false;
                colvarParamI.IsNullable = true;
                colvarParamI.IsPrimaryKey = false;
                colvarParamI.IsForeignKey = false;
                colvarParamI.IsReadOnly = false;
                
                schema.Columns.Add(colvarParamI);
                
                TableSchema.TableColumn colvarParamJ = new TableSchema.TableColumn(schema);
                colvarParamJ.ColumnName = "ParamJ";
                colvarParamJ.DataType = DbType.Double;
                colvarParamJ.MaxLength = 0;
                colvarParamJ.AutoIncrement = false;
                colvarParamJ.IsNullable = true;
                colvarParamJ.IsPrimaryKey = false;
                colvarParamJ.IsForeignKey = false;
                colvarParamJ.IsReadOnly = false;
                
                schema.Columns.Add(colvarParamJ);
                
                TableSchema.TableColumn colvarParamK = new TableSchema.TableColumn(schema);
                colvarParamK.ColumnName = "ParamK";
                colvarParamK.DataType = DbType.Double;
                colvarParamK.MaxLength = 0;
                colvarParamK.AutoIncrement = false;
                colvarParamK.IsNullable = true;
                colvarParamK.IsPrimaryKey = false;
                colvarParamK.IsForeignKey = false;
                colvarParamK.IsReadOnly = false;
                
                schema.Columns.Add(colvarParamK);
                
                TableSchema.TableColumn colvarParamL = new TableSchema.TableColumn(schema);
                colvarParamL.ColumnName = "ParamL";
                colvarParamL.DataType = DbType.Double;
                colvarParamL.MaxLength = 0;
                colvarParamL.AutoIncrement = false;
                colvarParamL.IsNullable = true;
                colvarParamL.IsPrimaryKey = false;
                colvarParamL.IsForeignKey = false;
                colvarParamL.IsReadOnly = false;
                
                schema.Columns.Add(colvarParamL);
                
                TableSchema.TableColumn colvarParamM = new TableSchema.TableColumn(schema);
                colvarParamM.ColumnName = "ParamM";
                colvarParamM.DataType = DbType.Double;
                colvarParamM.MaxLength = 0;
                colvarParamM.AutoIncrement = false;
                colvarParamM.IsNullable = true;
                colvarParamM.IsPrimaryKey = false;
                colvarParamM.IsForeignKey = false;
                colvarParamM.IsReadOnly = false;
                
                schema.Columns.Add(colvarParamM);
                
                TableSchema.TableColumn colvarParamN = new TableSchema.TableColumn(schema);
                colvarParamN.ColumnName = "ParamN";
                colvarParamN.DataType = DbType.Double;
                colvarParamN.MaxLength = 0;
                colvarParamN.AutoIncrement = false;
                colvarParamN.IsNullable = true;
                colvarParamN.IsPrimaryKey = false;
                colvarParamN.IsForeignKey = false;
                colvarParamN.IsReadOnly = false;
                
                schema.Columns.Add(colvarParamN);
                
                TableSchema.TableColumn colvarParamO = new TableSchema.TableColumn(schema);
                colvarParamO.ColumnName = "ParamO";
                colvarParamO.DataType = DbType.Double;
                colvarParamO.MaxLength = 0;
                colvarParamO.AutoIncrement = false;
                colvarParamO.IsNullable = true;
                colvarParamO.IsPrimaryKey = false;
                colvarParamO.IsForeignKey = false;
                colvarParamO.IsReadOnly = false;
                
                schema.Columns.Add(colvarParamO);
                
                TableSchema.TableColumn colvarParamP = new TableSchema.TableColumn(schema);
                colvarParamP.ColumnName = "ParamP";
                colvarParamP.DataType = DbType.Double;
                colvarParamP.MaxLength = 0;
                colvarParamP.AutoIncrement = false;
                colvarParamP.IsNullable = true;
                colvarParamP.IsPrimaryKey = false;
                colvarParamP.IsForeignKey = false;
                colvarParamP.IsReadOnly = false;
                
                schema.Columns.Add(colvarParamP);
                
                TableSchema.TableColumn colvarParamQ = new TableSchema.TableColumn(schema);
                colvarParamQ.ColumnName = "ParamQ";
                colvarParamQ.DataType = DbType.Double;
                colvarParamQ.MaxLength = 0;
                colvarParamQ.AutoIncrement = false;
                colvarParamQ.IsNullable = true;
                colvarParamQ.IsPrimaryKey = false;
                colvarParamQ.IsForeignKey = false;
                colvarParamQ.IsReadOnly = false;
                
                schema.Columns.Add(colvarParamQ);
                
                TableSchema.TableColumn colvarParamR = new TableSchema.TableColumn(schema);
                colvarParamR.ColumnName = "ParamR";
                colvarParamR.DataType = DbType.Double;
                colvarParamR.MaxLength = 0;
                colvarParamR.AutoIncrement = false;
                colvarParamR.IsNullable = true;
                colvarParamR.IsPrimaryKey = false;
                colvarParamR.IsForeignKey = false;
                colvarParamR.IsReadOnly = false;
                
                schema.Columns.Add(colvarParamR);
                
                TableSchema.TableColumn colvarParamSX = new TableSchema.TableColumn(schema);
                colvarParamSX.ColumnName = "ParamS";
                colvarParamSX.DataType = DbType.Double;
                colvarParamSX.MaxLength = 0;
                colvarParamSX.AutoIncrement = false;
                colvarParamSX.IsNullable = true;
                colvarParamSX.IsPrimaryKey = false;
                colvarParamSX.IsForeignKey = false;
                colvarParamSX.IsReadOnly = false;
                
                schema.Columns.Add(colvarParamSX);
                
                TableSchema.TableColumn colvarParamT = new TableSchema.TableColumn(schema);
                colvarParamT.ColumnName = "ParamT";
                colvarParamT.DataType = DbType.Double;
                colvarParamT.MaxLength = 0;
                colvarParamT.AutoIncrement = false;
                colvarParamT.IsNullable = true;
                colvarParamT.IsPrimaryKey = false;
                colvarParamT.IsForeignKey = false;
                colvarParamT.IsReadOnly = false;
                
                schema.Columns.Add(colvarParamT);
                
                TableSchema.TableColumn colvarParamU = new TableSchema.TableColumn(schema);
                colvarParamU.ColumnName = "ParamU";
                colvarParamU.DataType = DbType.Double;
                colvarParamU.MaxLength = 0;
                colvarParamU.AutoIncrement = false;
                colvarParamU.IsNullable = true;
                colvarParamU.IsPrimaryKey = false;
                colvarParamU.IsForeignKey = false;
                colvarParamU.IsReadOnly = false;
                
                schema.Columns.Add(colvarParamU);
                
                TableSchema.TableColumn colvarParamV = new TableSchema.TableColumn(schema);
                colvarParamV.ColumnName = "ParamV";
                colvarParamV.DataType = DbType.Double;
                colvarParamV.MaxLength = 0;
                colvarParamV.AutoIncrement = false;
                colvarParamV.IsNullable = true;
                colvarParamV.IsPrimaryKey = false;
                colvarParamV.IsForeignKey = false;
                colvarParamV.IsReadOnly = false;
                
                schema.Columns.Add(colvarParamV);
                
                TableSchema.TableColumn colvarParamW = new TableSchema.TableColumn(schema);
                colvarParamW.ColumnName = "ParamW";
                colvarParamW.DataType = DbType.Double;
                colvarParamW.MaxLength = 0;
                colvarParamW.AutoIncrement = false;
                colvarParamW.IsNullable = true;
                colvarParamW.IsPrimaryKey = false;
                colvarParamW.IsForeignKey = false;
                colvarParamW.IsReadOnly = false;
                
                schema.Columns.Add(colvarParamW);
                
                TableSchema.TableColumn colvarParamX = new TableSchema.TableColumn(schema);
                colvarParamX.ColumnName = "ParamX";
                colvarParamX.DataType = DbType.Double;
                colvarParamX.MaxLength = 0;
                colvarParamX.AutoIncrement = false;
                colvarParamX.IsNullable = true;
                colvarParamX.IsPrimaryKey = false;
                colvarParamX.IsForeignKey = false;
                colvarParamX.IsReadOnly = false;
                
                schema.Columns.Add(colvarParamX);
                
                TableSchema.TableColumn colvarParamY = new TableSchema.TableColumn(schema);
                colvarParamY.ColumnName = "ParamY";
                colvarParamY.DataType = DbType.Double;
                colvarParamY.MaxLength = 0;
                colvarParamY.AutoIncrement = false;
                colvarParamY.IsNullable = true;
                colvarParamY.IsPrimaryKey = false;
                colvarParamY.IsForeignKey = false;
                colvarParamY.IsReadOnly = false;
                
                schema.Columns.Add(colvarParamY);
                
                TableSchema.TableColumn colvarNewPhenomenonID = new TableSchema.TableColumn(schema);
                colvarNewPhenomenonID.ColumnName = "NewPhenomenonID";
                colvarNewPhenomenonID.DataType = DbType.Guid;
                colvarNewPhenomenonID.MaxLength = 0;
                colvarNewPhenomenonID.AutoIncrement = false;
                colvarNewPhenomenonID.IsNullable = true;
                colvarNewPhenomenonID.IsPrimaryKey = false;
                colvarNewPhenomenonID.IsForeignKey = false;
                colvarNewPhenomenonID.IsReadOnly = false;
                
                schema.Columns.Add(colvarNewPhenomenonID);
                
                TableSchema.TableColumn colvarPhenomenonName = new TableSchema.TableColumn(schema);
                colvarPhenomenonName.ColumnName = "PhenomenonName";
                colvarPhenomenonName.DataType = DbType.AnsiString;
                colvarPhenomenonName.MaxLength = 150;
                colvarPhenomenonName.AutoIncrement = false;
                colvarPhenomenonName.IsNullable = false;
                colvarPhenomenonName.IsPrimaryKey = false;
                colvarPhenomenonName.IsForeignKey = false;
                colvarPhenomenonName.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhenomenonName);
                
                TableSchema.TableColumn colvarTransformationName = new TableSchema.TableColumn(schema);
                colvarTransformationName.ColumnName = "TransformationName";
                colvarTransformationName.DataType = DbType.AnsiString;
                colvarTransformationName.MaxLength = 150;
                colvarTransformationName.AutoIncrement = false;
                colvarTransformationName.IsNullable = false;
                colvarTransformationName.IsPrimaryKey = false;
                colvarTransformationName.IsForeignKey = false;
                colvarTransformationName.IsReadOnly = false;
                
                schema.Columns.Add(colvarTransformationName);
                
                TableSchema.TableColumn colvarOfferingName = new TableSchema.TableColumn(schema);
                colvarOfferingName.ColumnName = "OfferingName";
                colvarOfferingName.DataType = DbType.AnsiString;
                colvarOfferingName.MaxLength = 150;
                colvarOfferingName.AutoIncrement = false;
                colvarOfferingName.IsNullable = true;
                colvarOfferingName.IsPrimaryKey = false;
                colvarOfferingName.IsForeignKey = false;
                colvarOfferingName.IsReadOnly = false;
                
                schema.Columns.Add(colvarOfferingName);
                
                TableSchema.TableColumn colvarUnitOfMeasureUnit = new TableSchema.TableColumn(schema);
                colvarUnitOfMeasureUnit.ColumnName = "UnitOfMeasureUnit";
                colvarUnitOfMeasureUnit.DataType = DbType.AnsiString;
                colvarUnitOfMeasureUnit.MaxLength = 100;
                colvarUnitOfMeasureUnit.AutoIncrement = false;
                colvarUnitOfMeasureUnit.IsNullable = true;
                colvarUnitOfMeasureUnit.IsPrimaryKey = false;
                colvarUnitOfMeasureUnit.IsForeignKey = false;
                colvarUnitOfMeasureUnit.IsReadOnly = false;
                
                schema.Columns.Add(colvarUnitOfMeasureUnit);
                
                TableSchema.TableColumn colvarNewPhenomenonName = new TableSchema.TableColumn(schema);
                colvarNewPhenomenonName.ColumnName = "NewPhenomenonName";
                colvarNewPhenomenonName.DataType = DbType.AnsiString;
                colvarNewPhenomenonName.MaxLength = 150;
                colvarNewPhenomenonName.AutoIncrement = false;
                colvarNewPhenomenonName.IsNullable = true;
                colvarNewPhenomenonName.IsPrimaryKey = false;
                colvarNewPhenomenonName.IsForeignKey = false;
                colvarNewPhenomenonName.IsReadOnly = false;
                
                schema.Columns.Add(colvarNewPhenomenonName);
                
                TableSchema.TableColumn colvarNewOfferingName = new TableSchema.TableColumn(schema);
                colvarNewOfferingName.ColumnName = "NewOfferingName";
                colvarNewOfferingName.DataType = DbType.AnsiString;
                colvarNewOfferingName.MaxLength = 150;
                colvarNewOfferingName.AutoIncrement = false;
                colvarNewOfferingName.IsNullable = true;
                colvarNewOfferingName.IsPrimaryKey = false;
                colvarNewOfferingName.IsForeignKey = false;
                colvarNewOfferingName.IsReadOnly = false;
                
                schema.Columns.Add(colvarNewOfferingName);
                
                TableSchema.TableColumn colvarNewUnitOfMeasureUnit = new TableSchema.TableColumn(schema);
                colvarNewUnitOfMeasureUnit.ColumnName = "NewUnitOfMeasureUnit";
                colvarNewUnitOfMeasureUnit.DataType = DbType.AnsiString;
                colvarNewUnitOfMeasureUnit.MaxLength = 100;
                colvarNewUnitOfMeasureUnit.AutoIncrement = false;
                colvarNewUnitOfMeasureUnit.IsNullable = true;
                colvarNewUnitOfMeasureUnit.IsPrimaryKey = false;
                colvarNewUnitOfMeasureUnit.IsForeignKey = false;
                colvarNewUnitOfMeasureUnit.IsReadOnly = false;
                
                schema.Columns.Add(colvarNewUnitOfMeasureUnit);
                
                TableSchema.TableColumn colvarIorder = new TableSchema.TableColumn(schema);
                colvarIorder.ColumnName = "iorder";
                colvarIorder.DataType = DbType.Int32;
                colvarIorder.MaxLength = 0;
                colvarIorder.AutoIncrement = false;
                colvarIorder.IsNullable = true;
                colvarIorder.IsPrimaryKey = false;
                colvarIorder.IsForeignKey = false;
                colvarIorder.IsReadOnly = false;
                
                schema.Columns.Add(colvarIorder);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ObservationsDB"].AddSchema("vDataSourceTransformation",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VDataSourceTransformation()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VDataSourceTransformation(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VDataSourceTransformation(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VDataSourceTransformation(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Id")]
        [Bindable(true)]
        public Guid Id 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("ID");
		    }
            set 
		    {
			    SetColumnValue("ID", value);
            }
        }
	      
        [XmlAttribute("TransformationTypeID")]
        [Bindable(true)]
        public Guid TransformationTypeID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("TransformationTypeID");
		    }
            set 
		    {
			    SetColumnValue("TransformationTypeID", value);
            }
        }
	      
        [XmlAttribute("PhenomenonID")]
        [Bindable(true)]
        public Guid PhenomenonID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("PhenomenonID");
		    }
            set 
		    {
			    SetColumnValue("PhenomenonID", value);
            }
        }
	      
        [XmlAttribute("PhenomenonOfferingID")]
        [Bindable(true)]
        public Guid? PhenomenonOfferingID 
	    {
		    get
		    {
			    return GetColumnValue<Guid?>("PhenomenonOfferingID");
		    }
            set 
		    {
			    SetColumnValue("PhenomenonOfferingID", value);
            }
        }
	      
        [XmlAttribute("PhenomenonUOMID")]
        [Bindable(true)]
        public Guid? PhenomenonUOMID 
	    {
		    get
		    {
			    return GetColumnValue<Guid?>("PhenomenonUOMID");
		    }
            set 
		    {
			    SetColumnValue("PhenomenonUOMID", value);
            }
        }
	      
        [XmlAttribute("StartDate")]
        [Bindable(true)]
        public DateTime? StartDate 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("StartDate");
		    }
            set 
		    {
			    SetColumnValue("StartDate", value);
            }
        }
	      
        [XmlAttribute("EndDate")]
        [Bindable(true)]
        public DateTime? EndDate 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("EndDate");
		    }
            set 
		    {
			    SetColumnValue("EndDate", value);
            }
        }
	      
        [XmlAttribute("DataSourceID")]
        [Bindable(true)]
        public Guid DataSourceID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("DataSourceID");
		    }
            set 
		    {
			    SetColumnValue("DataSourceID", value);
            }
        }
	      
        [XmlAttribute("Definition")]
        [Bindable(true)]
        public string Definition 
	    {
		    get
		    {
			    return GetColumnValue<string>("Definition");
		    }
            set 
		    {
			    SetColumnValue("Definition", value);
            }
        }
	      
        [XmlAttribute("NewPhenomenonOfferingID")]
        [Bindable(true)]
        public Guid? NewPhenomenonOfferingID 
	    {
		    get
		    {
			    return GetColumnValue<Guid?>("NewPhenomenonOfferingID");
		    }
            set 
		    {
			    SetColumnValue("NewPhenomenonOfferingID", value);
            }
        }
	      
        [XmlAttribute("NewPhenomenonUOMID")]
        [Bindable(true)]
        public Guid? NewPhenomenonUOMID 
	    {
		    get
		    {
			    return GetColumnValue<Guid?>("NewPhenomenonUOMID");
		    }
            set 
		    {
			    SetColumnValue("NewPhenomenonUOMID", value);
            }
        }
	      
        [XmlAttribute("Rank")]
        [Bindable(true)]
        public int? Rank 
	    {
		    get
		    {
			    return GetColumnValue<int?>("Rank");
		    }
            set 
		    {
			    SetColumnValue("Rank", value);
            }
        }
	      
        [XmlAttribute("SensorID")]
        [Bindable(true)]
        public Guid? SensorID 
	    {
		    get
		    {
			    return GetColumnValue<Guid?>("SensorID");
		    }
            set 
		    {
			    SetColumnValue("SensorID", value);
            }
        }
	      
        [XmlAttribute("UserId")]
        [Bindable(true)]
        public Guid? UserId 
	    {
		    get
		    {
			    return GetColumnValue<Guid?>("UserId");
		    }
            set 
		    {
			    SetColumnValue("UserId", value);
            }
        }
	      
        [XmlAttribute("AddedAt")]
        [Bindable(true)]
        public DateTime? AddedAt 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("AddedAt");
		    }
            set 
		    {
			    SetColumnValue("AddedAt", value);
            }
        }
	      
        [XmlAttribute("UpdatedAt")]
        [Bindable(true)]
        public DateTime? UpdatedAt 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("UpdatedAt");
		    }
            set 
		    {
			    SetColumnValue("UpdatedAt", value);
            }
        }
	      
        [XmlAttribute("RowVersion")]
        [Bindable(true)]
        public byte[] RowVersion 
	    {
		    get
		    {
			    return GetColumnValue<byte[]>("RowVersion");
		    }
            set 
		    {
			    SetColumnValue("RowVersion", value);
            }
        }
	      
        [XmlAttribute("ParamA")]
        [Bindable(true)]
        public double? ParamA 
	    {
		    get
		    {
			    return GetColumnValue<double?>("ParamA");
		    }
            set 
		    {
			    SetColumnValue("ParamA", value);
            }
        }
	      
        [XmlAttribute("ParamB")]
        [Bindable(true)]
        public double? ParamB 
	    {
		    get
		    {
			    return GetColumnValue<double?>("ParamB");
		    }
            set 
		    {
			    SetColumnValue("ParamB", value);
            }
        }
	      
        [XmlAttribute("ParamC")]
        [Bindable(true)]
        public double? ParamC 
	    {
		    get
		    {
			    return GetColumnValue<double?>("ParamC");
		    }
            set 
		    {
			    SetColumnValue("ParamC", value);
            }
        }
	      
        [XmlAttribute("ParamD")]
        [Bindable(true)]
        public double? ParamD 
	    {
		    get
		    {
			    return GetColumnValue<double?>("ParamD");
		    }
            set 
		    {
			    SetColumnValue("ParamD", value);
            }
        }
	      
        [XmlAttribute("ParamE")]
        [Bindable(true)]
        public double? ParamE 
	    {
		    get
		    {
			    return GetColumnValue<double?>("ParamE");
		    }
            set 
		    {
			    SetColumnValue("ParamE", value);
            }
        }
	      
        [XmlAttribute("ParamF")]
        [Bindable(true)]
        public double? ParamF 
	    {
		    get
		    {
			    return GetColumnValue<double?>("ParamF");
		    }
            set 
		    {
			    SetColumnValue("ParamF", value);
            }
        }
	      
        [XmlAttribute("ParamG")]
        [Bindable(true)]
        public double? ParamG 
	    {
		    get
		    {
			    return GetColumnValue<double?>("ParamG");
		    }
            set 
		    {
			    SetColumnValue("ParamG", value);
            }
        }
	      
        [XmlAttribute("ParamH")]
        [Bindable(true)]
        public double? ParamH 
	    {
		    get
		    {
			    return GetColumnValue<double?>("ParamH");
		    }
            set 
		    {
			    SetColumnValue("ParamH", value);
            }
        }
	      
        [XmlAttribute("ParamI")]
        [Bindable(true)]
        public double? ParamI 
	    {
		    get
		    {
			    return GetColumnValue<double?>("ParamI");
		    }
            set 
		    {
			    SetColumnValue("ParamI", value);
            }
        }
	      
        [XmlAttribute("ParamJ")]
        [Bindable(true)]
        public double? ParamJ 
	    {
		    get
		    {
			    return GetColumnValue<double?>("ParamJ");
		    }
            set 
		    {
			    SetColumnValue("ParamJ", value);
            }
        }
	      
        [XmlAttribute("ParamK")]
        [Bindable(true)]
        public double? ParamK 
	    {
		    get
		    {
			    return GetColumnValue<double?>("ParamK");
		    }
            set 
		    {
			    SetColumnValue("ParamK", value);
            }
        }
	      
        [XmlAttribute("ParamL")]
        [Bindable(true)]
        public double? ParamL 
	    {
		    get
		    {
			    return GetColumnValue<double?>("ParamL");
		    }
            set 
		    {
			    SetColumnValue("ParamL", value);
            }
        }
	      
        [XmlAttribute("ParamM")]
        [Bindable(true)]
        public double? ParamM 
	    {
		    get
		    {
			    return GetColumnValue<double?>("ParamM");
		    }
            set 
		    {
			    SetColumnValue("ParamM", value);
            }
        }
	      
        [XmlAttribute("ParamN")]
        [Bindable(true)]
        public double? ParamN 
	    {
		    get
		    {
			    return GetColumnValue<double?>("ParamN");
		    }
            set 
		    {
			    SetColumnValue("ParamN", value);
            }
        }
	      
        [XmlAttribute("ParamO")]
        [Bindable(true)]
        public double? ParamO 
	    {
		    get
		    {
			    return GetColumnValue<double?>("ParamO");
		    }
            set 
		    {
			    SetColumnValue("ParamO", value);
            }
        }
	      
        [XmlAttribute("ParamP")]
        [Bindable(true)]
        public double? ParamP 
	    {
		    get
		    {
			    return GetColumnValue<double?>("ParamP");
		    }
            set 
		    {
			    SetColumnValue("ParamP", value);
            }
        }
	      
        [XmlAttribute("ParamQ")]
        [Bindable(true)]
        public double? ParamQ 
	    {
		    get
		    {
			    return GetColumnValue<double?>("ParamQ");
		    }
            set 
		    {
			    SetColumnValue("ParamQ", value);
            }
        }
	      
        [XmlAttribute("ParamR")]
        [Bindable(true)]
        public double? ParamR 
	    {
		    get
		    {
			    return GetColumnValue<double?>("ParamR");
		    }
            set 
		    {
			    SetColumnValue("ParamR", value);
            }
        }
	      
        [XmlAttribute("ParamSX")]
        [Bindable(true)]
        public double? ParamSX 
	    {
		    get
		    {
			    return GetColumnValue<double?>("ParamS");
		    }
            set 
		    {
			    SetColumnValue("ParamS", value);
            }
        }
	      
        [XmlAttribute("ParamT")]
        [Bindable(true)]
        public double? ParamT 
	    {
		    get
		    {
			    return GetColumnValue<double?>("ParamT");
		    }
            set 
		    {
			    SetColumnValue("ParamT", value);
            }
        }
	      
        [XmlAttribute("ParamU")]
        [Bindable(true)]
        public double? ParamU 
	    {
		    get
		    {
			    return GetColumnValue<double?>("ParamU");
		    }
            set 
		    {
			    SetColumnValue("ParamU", value);
            }
        }
	      
        [XmlAttribute("ParamV")]
        [Bindable(true)]
        public double? ParamV 
	    {
		    get
		    {
			    return GetColumnValue<double?>("ParamV");
		    }
            set 
		    {
			    SetColumnValue("ParamV", value);
            }
        }
	      
        [XmlAttribute("ParamW")]
        [Bindable(true)]
        public double? ParamW 
	    {
		    get
		    {
			    return GetColumnValue<double?>("ParamW");
		    }
            set 
		    {
			    SetColumnValue("ParamW", value);
            }
        }
	      
        [XmlAttribute("ParamX")]
        [Bindable(true)]
        public double? ParamX 
	    {
		    get
		    {
			    return GetColumnValue<double?>("ParamX");
		    }
            set 
		    {
			    SetColumnValue("ParamX", value);
            }
        }
	      
        [XmlAttribute("ParamY")]
        [Bindable(true)]
        public double? ParamY 
	    {
		    get
		    {
			    return GetColumnValue<double?>("ParamY");
		    }
            set 
		    {
			    SetColumnValue("ParamY", value);
            }
        }
	      
        [XmlAttribute("NewPhenomenonID")]
        [Bindable(true)]
        public Guid? NewPhenomenonID 
	    {
		    get
		    {
			    return GetColumnValue<Guid?>("NewPhenomenonID");
		    }
            set 
		    {
			    SetColumnValue("NewPhenomenonID", value);
            }
        }
	      
        [XmlAttribute("PhenomenonName")]
        [Bindable(true)]
        public string PhenomenonName 
	    {
		    get
		    {
			    return GetColumnValue<string>("PhenomenonName");
		    }
            set 
		    {
			    SetColumnValue("PhenomenonName", value);
            }
        }
	      
        [XmlAttribute("TransformationName")]
        [Bindable(true)]
        public string TransformationName 
	    {
		    get
		    {
			    return GetColumnValue<string>("TransformationName");
		    }
            set 
		    {
			    SetColumnValue("TransformationName", value);
            }
        }
	      
        [XmlAttribute("OfferingName")]
        [Bindable(true)]
        public string OfferingName 
	    {
		    get
		    {
			    return GetColumnValue<string>("OfferingName");
		    }
            set 
		    {
			    SetColumnValue("OfferingName", value);
            }
        }
	      
        [XmlAttribute("UnitOfMeasureUnit")]
        [Bindable(true)]
        public string UnitOfMeasureUnit 
	    {
		    get
		    {
			    return GetColumnValue<string>("UnitOfMeasureUnit");
		    }
            set 
		    {
			    SetColumnValue("UnitOfMeasureUnit", value);
            }
        }
	      
        [XmlAttribute("NewPhenomenonName")]
        [Bindable(true)]
        public string NewPhenomenonName 
	    {
		    get
		    {
			    return GetColumnValue<string>("NewPhenomenonName");
		    }
            set 
		    {
			    SetColumnValue("NewPhenomenonName", value);
            }
        }
	      
        [XmlAttribute("NewOfferingName")]
        [Bindable(true)]
        public string NewOfferingName 
	    {
		    get
		    {
			    return GetColumnValue<string>("NewOfferingName");
		    }
            set 
		    {
			    SetColumnValue("NewOfferingName", value);
            }
        }
	      
        [XmlAttribute("NewUnitOfMeasureUnit")]
        [Bindable(true)]
        public string NewUnitOfMeasureUnit 
	    {
		    get
		    {
			    return GetColumnValue<string>("NewUnitOfMeasureUnit");
		    }
            set 
		    {
			    SetColumnValue("NewUnitOfMeasureUnit", value);
            }
        }
	      
        [XmlAttribute("Iorder")]
        [Bindable(true)]
        public int? Iorder 
	    {
		    get
		    {
			    return GetColumnValue<int?>("iorder");
		    }
            set 
		    {
			    SetColumnValue("iorder", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Id = @"ID";
            
            public static string TransformationTypeID = @"TransformationTypeID";
            
            public static string PhenomenonID = @"PhenomenonID";
            
            public static string PhenomenonOfferingID = @"PhenomenonOfferingID";
            
            public static string PhenomenonUOMID = @"PhenomenonUOMID";
            
            public static string StartDate = @"StartDate";
            
            public static string EndDate = @"EndDate";
            
            public static string DataSourceID = @"DataSourceID";
            
            public static string Definition = @"Definition";
            
            public static string NewPhenomenonOfferingID = @"NewPhenomenonOfferingID";
            
            public static string NewPhenomenonUOMID = @"NewPhenomenonUOMID";
            
            public static string Rank = @"Rank";
            
            public static string SensorID = @"SensorID";
            
            public static string UserId = @"UserId";
            
            public static string AddedAt = @"AddedAt";
            
            public static string UpdatedAt = @"UpdatedAt";
            
            public static string RowVersion = @"RowVersion";
            
            public static string ParamA = @"ParamA";
            
            public static string ParamB = @"ParamB";
            
            public static string ParamC = @"ParamC";
            
            public static string ParamD = @"ParamD";
            
            public static string ParamE = @"ParamE";
            
            public static string ParamF = @"ParamF";
            
            public static string ParamG = @"ParamG";
            
            public static string ParamH = @"ParamH";
            
            public static string ParamI = @"ParamI";
            
            public static string ParamJ = @"ParamJ";
            
            public static string ParamK = @"ParamK";
            
            public static string ParamL = @"ParamL";
            
            public static string ParamM = @"ParamM";
            
            public static string ParamN = @"ParamN";
            
            public static string ParamO = @"ParamO";
            
            public static string ParamP = @"ParamP";
            
            public static string ParamQ = @"ParamQ";
            
            public static string ParamR = @"ParamR";
            
            public static string ParamSX = @"ParamS";
            
            public static string ParamT = @"ParamT";
            
            public static string ParamU = @"ParamU";
            
            public static string ParamV = @"ParamV";
            
            public static string ParamW = @"ParamW";
            
            public static string ParamX = @"ParamX";
            
            public static string ParamY = @"ParamY";
            
            public static string NewPhenomenonID = @"NewPhenomenonID";
            
            public static string PhenomenonName = @"PhenomenonName";
            
            public static string TransformationName = @"TransformationName";
            
            public static string OfferingName = @"OfferingName";
            
            public static string UnitOfMeasureUnit = @"UnitOfMeasureUnit";
            
            public static string NewPhenomenonName = @"NewPhenomenonName";
            
            public static string NewOfferingName = @"NewOfferingName";
            
            public static string NewUnitOfMeasureUnit = @"NewUnitOfMeasureUnit";
            
            public static string Iorder = @"iorder";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
