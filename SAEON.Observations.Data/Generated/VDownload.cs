using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SAEON.Observations.Data{
    /// <summary>
    /// Strongly-typed collection for the VDownload class.
    /// </summary>
    [Serializable]
    public partial class VDownloadCollection : ReadOnlyList<VDownload, VDownloadCollection>
    {        
        public VDownloadCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the vDownloads view.
    /// </summary>
    [Serializable]
    public partial class VDownload : ReadOnlyRecord<VDownload>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("vDownloads", TableType.View, DataService.GetInstance("ObservationsDB"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarSiteCode = new TableSchema.TableColumn(schema);
                colvarSiteCode.ColumnName = "SiteCode";
                colvarSiteCode.DataType = DbType.AnsiString;
                colvarSiteCode.MaxLength = 50;
                colvarSiteCode.AutoIncrement = false;
                colvarSiteCode.IsNullable = false;
                colvarSiteCode.IsPrimaryKey = false;
                colvarSiteCode.IsForeignKey = false;
                colvarSiteCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarSiteCode);
                
                TableSchema.TableColumn colvarSiteName = new TableSchema.TableColumn(schema);
                colvarSiteName.ColumnName = "SiteName";
                colvarSiteName.DataType = DbType.AnsiString;
                colvarSiteName.MaxLength = 150;
                colvarSiteName.AutoIncrement = false;
                colvarSiteName.IsNullable = false;
                colvarSiteName.IsPrimaryKey = false;
                colvarSiteName.IsForeignKey = false;
                colvarSiteName.IsReadOnly = false;
                
                schema.Columns.Add(colvarSiteName);
                
                TableSchema.TableColumn colvarSiteDescription = new TableSchema.TableColumn(schema);
                colvarSiteDescription.ColumnName = "SiteDescription";
                colvarSiteDescription.DataType = DbType.AnsiString;
                colvarSiteDescription.MaxLength = 5000;
                colvarSiteDescription.AutoIncrement = false;
                colvarSiteDescription.IsNullable = true;
                colvarSiteDescription.IsPrimaryKey = false;
                colvarSiteDescription.IsForeignKey = false;
                colvarSiteDescription.IsReadOnly = false;
                
                schema.Columns.Add(colvarSiteDescription);
                
                TableSchema.TableColumn colvarSiteUrl = new TableSchema.TableColumn(schema);
                colvarSiteUrl.ColumnName = "SiteUrl";
                colvarSiteUrl.DataType = DbType.AnsiString;
                colvarSiteUrl.MaxLength = 250;
                colvarSiteUrl.AutoIncrement = false;
                colvarSiteUrl.IsNullable = true;
                colvarSiteUrl.IsPrimaryKey = false;
                colvarSiteUrl.IsForeignKey = false;
                colvarSiteUrl.IsReadOnly = false;
                
                schema.Columns.Add(colvarSiteUrl);
                
                TableSchema.TableColumn colvarStationCode = new TableSchema.TableColumn(schema);
                colvarStationCode.ColumnName = "StationCode";
                colvarStationCode.DataType = DbType.AnsiString;
                colvarStationCode.MaxLength = 50;
                colvarStationCode.AutoIncrement = false;
                colvarStationCode.IsNullable = false;
                colvarStationCode.IsPrimaryKey = false;
                colvarStationCode.IsForeignKey = false;
                colvarStationCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarStationCode);
                
                TableSchema.TableColumn colvarStationName = new TableSchema.TableColumn(schema);
                colvarStationName.ColumnName = "StationName";
                colvarStationName.DataType = DbType.AnsiString;
                colvarStationName.MaxLength = 150;
                colvarStationName.AutoIncrement = false;
                colvarStationName.IsNullable = false;
                colvarStationName.IsPrimaryKey = false;
                colvarStationName.IsForeignKey = false;
                colvarStationName.IsReadOnly = false;
                
                schema.Columns.Add(colvarStationName);
                
                TableSchema.TableColumn colvarStationDescription = new TableSchema.TableColumn(schema);
                colvarStationDescription.ColumnName = "StationDescription";
                colvarStationDescription.DataType = DbType.AnsiString;
                colvarStationDescription.MaxLength = 5000;
                colvarStationDescription.AutoIncrement = false;
                colvarStationDescription.IsNullable = true;
                colvarStationDescription.IsPrimaryKey = false;
                colvarStationDescription.IsForeignKey = false;
                colvarStationDescription.IsReadOnly = false;
                
                schema.Columns.Add(colvarStationDescription);
                
                TableSchema.TableColumn colvarStationUrl = new TableSchema.TableColumn(schema);
                colvarStationUrl.ColumnName = "StationUrl";
                colvarStationUrl.DataType = DbType.AnsiString;
                colvarStationUrl.MaxLength = 250;
                colvarStationUrl.AutoIncrement = false;
                colvarStationUrl.IsNullable = true;
                colvarStationUrl.IsPrimaryKey = false;
                colvarStationUrl.IsForeignKey = false;
                colvarStationUrl.IsReadOnly = false;
                
                schema.Columns.Add(colvarStationUrl);
                
                TableSchema.TableColumn colvarStationLatitude = new TableSchema.TableColumn(schema);
                colvarStationLatitude.ColumnName = "StationLatitude";
                colvarStationLatitude.DataType = DbType.Double;
                colvarStationLatitude.MaxLength = 0;
                colvarStationLatitude.AutoIncrement = false;
                colvarStationLatitude.IsNullable = true;
                colvarStationLatitude.IsPrimaryKey = false;
                colvarStationLatitude.IsForeignKey = false;
                colvarStationLatitude.IsReadOnly = false;
                
                schema.Columns.Add(colvarStationLatitude);
                
                TableSchema.TableColumn colvarStationLongitude = new TableSchema.TableColumn(schema);
                colvarStationLongitude.ColumnName = "StationLongitude";
                colvarStationLongitude.DataType = DbType.Double;
                colvarStationLongitude.MaxLength = 0;
                colvarStationLongitude.AutoIncrement = false;
                colvarStationLongitude.IsNullable = true;
                colvarStationLongitude.IsPrimaryKey = false;
                colvarStationLongitude.IsForeignKey = false;
                colvarStationLongitude.IsReadOnly = false;
                
                schema.Columns.Add(colvarStationLongitude);
                
                TableSchema.TableColumn colvarStationElevation = new TableSchema.TableColumn(schema);
                colvarStationElevation.ColumnName = "StationElevation";
                colvarStationElevation.DataType = DbType.Int32;
                colvarStationElevation.MaxLength = 0;
                colvarStationElevation.AutoIncrement = false;
                colvarStationElevation.IsNullable = true;
                colvarStationElevation.IsPrimaryKey = false;
                colvarStationElevation.IsForeignKey = false;
                colvarStationElevation.IsReadOnly = false;
                
                schema.Columns.Add(colvarStationElevation);
                
                TableSchema.TableColumn colvarInstrumentCode = new TableSchema.TableColumn(schema);
                colvarInstrumentCode.ColumnName = "InstrumentCode";
                colvarInstrumentCode.DataType = DbType.AnsiString;
                colvarInstrumentCode.MaxLength = 50;
                colvarInstrumentCode.AutoIncrement = false;
                colvarInstrumentCode.IsNullable = false;
                colvarInstrumentCode.IsPrimaryKey = false;
                colvarInstrumentCode.IsForeignKey = false;
                colvarInstrumentCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarInstrumentCode);
                
                TableSchema.TableColumn colvarInstrumentName = new TableSchema.TableColumn(schema);
                colvarInstrumentName.ColumnName = "InstrumentName";
                colvarInstrumentName.DataType = DbType.AnsiString;
                colvarInstrumentName.MaxLength = 150;
                colvarInstrumentName.AutoIncrement = false;
                colvarInstrumentName.IsNullable = false;
                colvarInstrumentName.IsPrimaryKey = false;
                colvarInstrumentName.IsForeignKey = false;
                colvarInstrumentName.IsReadOnly = false;
                
                schema.Columns.Add(colvarInstrumentName);
                
                TableSchema.TableColumn colvarInstrumentDescription = new TableSchema.TableColumn(schema);
                colvarInstrumentDescription.ColumnName = "InstrumentDescription";
                colvarInstrumentDescription.DataType = DbType.AnsiString;
                colvarInstrumentDescription.MaxLength = 5000;
                colvarInstrumentDescription.AutoIncrement = false;
                colvarInstrumentDescription.IsNullable = true;
                colvarInstrumentDescription.IsPrimaryKey = false;
                colvarInstrumentDescription.IsForeignKey = false;
                colvarInstrumentDescription.IsReadOnly = false;
                
                schema.Columns.Add(colvarInstrumentDescription);
                
                TableSchema.TableColumn colvarInstrumentUrl = new TableSchema.TableColumn(schema);
                colvarInstrumentUrl.ColumnName = "InstrumentUrl";
                colvarInstrumentUrl.DataType = DbType.AnsiString;
                colvarInstrumentUrl.MaxLength = 250;
                colvarInstrumentUrl.AutoIncrement = false;
                colvarInstrumentUrl.IsNullable = true;
                colvarInstrumentUrl.IsPrimaryKey = false;
                colvarInstrumentUrl.IsForeignKey = false;
                colvarInstrumentUrl.IsReadOnly = false;
                
                schema.Columns.Add(colvarInstrumentUrl);
                
                TableSchema.TableColumn colvarSensorCode = new TableSchema.TableColumn(schema);
                colvarSensorCode.ColumnName = "SensorCode";
                colvarSensorCode.DataType = DbType.AnsiString;
                colvarSensorCode.MaxLength = 50;
                colvarSensorCode.AutoIncrement = false;
                colvarSensorCode.IsNullable = false;
                colvarSensorCode.IsPrimaryKey = false;
                colvarSensorCode.IsForeignKey = false;
                colvarSensorCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarSensorCode);
                
                TableSchema.TableColumn colvarSensorName = new TableSchema.TableColumn(schema);
                colvarSensorName.ColumnName = "SensorName";
                colvarSensorName.DataType = DbType.AnsiString;
                colvarSensorName.MaxLength = 150;
                colvarSensorName.AutoIncrement = false;
                colvarSensorName.IsNullable = false;
                colvarSensorName.IsPrimaryKey = false;
                colvarSensorName.IsForeignKey = false;
                colvarSensorName.IsReadOnly = false;
                
                schema.Columns.Add(colvarSensorName);
                
                TableSchema.TableColumn colvarSensorDescription = new TableSchema.TableColumn(schema);
                colvarSensorDescription.ColumnName = "SensorDescription";
                colvarSensorDescription.DataType = DbType.AnsiString;
                colvarSensorDescription.MaxLength = 5000;
                colvarSensorDescription.AutoIncrement = false;
                colvarSensorDescription.IsNullable = true;
                colvarSensorDescription.IsPrimaryKey = false;
                colvarSensorDescription.IsForeignKey = false;
                colvarSensorDescription.IsReadOnly = false;
                
                schema.Columns.Add(colvarSensorDescription);
                
                TableSchema.TableColumn colvarSensorUrl = new TableSchema.TableColumn(schema);
                colvarSensorUrl.ColumnName = "SensorUrl";
                colvarSensorUrl.DataType = DbType.AnsiString;
                colvarSensorUrl.MaxLength = 250;
                colvarSensorUrl.AutoIncrement = false;
                colvarSensorUrl.IsNullable = true;
                colvarSensorUrl.IsPrimaryKey = false;
                colvarSensorUrl.IsForeignKey = false;
                colvarSensorUrl.IsReadOnly = false;
                
                schema.Columns.Add(colvarSensorUrl);
                
                TableSchema.TableColumn colvarPhenomenonCode = new TableSchema.TableColumn(schema);
                colvarPhenomenonCode.ColumnName = "PhenomenonCode";
                colvarPhenomenonCode.DataType = DbType.AnsiString;
                colvarPhenomenonCode.MaxLength = 50;
                colvarPhenomenonCode.AutoIncrement = false;
                colvarPhenomenonCode.IsNullable = false;
                colvarPhenomenonCode.IsPrimaryKey = false;
                colvarPhenomenonCode.IsForeignKey = false;
                colvarPhenomenonCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhenomenonCode);
                
                TableSchema.TableColumn colvarPhenomenonName = new TableSchema.TableColumn(schema);
                colvarPhenomenonName.ColumnName = "PhenomenonName";
                colvarPhenomenonName.DataType = DbType.AnsiString;
                colvarPhenomenonName.MaxLength = 150;
                colvarPhenomenonName.AutoIncrement = false;
                colvarPhenomenonName.IsNullable = false;
                colvarPhenomenonName.IsPrimaryKey = false;
                colvarPhenomenonName.IsForeignKey = false;
                colvarPhenomenonName.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhenomenonName);
                
                TableSchema.TableColumn colvarPhenomenonDescription = new TableSchema.TableColumn(schema);
                colvarPhenomenonDescription.ColumnName = "PhenomenonDescription";
                colvarPhenomenonDescription.DataType = DbType.AnsiString;
                colvarPhenomenonDescription.MaxLength = 5000;
                colvarPhenomenonDescription.AutoIncrement = false;
                colvarPhenomenonDescription.IsNullable = true;
                colvarPhenomenonDescription.IsPrimaryKey = false;
                colvarPhenomenonDescription.IsForeignKey = false;
                colvarPhenomenonDescription.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhenomenonDescription);
                
                TableSchema.TableColumn colvarPhenomenonUrl = new TableSchema.TableColumn(schema);
                colvarPhenomenonUrl.ColumnName = "PhenomenonUrl";
                colvarPhenomenonUrl.DataType = DbType.AnsiString;
                colvarPhenomenonUrl.MaxLength = 250;
                colvarPhenomenonUrl.AutoIncrement = false;
                colvarPhenomenonUrl.IsNullable = true;
                colvarPhenomenonUrl.IsPrimaryKey = false;
                colvarPhenomenonUrl.IsForeignKey = false;
                colvarPhenomenonUrl.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhenomenonUrl);
                
                TableSchema.TableColumn colvarOfferingCode = new TableSchema.TableColumn(schema);
                colvarOfferingCode.ColumnName = "OfferingCode";
                colvarOfferingCode.DataType = DbType.AnsiString;
                colvarOfferingCode.MaxLength = 50;
                colvarOfferingCode.AutoIncrement = false;
                colvarOfferingCode.IsNullable = false;
                colvarOfferingCode.IsPrimaryKey = false;
                colvarOfferingCode.IsForeignKey = false;
                colvarOfferingCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarOfferingCode);
                
                TableSchema.TableColumn colvarOfferingName = new TableSchema.TableColumn(schema);
                colvarOfferingName.ColumnName = "OfferingName";
                colvarOfferingName.DataType = DbType.AnsiString;
                colvarOfferingName.MaxLength = 150;
                colvarOfferingName.AutoIncrement = false;
                colvarOfferingName.IsNullable = false;
                colvarOfferingName.IsPrimaryKey = false;
                colvarOfferingName.IsForeignKey = false;
                colvarOfferingName.IsReadOnly = false;
                
                schema.Columns.Add(colvarOfferingName);
                
                TableSchema.TableColumn colvarOfferingDescription = new TableSchema.TableColumn(schema);
                colvarOfferingDescription.ColumnName = "OfferingDescription";
                colvarOfferingDescription.DataType = DbType.AnsiString;
                colvarOfferingDescription.MaxLength = 5000;
                colvarOfferingDescription.AutoIncrement = false;
                colvarOfferingDescription.IsNullable = true;
                colvarOfferingDescription.IsPrimaryKey = false;
                colvarOfferingDescription.IsForeignKey = false;
                colvarOfferingDescription.IsReadOnly = false;
                
                schema.Columns.Add(colvarOfferingDescription);
                
                TableSchema.TableColumn colvarUnitOfMeasureCode = new TableSchema.TableColumn(schema);
                colvarUnitOfMeasureCode.ColumnName = "UnitOfMeasureCode";
                colvarUnitOfMeasureCode.DataType = DbType.AnsiString;
                colvarUnitOfMeasureCode.MaxLength = 50;
                colvarUnitOfMeasureCode.AutoIncrement = false;
                colvarUnitOfMeasureCode.IsNullable = false;
                colvarUnitOfMeasureCode.IsPrimaryKey = false;
                colvarUnitOfMeasureCode.IsForeignKey = false;
                colvarUnitOfMeasureCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarUnitOfMeasureCode);
                
                TableSchema.TableColumn colvarUnitOfMeasureUnit = new TableSchema.TableColumn(schema);
                colvarUnitOfMeasureUnit.ColumnName = "UnitOfMeasureUnit";
                colvarUnitOfMeasureUnit.DataType = DbType.AnsiString;
                colvarUnitOfMeasureUnit.MaxLength = 100;
                colvarUnitOfMeasureUnit.AutoIncrement = false;
                colvarUnitOfMeasureUnit.IsNullable = false;
                colvarUnitOfMeasureUnit.IsPrimaryKey = false;
                colvarUnitOfMeasureUnit.IsForeignKey = false;
                colvarUnitOfMeasureUnit.IsReadOnly = false;
                
                schema.Columns.Add(colvarUnitOfMeasureUnit);
                
                TableSchema.TableColumn colvarUnitOfMeasureSymbol = new TableSchema.TableColumn(schema);
                colvarUnitOfMeasureSymbol.ColumnName = "UnitOfMeasureSymbol";
                colvarUnitOfMeasureSymbol.DataType = DbType.AnsiString;
                colvarUnitOfMeasureSymbol.MaxLength = 20;
                colvarUnitOfMeasureSymbol.AutoIncrement = false;
                colvarUnitOfMeasureSymbol.IsNullable = false;
                colvarUnitOfMeasureSymbol.IsPrimaryKey = false;
                colvarUnitOfMeasureSymbol.IsForeignKey = false;
                colvarUnitOfMeasureSymbol.IsReadOnly = false;
                
                schema.Columns.Add(colvarUnitOfMeasureSymbol);
                
                TableSchema.TableColumn colvarValueDate = new TableSchema.TableColumn(schema);
                colvarValueDate.ColumnName = "ValueDate";
                colvarValueDate.DataType = DbType.DateTime;
                colvarValueDate.MaxLength = 0;
                colvarValueDate.AutoIncrement = false;
                colvarValueDate.IsNullable = false;
                colvarValueDate.IsPrimaryKey = false;
                colvarValueDate.IsForeignKey = false;
                colvarValueDate.IsReadOnly = false;
                
                schema.Columns.Add(colvarValueDate);
                
                TableSchema.TableColumn colvarRawValue = new TableSchema.TableColumn(schema);
                colvarRawValue.ColumnName = "RawValue";
                colvarRawValue.DataType = DbType.Double;
                colvarRawValue.MaxLength = 0;
                colvarRawValue.AutoIncrement = false;
                colvarRawValue.IsNullable = true;
                colvarRawValue.IsPrimaryKey = false;
                colvarRawValue.IsForeignKey = false;
                colvarRawValue.IsReadOnly = false;
                
                schema.Columns.Add(colvarRawValue);
                
                TableSchema.TableColumn colvarDataValue = new TableSchema.TableColumn(schema);
                colvarDataValue.ColumnName = "DataValue";
                colvarDataValue.DataType = DbType.Double;
                colvarDataValue.MaxLength = 0;
                colvarDataValue.AutoIncrement = false;
                colvarDataValue.IsNullable = true;
                colvarDataValue.IsPrimaryKey = false;
                colvarDataValue.IsForeignKey = false;
                colvarDataValue.IsReadOnly = false;
                
                schema.Columns.Add(colvarDataValue);
                
                TableSchema.TableColumn colvarComment = new TableSchema.TableColumn(schema);
                colvarComment.ColumnName = "Comment";
                colvarComment.DataType = DbType.AnsiString;
                colvarComment.MaxLength = 250;
                colvarComment.AutoIncrement = false;
                colvarComment.IsNullable = true;
                colvarComment.IsPrimaryKey = false;
                colvarComment.IsForeignKey = false;
                colvarComment.IsReadOnly = false;
                
                schema.Columns.Add(colvarComment);
                
                TableSchema.TableColumn colvarCorrelationID = new TableSchema.TableColumn(schema);
                colvarCorrelationID.ColumnName = "CorrelationID";
                colvarCorrelationID.DataType = DbType.Guid;
                colvarCorrelationID.MaxLength = 0;
                colvarCorrelationID.AutoIncrement = false;
                colvarCorrelationID.IsNullable = true;
                colvarCorrelationID.IsPrimaryKey = false;
                colvarCorrelationID.IsForeignKey = false;
                colvarCorrelationID.IsReadOnly = false;
                
                schema.Columns.Add(colvarCorrelationID);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ObservationsDB"].AddSchema("vDownloads",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VDownload()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VDownload(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VDownload(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VDownload(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("SiteCode")]
        [Bindable(true)]
        public string SiteCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("SiteCode");
		    }
            set 
		    {
			    SetColumnValue("SiteCode", value);
            }
        }
	      
        [XmlAttribute("SiteName")]
        [Bindable(true)]
        public string SiteName 
	    {
		    get
		    {
			    return GetColumnValue<string>("SiteName");
		    }
            set 
		    {
			    SetColumnValue("SiteName", value);
            }
        }
	      
        [XmlAttribute("SiteDescription")]
        [Bindable(true)]
        public string SiteDescription 
	    {
		    get
		    {
			    return GetColumnValue<string>("SiteDescription");
		    }
            set 
		    {
			    SetColumnValue("SiteDescription", value);
            }
        }
	      
        [XmlAttribute("SiteUrl")]
        [Bindable(true)]
        public string SiteUrl 
	    {
		    get
		    {
			    return GetColumnValue<string>("SiteUrl");
		    }
            set 
		    {
			    SetColumnValue("SiteUrl", value);
            }
        }
	      
        [XmlAttribute("StationCode")]
        [Bindable(true)]
        public string StationCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("StationCode");
		    }
            set 
		    {
			    SetColumnValue("StationCode", value);
            }
        }
	      
        [XmlAttribute("StationName")]
        [Bindable(true)]
        public string StationName 
	    {
		    get
		    {
			    return GetColumnValue<string>("StationName");
		    }
            set 
		    {
			    SetColumnValue("StationName", value);
            }
        }
	      
        [XmlAttribute("StationDescription")]
        [Bindable(true)]
        public string StationDescription 
	    {
		    get
		    {
			    return GetColumnValue<string>("StationDescription");
		    }
            set 
		    {
			    SetColumnValue("StationDescription", value);
            }
        }
	      
        [XmlAttribute("StationUrl")]
        [Bindable(true)]
        public string StationUrl 
	    {
		    get
		    {
			    return GetColumnValue<string>("StationUrl");
		    }
            set 
		    {
			    SetColumnValue("StationUrl", value);
            }
        }
	      
        [XmlAttribute("StationLatitude")]
        [Bindable(true)]
        public double? StationLatitude 
	    {
		    get
		    {
			    return GetColumnValue<double?>("StationLatitude");
		    }
            set 
		    {
			    SetColumnValue("StationLatitude", value);
            }
        }
	      
        [XmlAttribute("StationLongitude")]
        [Bindable(true)]
        public double? StationLongitude 
	    {
		    get
		    {
			    return GetColumnValue<double?>("StationLongitude");
		    }
            set 
		    {
			    SetColumnValue("StationLongitude", value);
            }
        }
	      
        [XmlAttribute("StationElevation")]
        [Bindable(true)]
        public int? StationElevation 
	    {
		    get
		    {
			    return GetColumnValue<int?>("StationElevation");
		    }
            set 
		    {
			    SetColumnValue("StationElevation", value);
            }
        }
	      
        [XmlAttribute("InstrumentCode")]
        [Bindable(true)]
        public string InstrumentCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("InstrumentCode");
		    }
            set 
		    {
			    SetColumnValue("InstrumentCode", value);
            }
        }
	      
        [XmlAttribute("InstrumentName")]
        [Bindable(true)]
        public string InstrumentName 
	    {
		    get
		    {
			    return GetColumnValue<string>("InstrumentName");
		    }
            set 
		    {
			    SetColumnValue("InstrumentName", value);
            }
        }
	      
        [XmlAttribute("InstrumentDescription")]
        [Bindable(true)]
        public string InstrumentDescription 
	    {
		    get
		    {
			    return GetColumnValue<string>("InstrumentDescription");
		    }
            set 
		    {
			    SetColumnValue("InstrumentDescription", value);
            }
        }
	      
        [XmlAttribute("InstrumentUrl")]
        [Bindable(true)]
        public string InstrumentUrl 
	    {
		    get
		    {
			    return GetColumnValue<string>("InstrumentUrl");
		    }
            set 
		    {
			    SetColumnValue("InstrumentUrl", value);
            }
        }
	      
        [XmlAttribute("SensorCode")]
        [Bindable(true)]
        public string SensorCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("SensorCode");
		    }
            set 
		    {
			    SetColumnValue("SensorCode", value);
            }
        }
	      
        [XmlAttribute("SensorName")]
        [Bindable(true)]
        public string SensorName 
	    {
		    get
		    {
			    return GetColumnValue<string>("SensorName");
		    }
            set 
		    {
			    SetColumnValue("SensorName", value);
            }
        }
	      
        [XmlAttribute("SensorDescription")]
        [Bindable(true)]
        public string SensorDescription 
	    {
		    get
		    {
			    return GetColumnValue<string>("SensorDescription");
		    }
            set 
		    {
			    SetColumnValue("SensorDescription", value);
            }
        }
	      
        [XmlAttribute("SensorUrl")]
        [Bindable(true)]
        public string SensorUrl 
	    {
		    get
		    {
			    return GetColumnValue<string>("SensorUrl");
		    }
            set 
		    {
			    SetColumnValue("SensorUrl", value);
            }
        }
	      
        [XmlAttribute("PhenomenonCode")]
        [Bindable(true)]
        public string PhenomenonCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("PhenomenonCode");
		    }
            set 
		    {
			    SetColumnValue("PhenomenonCode", value);
            }
        }
	      
        [XmlAttribute("PhenomenonName")]
        [Bindable(true)]
        public string PhenomenonName 
	    {
		    get
		    {
			    return GetColumnValue<string>("PhenomenonName");
		    }
            set 
		    {
			    SetColumnValue("PhenomenonName", value);
            }
        }
	      
        [XmlAttribute("PhenomenonDescription")]
        [Bindable(true)]
        public string PhenomenonDescription 
	    {
		    get
		    {
			    return GetColumnValue<string>("PhenomenonDescription");
		    }
            set 
		    {
			    SetColumnValue("PhenomenonDescription", value);
            }
        }
	      
        [XmlAttribute("PhenomenonUrl")]
        [Bindable(true)]
        public string PhenomenonUrl 
	    {
		    get
		    {
			    return GetColumnValue<string>("PhenomenonUrl");
		    }
            set 
		    {
			    SetColumnValue("PhenomenonUrl", value);
            }
        }
	      
        [XmlAttribute("OfferingCode")]
        [Bindable(true)]
        public string OfferingCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("OfferingCode");
		    }
            set 
		    {
			    SetColumnValue("OfferingCode", value);
            }
        }
	      
        [XmlAttribute("OfferingName")]
        [Bindable(true)]
        public string OfferingName 
	    {
		    get
		    {
			    return GetColumnValue<string>("OfferingName");
		    }
            set 
		    {
			    SetColumnValue("OfferingName", value);
            }
        }
	      
        [XmlAttribute("OfferingDescription")]
        [Bindable(true)]
        public string OfferingDescription 
	    {
		    get
		    {
			    return GetColumnValue<string>("OfferingDescription");
		    }
            set 
		    {
			    SetColumnValue("OfferingDescription", value);
            }
        }
	      
        [XmlAttribute("UnitOfMeasureCode")]
        [Bindable(true)]
        public string UnitOfMeasureCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("UnitOfMeasureCode");
		    }
            set 
		    {
			    SetColumnValue("UnitOfMeasureCode", value);
            }
        }
	      
        [XmlAttribute("UnitOfMeasureUnit")]
        [Bindable(true)]
        public string UnitOfMeasureUnit 
	    {
		    get
		    {
			    return GetColumnValue<string>("UnitOfMeasureUnit");
		    }
            set 
		    {
			    SetColumnValue("UnitOfMeasureUnit", value);
            }
        }
	      
        [XmlAttribute("UnitOfMeasureSymbol")]
        [Bindable(true)]
        public string UnitOfMeasureSymbol 
	    {
		    get
		    {
			    return GetColumnValue<string>("UnitOfMeasureSymbol");
		    }
            set 
		    {
			    SetColumnValue("UnitOfMeasureSymbol", value);
            }
        }
	      
        [XmlAttribute("ValueDate")]
        [Bindable(true)]
        public DateTime ValueDate 
	    {
		    get
		    {
			    return GetColumnValue<DateTime>("ValueDate");
		    }
            set 
		    {
			    SetColumnValue("ValueDate", value);
            }
        }
	      
        [XmlAttribute("RawValue")]
        [Bindable(true)]
        public double? RawValue 
	    {
		    get
		    {
			    return GetColumnValue<double?>("RawValue");
		    }
            set 
		    {
			    SetColumnValue("RawValue", value);
            }
        }
	      
        [XmlAttribute("DataValue")]
        [Bindable(true)]
        public double? DataValue 
	    {
		    get
		    {
			    return GetColumnValue<double?>("DataValue");
		    }
            set 
		    {
			    SetColumnValue("DataValue", value);
            }
        }
	      
        [XmlAttribute("Comment")]
        [Bindable(true)]
        public string Comment 
	    {
		    get
		    {
			    return GetColumnValue<string>("Comment");
		    }
            set 
		    {
			    SetColumnValue("Comment", value);
            }
        }
	      
        [XmlAttribute("CorrelationID")]
        [Bindable(true)]
        public Guid? CorrelationID 
	    {
		    get
		    {
			    return GetColumnValue<Guid?>("CorrelationID");
		    }
            set 
		    {
			    SetColumnValue("CorrelationID", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string SiteCode = @"SiteCode";
            
            public static string SiteName = @"SiteName";
            
            public static string SiteDescription = @"SiteDescription";
            
            public static string SiteUrl = @"SiteUrl";
            
            public static string StationCode = @"StationCode";
            
            public static string StationName = @"StationName";
            
            public static string StationDescription = @"StationDescription";
            
            public static string StationUrl = @"StationUrl";
            
            public static string StationLatitude = @"StationLatitude";
            
            public static string StationLongitude = @"StationLongitude";
            
            public static string StationElevation = @"StationElevation";
            
            public static string InstrumentCode = @"InstrumentCode";
            
            public static string InstrumentName = @"InstrumentName";
            
            public static string InstrumentDescription = @"InstrumentDescription";
            
            public static string InstrumentUrl = @"InstrumentUrl";
            
            public static string SensorCode = @"SensorCode";
            
            public static string SensorName = @"SensorName";
            
            public static string SensorDescription = @"SensorDescription";
            
            public static string SensorUrl = @"SensorUrl";
            
            public static string PhenomenonCode = @"PhenomenonCode";
            
            public static string PhenomenonName = @"PhenomenonName";
            
            public static string PhenomenonDescription = @"PhenomenonDescription";
            
            public static string PhenomenonUrl = @"PhenomenonUrl";
            
            public static string OfferingCode = @"OfferingCode";
            
            public static string OfferingName = @"OfferingName";
            
            public static string OfferingDescription = @"OfferingDescription";
            
            public static string UnitOfMeasureCode = @"UnitOfMeasureCode";
            
            public static string UnitOfMeasureUnit = @"UnitOfMeasureUnit";
            
            public static string UnitOfMeasureSymbol = @"UnitOfMeasureSymbol";
            
            public static string ValueDate = @"ValueDate";
            
            public static string RawValue = @"RawValue";
            
            public static string DataValue = @"DataValue";
            
            public static string Comment = @"Comment";
            
            public static string CorrelationID = @"CorrelationID";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
