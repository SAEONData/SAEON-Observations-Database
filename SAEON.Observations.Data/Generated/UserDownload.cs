using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SAEON.Observations.Data
{
	/// <summary>
	/// Strongly-typed collection for the UserDownload class.
	/// </summary>
    [Serializable]
	public partial class UserDownloadCollection : ActiveList<UserDownload, UserDownloadCollection>
	{	   
		public UserDownloadCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>UserDownloadCollection</returns>
		public UserDownloadCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                UserDownload o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the UserDownloads table.
	/// </summary>
	[Serializable]
	public partial class UserDownload : ActiveRecord<UserDownload>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public UserDownload()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public UserDownload(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public UserDownload(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public UserDownload(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("UserDownloads", TableType.Table, DataService.GetInstance("ObservationsDB"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Guid;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = false;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				
						colvarId.DefaultSetting = @"(newid())";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarUserId = new TableSchema.TableColumn(schema);
				colvarUserId.ColumnName = "UserId";
				colvarUserId.DataType = DbType.String;
				colvarUserId.MaxLength = 128;
				colvarUserId.AutoIncrement = false;
				colvarUserId.IsNullable = false;
				colvarUserId.IsPrimaryKey = false;
				colvarUserId.IsForeignKey = false;
				colvarUserId.IsReadOnly = false;
				colvarUserId.DefaultSetting = @"";
				colvarUserId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserId);
				
				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.AnsiString;
				colvarName.MaxLength = 150;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = false;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);
				
				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 5000;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);
				
				TableSchema.TableColumn colvarTitle = new TableSchema.TableColumn(schema);
				colvarTitle.ColumnName = "Title";
				colvarTitle.DataType = DbType.AnsiString;
				colvarTitle.MaxLength = 5000;
				colvarTitle.AutoIncrement = false;
				colvarTitle.IsNullable = false;
				colvarTitle.IsPrimaryKey = false;
				colvarTitle.IsForeignKey = false;
				colvarTitle.IsReadOnly = false;
				colvarTitle.DefaultSetting = @"";
				colvarTitle.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTitle);
				
				TableSchema.TableColumn colvarInput = new TableSchema.TableColumn(schema);
				colvarInput.ColumnName = "Input";
				colvarInput.DataType = DbType.AnsiString;
				colvarInput.MaxLength = 5000;
				colvarInput.AutoIncrement = false;
				colvarInput.IsNullable = false;
				colvarInput.IsPrimaryKey = false;
				colvarInput.IsForeignKey = false;
				colvarInput.IsReadOnly = false;
				colvarInput.DefaultSetting = @"";
				colvarInput.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInput);
				
				TableSchema.TableColumn colvarReQueryURL = new TableSchema.TableColumn(schema);
				colvarReQueryURL.ColumnName = "ReQueryURL";
				colvarReQueryURL.DataType = DbType.AnsiString;
				colvarReQueryURL.MaxLength = 5000;
				colvarReQueryURL.AutoIncrement = false;
				colvarReQueryURL.IsNullable = false;
				colvarReQueryURL.IsPrimaryKey = false;
				colvarReQueryURL.IsForeignKey = false;
				colvarReQueryURL.IsReadOnly = false;
				colvarReQueryURL.DefaultSetting = @"";
				colvarReQueryURL.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReQueryURL);
				
				TableSchema.TableColumn colvarDOIId = new TableSchema.TableColumn(schema);
				colvarDOIId.ColumnName = "DOIId";
				colvarDOIId.DataType = DbType.Int32;
				colvarDOIId.MaxLength = 0;
				colvarDOIId.AutoIncrement = true;
				colvarDOIId.IsNullable = false;
				colvarDOIId.IsPrimaryKey = false;
				colvarDOIId.IsForeignKey = false;
				colvarDOIId.IsReadOnly = false;
				colvarDOIId.DefaultSetting = @"";
				colvarDOIId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDOIId);
				
				TableSchema.TableColumn colvarDoi = new TableSchema.TableColumn(schema);
				colvarDoi.ColumnName = "DOI";
				colvarDoi.DataType = DbType.AnsiString;
				colvarDoi.MaxLength = 36;
				colvarDoi.AutoIncrement = false;
				colvarDoi.IsNullable = true;
				colvarDoi.IsPrimaryKey = false;
				colvarDoi.IsForeignKey = false;
				colvarDoi.IsReadOnly = true;
				colvarDoi.DefaultSetting = @"";
				colvarDoi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDoi);
				
				TableSchema.TableColumn colvarDOIUrl = new TableSchema.TableColumn(schema);
				colvarDOIUrl.ColumnName = "DOIUrl";
				colvarDOIUrl.DataType = DbType.AnsiString;
				colvarDOIUrl.MaxLength = 52;
				colvarDOIUrl.AutoIncrement = false;
				colvarDOIUrl.IsNullable = true;
				colvarDOIUrl.IsPrimaryKey = false;
				colvarDOIUrl.IsForeignKey = false;
				colvarDOIUrl.IsReadOnly = true;
				colvarDOIUrl.DefaultSetting = @"";
				colvarDOIUrl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDOIUrl);
				
				TableSchema.TableColumn colvarMetadataURL = new TableSchema.TableColumn(schema);
				colvarMetadataURL.ColumnName = "MetadataURL";
				colvarMetadataURL.DataType = DbType.AnsiString;
				colvarMetadataURL.MaxLength = 2000;
				colvarMetadataURL.AutoIncrement = false;
				colvarMetadataURL.IsNullable = false;
				colvarMetadataURL.IsPrimaryKey = false;
				colvarMetadataURL.IsForeignKey = false;
				colvarMetadataURL.IsReadOnly = false;
				colvarMetadataURL.DefaultSetting = @"";
				colvarMetadataURL.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMetadataURL);
				
				TableSchema.TableColumn colvarDownloadURL = new TableSchema.TableColumn(schema);
				colvarDownloadURL.ColumnName = "DownloadURL";
				colvarDownloadURL.DataType = DbType.AnsiString;
				colvarDownloadURL.MaxLength = 2000;
				colvarDownloadURL.AutoIncrement = false;
				colvarDownloadURL.IsNullable = false;
				colvarDownloadURL.IsPrimaryKey = false;
				colvarDownloadURL.IsForeignKey = false;
				colvarDownloadURL.IsReadOnly = false;
				colvarDownloadURL.DefaultSetting = @"";
				colvarDownloadURL.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDownloadURL);
				
				TableSchema.TableColumn colvarZipFullName = new TableSchema.TableColumn(schema);
				colvarZipFullName.ColumnName = "ZipFullName";
				colvarZipFullName.DataType = DbType.AnsiString;
				colvarZipFullName.MaxLength = 2000;
				colvarZipFullName.AutoIncrement = false;
				colvarZipFullName.IsNullable = false;
				colvarZipFullName.IsPrimaryKey = false;
				colvarZipFullName.IsForeignKey = false;
				colvarZipFullName.IsReadOnly = false;
				colvarZipFullName.DefaultSetting = @"";
				colvarZipFullName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZipFullName);
				
				TableSchema.TableColumn colvarZipCheckSum = new TableSchema.TableColumn(schema);
				colvarZipCheckSum.ColumnName = "ZipCheckSum";
				colvarZipCheckSum.DataType = DbType.AnsiString;
				colvarZipCheckSum.MaxLength = 64;
				colvarZipCheckSum.AutoIncrement = false;
				colvarZipCheckSum.IsNullable = false;
				colvarZipCheckSum.IsPrimaryKey = false;
				colvarZipCheckSum.IsForeignKey = false;
				colvarZipCheckSum.IsReadOnly = false;
				colvarZipCheckSum.DefaultSetting = @"";
				colvarZipCheckSum.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZipCheckSum);
				
				TableSchema.TableColumn colvarCitation = new TableSchema.TableColumn(schema);
				colvarCitation.ColumnName = "Citation";
				colvarCitation.DataType = DbType.AnsiString;
				colvarCitation.MaxLength = 5000;
				colvarCitation.AutoIncrement = false;
				colvarCitation.IsNullable = false;
				colvarCitation.IsPrimaryKey = false;
				colvarCitation.IsForeignKey = false;
				colvarCitation.IsReadOnly = false;
				colvarCitation.DefaultSetting = @"";
				colvarCitation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCitation);
				
				TableSchema.TableColumn colvarPlaces = new TableSchema.TableColumn(schema);
				colvarPlaces.ColumnName = "Places";
				colvarPlaces.DataType = DbType.AnsiString;
				colvarPlaces.MaxLength = 5000;
				colvarPlaces.AutoIncrement = false;
				colvarPlaces.IsNullable = true;
				colvarPlaces.IsPrimaryKey = false;
				colvarPlaces.IsForeignKey = false;
				colvarPlaces.IsReadOnly = false;
				colvarPlaces.DefaultSetting = @"";
				colvarPlaces.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPlaces);
				
				TableSchema.TableColumn colvarLatitudeNorth = new TableSchema.TableColumn(schema);
				colvarLatitudeNorth.ColumnName = "LatitudeNorth";
				colvarLatitudeNorth.DataType = DbType.Double;
				colvarLatitudeNorth.MaxLength = 0;
				colvarLatitudeNorth.AutoIncrement = false;
				colvarLatitudeNorth.IsNullable = true;
				colvarLatitudeNorth.IsPrimaryKey = false;
				colvarLatitudeNorth.IsForeignKey = false;
				colvarLatitudeNorth.IsReadOnly = false;
				colvarLatitudeNorth.DefaultSetting = @"";
				colvarLatitudeNorth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLatitudeNorth);
				
				TableSchema.TableColumn colvarLatitudeSouth = new TableSchema.TableColumn(schema);
				colvarLatitudeSouth.ColumnName = "LatitudeSouth";
				colvarLatitudeSouth.DataType = DbType.Double;
				colvarLatitudeSouth.MaxLength = 0;
				colvarLatitudeSouth.AutoIncrement = false;
				colvarLatitudeSouth.IsNullable = true;
				colvarLatitudeSouth.IsPrimaryKey = false;
				colvarLatitudeSouth.IsForeignKey = false;
				colvarLatitudeSouth.IsReadOnly = false;
				colvarLatitudeSouth.DefaultSetting = @"";
				colvarLatitudeSouth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLatitudeSouth);
				
				TableSchema.TableColumn colvarLongitudeWest = new TableSchema.TableColumn(schema);
				colvarLongitudeWest.ColumnName = "LongitudeWest";
				colvarLongitudeWest.DataType = DbType.Double;
				colvarLongitudeWest.MaxLength = 0;
				colvarLongitudeWest.AutoIncrement = false;
				colvarLongitudeWest.IsNullable = true;
				colvarLongitudeWest.IsPrimaryKey = false;
				colvarLongitudeWest.IsForeignKey = false;
				colvarLongitudeWest.IsReadOnly = false;
				colvarLongitudeWest.DefaultSetting = @"";
				colvarLongitudeWest.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLongitudeWest);
				
				TableSchema.TableColumn colvarLongitudeEast = new TableSchema.TableColumn(schema);
				colvarLongitudeEast.ColumnName = "LongitudeEast";
				colvarLongitudeEast.DataType = DbType.Double;
				colvarLongitudeEast.MaxLength = 0;
				colvarLongitudeEast.AutoIncrement = false;
				colvarLongitudeEast.IsNullable = true;
				colvarLongitudeEast.IsPrimaryKey = false;
				colvarLongitudeEast.IsForeignKey = false;
				colvarLongitudeEast.IsReadOnly = false;
				colvarLongitudeEast.DefaultSetting = @"";
				colvarLongitudeEast.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLongitudeEast);
				
				TableSchema.TableColumn colvarElevationMinimum = new TableSchema.TableColumn(schema);
				colvarElevationMinimum.ColumnName = "ElevationMinimum";
				colvarElevationMinimum.DataType = DbType.Double;
				colvarElevationMinimum.MaxLength = 0;
				colvarElevationMinimum.AutoIncrement = false;
				colvarElevationMinimum.IsNullable = true;
				colvarElevationMinimum.IsPrimaryKey = false;
				colvarElevationMinimum.IsForeignKey = false;
				colvarElevationMinimum.IsReadOnly = false;
				colvarElevationMinimum.DefaultSetting = @"";
				colvarElevationMinimum.ForeignKeyTableName = "";
				schema.Columns.Add(colvarElevationMinimum);
				
				TableSchema.TableColumn colvarElevationMaximum = new TableSchema.TableColumn(schema);
				colvarElevationMaximum.ColumnName = "ElevationMaximum";
				colvarElevationMaximum.DataType = DbType.Double;
				colvarElevationMaximum.MaxLength = 0;
				colvarElevationMaximum.AutoIncrement = false;
				colvarElevationMaximum.IsNullable = true;
				colvarElevationMaximum.IsPrimaryKey = false;
				colvarElevationMaximum.IsForeignKey = false;
				colvarElevationMaximum.IsReadOnly = false;
				colvarElevationMaximum.DefaultSetting = @"";
				colvarElevationMaximum.ForeignKeyTableName = "";
				schema.Columns.Add(colvarElevationMaximum);
				
				TableSchema.TableColumn colvarStartDate = new TableSchema.TableColumn(schema);
				colvarStartDate.ColumnName = "StartDate";
				colvarStartDate.DataType = DbType.DateTime;
				colvarStartDate.MaxLength = 0;
				colvarStartDate.AutoIncrement = false;
				colvarStartDate.IsNullable = true;
				colvarStartDate.IsPrimaryKey = false;
				colvarStartDate.IsForeignKey = false;
				colvarStartDate.IsReadOnly = false;
				colvarStartDate.DefaultSetting = @"";
				colvarStartDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartDate);
				
				TableSchema.TableColumn colvarEndDate = new TableSchema.TableColumn(schema);
				colvarEndDate.ColumnName = "EndDate";
				colvarEndDate.DataType = DbType.DateTime;
				colvarEndDate.MaxLength = 0;
				colvarEndDate.AutoIncrement = false;
				colvarEndDate.IsNullable = true;
				colvarEndDate.IsPrimaryKey = false;
				colvarEndDate.IsForeignKey = false;
				colvarEndDate.IsReadOnly = false;
				colvarEndDate.DefaultSetting = @"";
				colvarEndDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEndDate);
				
				TableSchema.TableColumn colvarAddedAt = new TableSchema.TableColumn(schema);
				colvarAddedAt.ColumnName = "AddedAt";
				colvarAddedAt.DataType = DbType.DateTime;
				colvarAddedAt.MaxLength = 0;
				colvarAddedAt.AutoIncrement = false;
				colvarAddedAt.IsNullable = true;
				colvarAddedAt.IsPrimaryKey = false;
				colvarAddedAt.IsForeignKey = false;
				colvarAddedAt.IsReadOnly = false;
				
						colvarAddedAt.DefaultSetting = @"(getdate())";
				colvarAddedAt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddedAt);
				
				TableSchema.TableColumn colvarAddedBy = new TableSchema.TableColumn(schema);
				colvarAddedBy.ColumnName = "AddedBy";
				colvarAddedBy.DataType = DbType.String;
				colvarAddedBy.MaxLength = 128;
				colvarAddedBy.AutoIncrement = false;
				colvarAddedBy.IsNullable = false;
				colvarAddedBy.IsPrimaryKey = false;
				colvarAddedBy.IsForeignKey = false;
				colvarAddedBy.IsReadOnly = false;
				colvarAddedBy.DefaultSetting = @"";
				colvarAddedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddedBy);
				
				TableSchema.TableColumn colvarUpdatedAt = new TableSchema.TableColumn(schema);
				colvarUpdatedAt.ColumnName = "UpdatedAt";
				colvarUpdatedAt.DataType = DbType.DateTime;
				colvarUpdatedAt.MaxLength = 0;
				colvarUpdatedAt.AutoIncrement = false;
				colvarUpdatedAt.IsNullable = true;
				colvarUpdatedAt.IsPrimaryKey = false;
				colvarUpdatedAt.IsForeignKey = false;
				colvarUpdatedAt.IsReadOnly = false;
				
						colvarUpdatedAt.DefaultSetting = @"(getdate())";
				colvarUpdatedAt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpdatedAt);
				
				TableSchema.TableColumn colvarUpdatedBy = new TableSchema.TableColumn(schema);
				colvarUpdatedBy.ColumnName = "UpdatedBy";
				colvarUpdatedBy.DataType = DbType.String;
				colvarUpdatedBy.MaxLength = 128;
				colvarUpdatedBy.AutoIncrement = false;
				colvarUpdatedBy.IsNullable = false;
				colvarUpdatedBy.IsPrimaryKey = false;
				colvarUpdatedBy.IsForeignKey = false;
				colvarUpdatedBy.IsReadOnly = false;
				colvarUpdatedBy.DefaultSetting = @"";
				colvarUpdatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpdatedBy);
				
				TableSchema.TableColumn colvarRowVersion = new TableSchema.TableColumn(schema);
				colvarRowVersion.ColumnName = "RowVersion";
				colvarRowVersion.DataType = DbType.Binary;
				colvarRowVersion.MaxLength = 0;
				colvarRowVersion.AutoIncrement = false;
				colvarRowVersion.IsNullable = false;
				colvarRowVersion.IsPrimaryKey = false;
				colvarRowVersion.IsForeignKey = false;
				colvarRowVersion.IsReadOnly = true;
				colvarRowVersion.DefaultSetting = @"";
				colvarRowVersion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRowVersion);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ObservationsDB"].AddSchema("UserDownloads",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public Guid Id 
		{
			get { return GetColumnValue<Guid>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("UserId")]
		[Bindable(true)]
		public string UserId 
		{
			get { return GetColumnValue<string>(Columns.UserId); }
			set { SetColumnValue(Columns.UserId, value); }
		}
		  
		[XmlAttribute("Name")]
		[Bindable(true)]
		public string Name 
		{
			get { return GetColumnValue<string>(Columns.Name); }
			set { SetColumnValue(Columns.Name, value); }
		}
		  
		[XmlAttribute("Description")]
		[Bindable(true)]
		public string Description 
		{
			get { return GetColumnValue<string>(Columns.Description); }
			set { SetColumnValue(Columns.Description, value); }
		}
		  
		[XmlAttribute("Title")]
		[Bindable(true)]
		public string Title 
		{
			get { return GetColumnValue<string>(Columns.Title); }
			set { SetColumnValue(Columns.Title, value); }
		}
		  
		[XmlAttribute("Input")]
		[Bindable(true)]
		public string Input 
		{
			get { return GetColumnValue<string>(Columns.Input); }
			set { SetColumnValue(Columns.Input, value); }
		}
		  
		[XmlAttribute("ReQueryURL")]
		[Bindable(true)]
		public string ReQueryURL 
		{
			get { return GetColumnValue<string>(Columns.ReQueryURL); }
			set { SetColumnValue(Columns.ReQueryURL, value); }
		}
		  
		[XmlAttribute("DOIId")]
		[Bindable(true)]
		public int DOIId 
		{
			get { return GetColumnValue<int>(Columns.DOIId); }
			set { SetColumnValue(Columns.DOIId, value); }
		}
		  
		[XmlAttribute("Doi")]
		[Bindable(true)]
		public string Doi 
		{
			get { return GetColumnValue<string>(Columns.Doi); }
			set { SetColumnValue(Columns.Doi, value); }
		}
		  
		[XmlAttribute("DOIUrl")]
		[Bindable(true)]
		public string DOIUrl 
		{
			get { return GetColumnValue<string>(Columns.DOIUrl); }
			set { SetColumnValue(Columns.DOIUrl, value); }
		}
		  
		[XmlAttribute("MetadataURL")]
		[Bindable(true)]
		public string MetadataURL 
		{
			get { return GetColumnValue<string>(Columns.MetadataURL); }
			set { SetColumnValue(Columns.MetadataURL, value); }
		}
		  
		[XmlAttribute("DownloadURL")]
		[Bindable(true)]
		public string DownloadURL 
		{
			get { return GetColumnValue<string>(Columns.DownloadURL); }
			set { SetColumnValue(Columns.DownloadURL, value); }
		}
		  
		[XmlAttribute("ZipFullName")]
		[Bindable(true)]
		public string ZipFullName 
		{
			get { return GetColumnValue<string>(Columns.ZipFullName); }
			set { SetColumnValue(Columns.ZipFullName, value); }
		}
		  
		[XmlAttribute("ZipCheckSum")]
		[Bindable(true)]
		public string ZipCheckSum 
		{
			get { return GetColumnValue<string>(Columns.ZipCheckSum); }
			set { SetColumnValue(Columns.ZipCheckSum, value); }
		}
		  
		[XmlAttribute("Citation")]
		[Bindable(true)]
		public string Citation 
		{
			get { return GetColumnValue<string>(Columns.Citation); }
			set { SetColumnValue(Columns.Citation, value); }
		}
		  
		[XmlAttribute("Places")]
		[Bindable(true)]
		public string Places 
		{
			get { return GetColumnValue<string>(Columns.Places); }
			set { SetColumnValue(Columns.Places, value); }
		}
		  
		[XmlAttribute("LatitudeNorth")]
		[Bindable(true)]
		public double? LatitudeNorth 
		{
			get { return GetColumnValue<double?>(Columns.LatitudeNorth); }
			set { SetColumnValue(Columns.LatitudeNorth, value); }
		}
		  
		[XmlAttribute("LatitudeSouth")]
		[Bindable(true)]
		public double? LatitudeSouth 
		{
			get { return GetColumnValue<double?>(Columns.LatitudeSouth); }
			set { SetColumnValue(Columns.LatitudeSouth, value); }
		}
		  
		[XmlAttribute("LongitudeWest")]
		[Bindable(true)]
		public double? LongitudeWest 
		{
			get { return GetColumnValue<double?>(Columns.LongitudeWest); }
			set { SetColumnValue(Columns.LongitudeWest, value); }
		}
		  
		[XmlAttribute("LongitudeEast")]
		[Bindable(true)]
		public double? LongitudeEast 
		{
			get { return GetColumnValue<double?>(Columns.LongitudeEast); }
			set { SetColumnValue(Columns.LongitudeEast, value); }
		}
		  
		[XmlAttribute("ElevationMinimum")]
		[Bindable(true)]
		public double? ElevationMinimum 
		{
			get { return GetColumnValue<double?>(Columns.ElevationMinimum); }
			set { SetColumnValue(Columns.ElevationMinimum, value); }
		}
		  
		[XmlAttribute("ElevationMaximum")]
		[Bindable(true)]
		public double? ElevationMaximum 
		{
			get { return GetColumnValue<double?>(Columns.ElevationMaximum); }
			set { SetColumnValue(Columns.ElevationMaximum, value); }
		}
		  
		[XmlAttribute("StartDate")]
		[Bindable(true)]
		public DateTime? StartDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.StartDate); }
			set { SetColumnValue(Columns.StartDate, value); }
		}
		  
		[XmlAttribute("EndDate")]
		[Bindable(true)]
		public DateTime? EndDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.EndDate); }
			set { SetColumnValue(Columns.EndDate, value); }
		}
		  
		[XmlAttribute("AddedAt")]
		[Bindable(true)]
		public DateTime? AddedAt 
		{
			get { return GetColumnValue<DateTime?>(Columns.AddedAt); }
			set { SetColumnValue(Columns.AddedAt, value); }
		}
		  
		[XmlAttribute("AddedBy")]
		[Bindable(true)]
		public string AddedBy 
		{
			get { return GetColumnValue<string>(Columns.AddedBy); }
			set { SetColumnValue(Columns.AddedBy, value); }
		}
		  
		[XmlAttribute("UpdatedAt")]
		[Bindable(true)]
		public DateTime? UpdatedAt 
		{
			get { return GetColumnValue<DateTime?>(Columns.UpdatedAt); }
			set { SetColumnValue(Columns.UpdatedAt, value); }
		}
		  
		[XmlAttribute("UpdatedBy")]
		[Bindable(true)]
		public string UpdatedBy 
		{
			get { return GetColumnValue<string>(Columns.UpdatedBy); }
			set { SetColumnValue(Columns.UpdatedBy, value); }
		}
		  
		[XmlAttribute("RowVersion")]
		[Bindable(true)]
		public byte[] RowVersion 
		{
			get { return GetColumnValue<byte[]>(Columns.RowVersion); }
			set { SetColumnValue(Columns.RowVersion, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(Guid varId,string varUserId,string varName,string varDescription,string varTitle,string varInput,string varReQueryURL,string varDoi,string varDOIUrl,string varMetadataURL,string varDownloadURL,string varZipFullName,string varZipCheckSum,string varCitation,string varPlaces,double? varLatitudeNorth,double? varLatitudeSouth,double? varLongitudeWest,double? varLongitudeEast,double? varElevationMinimum,double? varElevationMaximum,DateTime? varStartDate,DateTime? varEndDate,DateTime? varAddedAt,string varAddedBy,DateTime? varUpdatedAt,string varUpdatedBy,byte[] varRowVersion)
		{
			UserDownload item = new UserDownload();
			
			item.Id = varId;
			
			item.UserId = varUserId;
			
			item.Name = varName;
			
			item.Description = varDescription;
			
			item.Title = varTitle;
			
			item.Input = varInput;
			
			item.ReQueryURL = varReQueryURL;
			
			item.Doi = varDoi;
			
			item.DOIUrl = varDOIUrl;
			
			item.MetadataURL = varMetadataURL;
			
			item.DownloadURL = varDownloadURL;
			
			item.ZipFullName = varZipFullName;
			
			item.ZipCheckSum = varZipCheckSum;
			
			item.Citation = varCitation;
			
			item.Places = varPlaces;
			
			item.LatitudeNorth = varLatitudeNorth;
			
			item.LatitudeSouth = varLatitudeSouth;
			
			item.LongitudeWest = varLongitudeWest;
			
			item.LongitudeEast = varLongitudeEast;
			
			item.ElevationMinimum = varElevationMinimum;
			
			item.ElevationMaximum = varElevationMaximum;
			
			item.StartDate = varStartDate;
			
			item.EndDate = varEndDate;
			
			item.AddedAt = varAddedAt;
			
			item.AddedBy = varAddedBy;
			
			item.UpdatedAt = varUpdatedAt;
			
			item.UpdatedBy = varUpdatedBy;
			
			item.RowVersion = varRowVersion;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(Guid varId,string varUserId,string varName,string varDescription,string varTitle,string varInput,string varReQueryURL,int varDOIId,string varDoi,string varDOIUrl,string varMetadataURL,string varDownloadURL,string varZipFullName,string varZipCheckSum,string varCitation,string varPlaces,double? varLatitudeNorth,double? varLatitudeSouth,double? varLongitudeWest,double? varLongitudeEast,double? varElevationMinimum,double? varElevationMaximum,DateTime? varStartDate,DateTime? varEndDate,DateTime? varAddedAt,string varAddedBy,DateTime? varUpdatedAt,string varUpdatedBy,byte[] varRowVersion)
		{
			UserDownload item = new UserDownload();
			
				item.Id = varId;
			
				item.UserId = varUserId;
			
				item.Name = varName;
			
				item.Description = varDescription;
			
				item.Title = varTitle;
			
				item.Input = varInput;
			
				item.ReQueryURL = varReQueryURL;
			
				item.DOIId = varDOIId;
			
				item.Doi = varDoi;
			
				item.DOIUrl = varDOIUrl;
			
				item.MetadataURL = varMetadataURL;
			
				item.DownloadURL = varDownloadURL;
			
				item.ZipFullName = varZipFullName;
			
				item.ZipCheckSum = varZipCheckSum;
			
				item.Citation = varCitation;
			
				item.Places = varPlaces;
			
				item.LatitudeNorth = varLatitudeNorth;
			
				item.LatitudeSouth = varLatitudeSouth;
			
				item.LongitudeWest = varLongitudeWest;
			
				item.LongitudeEast = varLongitudeEast;
			
				item.ElevationMinimum = varElevationMinimum;
			
				item.ElevationMaximum = varElevationMaximum;
			
				item.StartDate = varStartDate;
			
				item.EndDate = varEndDate;
			
				item.AddedAt = varAddedAt;
			
				item.AddedBy = varAddedBy;
			
				item.UpdatedAt = varUpdatedAt;
			
				item.UpdatedBy = varUpdatedBy;
			
				item.RowVersion = varRowVersion;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn UserIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn NameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn TitleColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn InputColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ReQueryURLColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DOIIdColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn DoiColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn DOIUrlColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn MetadataURLColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn DownloadURLColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ZipFullNameColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ZipCheckSumColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn CitationColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn PlacesColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn LatitudeNorthColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn LatitudeSouthColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn LongitudeWestColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn LongitudeEastColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn ElevationMinimumColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn ElevationMaximumColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn StartDateColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn EndDateColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn AddedAtColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn AddedByColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn UpdatedAtColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn UpdatedByColumn
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        public static TableSchema.TableColumn RowVersionColumn
        {
            get { return Schema.Columns[28]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string UserId = @"UserId";
			 public static string Name = @"Name";
			 public static string Description = @"Description";
			 public static string Title = @"Title";
			 public static string Input = @"Input";
			 public static string ReQueryURL = @"ReQueryURL";
			 public static string DOIId = @"DOIId";
			 public static string Doi = @"DOI";
			 public static string DOIUrl = @"DOIUrl";
			 public static string MetadataURL = @"MetadataURL";
			 public static string DownloadURL = @"DownloadURL";
			 public static string ZipFullName = @"ZipFullName";
			 public static string ZipCheckSum = @"ZipCheckSum";
			 public static string Citation = @"Citation";
			 public static string Places = @"Places";
			 public static string LatitudeNorth = @"LatitudeNorth";
			 public static string LatitudeSouth = @"LatitudeSouth";
			 public static string LongitudeWest = @"LongitudeWest";
			 public static string LongitudeEast = @"LongitudeEast";
			 public static string ElevationMinimum = @"ElevationMinimum";
			 public static string ElevationMaximum = @"ElevationMaximum";
			 public static string StartDate = @"StartDate";
			 public static string EndDate = @"EndDate";
			 public static string AddedAt = @"AddedAt";
			 public static string AddedBy = @"AddedBy";
			 public static string UpdatedAt = @"UpdatedAt";
			 public static string UpdatedBy = @"UpdatedBy";
			 public static string RowVersion = @"RowVersion";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
