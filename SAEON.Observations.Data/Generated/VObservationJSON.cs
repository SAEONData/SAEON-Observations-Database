using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SAEON.Observations.Data{
    /// <summary>
    /// Strongly-typed collection for the VObservationJSON class.
    /// </summary>
    [Serializable]
    public partial class VObservationJSONCollection : ReadOnlyList<VObservationJSON, VObservationJSONCollection>
    {        
        public VObservationJSONCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the vObservationJSON view.
    /// </summary>
    [Serializable]
    public partial class VObservationJSON : ReadOnlyRecord<VObservationJSON>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("vObservationJSON", TableType.View, DataService.GetInstance("ObservationsDB"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
                colvarId.ColumnName = "ID";
                colvarId.DataType = DbType.Int32;
                colvarId.MaxLength = 0;
                colvarId.AutoIncrement = false;
                colvarId.IsNullable = false;
                colvarId.IsPrimaryKey = false;
                colvarId.IsForeignKey = false;
                colvarId.IsReadOnly = false;
                
                schema.Columns.Add(colvarId);
                
                TableSchema.TableColumn colvarValueDate = new TableSchema.TableColumn(schema);
                colvarValueDate.ColumnName = "ValueDate";
                colvarValueDate.DataType = DbType.DateTime;
                colvarValueDate.MaxLength = 0;
                colvarValueDate.AutoIncrement = false;
                colvarValueDate.IsNullable = false;
                colvarValueDate.IsPrimaryKey = false;
                colvarValueDate.IsForeignKey = false;
                colvarValueDate.IsReadOnly = false;
                
                schema.Columns.Add(colvarValueDate);
                
                TableSchema.TableColumn colvarValueDay = new TableSchema.TableColumn(schema);
                colvarValueDay.ColumnName = "ValueDay";
                colvarValueDay.DataType = DbType.Date;
                colvarValueDay.MaxLength = 0;
                colvarValueDay.AutoIncrement = false;
                colvarValueDay.IsNullable = true;
                colvarValueDay.IsPrimaryKey = false;
                colvarValueDay.IsForeignKey = false;
                colvarValueDay.IsReadOnly = false;
                
                schema.Columns.Add(colvarValueDay);
                
                TableSchema.TableColumn colvarValueYear = new TableSchema.TableColumn(schema);
                colvarValueYear.ColumnName = "ValueYear";
                colvarValueYear.DataType = DbType.Int32;
                colvarValueYear.MaxLength = 0;
                colvarValueYear.AutoIncrement = false;
                colvarValueYear.IsNullable = true;
                colvarValueYear.IsPrimaryKey = false;
                colvarValueYear.IsForeignKey = false;
                colvarValueYear.IsReadOnly = false;
                
                schema.Columns.Add(colvarValueYear);
                
                TableSchema.TableColumn colvarValueDecade = new TableSchema.TableColumn(schema);
                colvarValueDecade.ColumnName = "ValueDecade";
                colvarValueDecade.DataType = DbType.Int32;
                colvarValueDecade.MaxLength = 0;
                colvarValueDecade.AutoIncrement = false;
                colvarValueDecade.IsNullable = true;
                colvarValueDecade.IsPrimaryKey = false;
                colvarValueDecade.IsForeignKey = false;
                colvarValueDecade.IsReadOnly = false;
                
                schema.Columns.Add(colvarValueDecade);
                
                TableSchema.TableColumn colvarTextValue = new TableSchema.TableColumn(schema);
                colvarTextValue.ColumnName = "TextValue";
                colvarTextValue.DataType = DbType.AnsiString;
                colvarTextValue.MaxLength = 10;
                colvarTextValue.AutoIncrement = false;
                colvarTextValue.IsNullable = true;
                colvarTextValue.IsPrimaryKey = false;
                colvarTextValue.IsForeignKey = false;
                colvarTextValue.IsReadOnly = false;
                
                schema.Columns.Add(colvarTextValue);
                
                TableSchema.TableColumn colvarRawValue = new TableSchema.TableColumn(schema);
                colvarRawValue.ColumnName = "RawValue";
                colvarRawValue.DataType = DbType.Double;
                colvarRawValue.MaxLength = 0;
                colvarRawValue.AutoIncrement = false;
                colvarRawValue.IsNullable = true;
                colvarRawValue.IsPrimaryKey = false;
                colvarRawValue.IsForeignKey = false;
                colvarRawValue.IsReadOnly = false;
                
                schema.Columns.Add(colvarRawValue);
                
                TableSchema.TableColumn colvarDataValue = new TableSchema.TableColumn(schema);
                colvarDataValue.ColumnName = "DataValue";
                colvarDataValue.DataType = DbType.Double;
                colvarDataValue.MaxLength = 0;
                colvarDataValue.AutoIncrement = false;
                colvarDataValue.IsNullable = true;
                colvarDataValue.IsPrimaryKey = false;
                colvarDataValue.IsForeignKey = false;
                colvarDataValue.IsReadOnly = false;
                
                schema.Columns.Add(colvarDataValue);
                
                TableSchema.TableColumn colvarComment = new TableSchema.TableColumn(schema);
                colvarComment.ColumnName = "Comment";
                colvarComment.DataType = DbType.AnsiString;
                colvarComment.MaxLength = 250;
                colvarComment.AutoIncrement = false;
                colvarComment.IsNullable = true;
                colvarComment.IsPrimaryKey = false;
                colvarComment.IsForeignKey = false;
                colvarComment.IsReadOnly = false;
                
                schema.Columns.Add(colvarComment);
                
                TableSchema.TableColumn colvarCorrelationID = new TableSchema.TableColumn(schema);
                colvarCorrelationID.ColumnName = "CorrelationID";
                colvarCorrelationID.DataType = DbType.Guid;
                colvarCorrelationID.MaxLength = 0;
                colvarCorrelationID.AutoIncrement = false;
                colvarCorrelationID.IsNullable = true;
                colvarCorrelationID.IsPrimaryKey = false;
                colvarCorrelationID.IsForeignKey = false;
                colvarCorrelationID.IsReadOnly = false;
                
                schema.Columns.Add(colvarCorrelationID);
                
                TableSchema.TableColumn colvarLatitude = new TableSchema.TableColumn(schema);
                colvarLatitude.ColumnName = "Latitude";
                colvarLatitude.DataType = DbType.Double;
                colvarLatitude.MaxLength = 0;
                colvarLatitude.AutoIncrement = false;
                colvarLatitude.IsNullable = true;
                colvarLatitude.IsPrimaryKey = false;
                colvarLatitude.IsForeignKey = false;
                colvarLatitude.IsReadOnly = false;
                
                schema.Columns.Add(colvarLatitude);
                
                TableSchema.TableColumn colvarLongitude = new TableSchema.TableColumn(schema);
                colvarLongitude.ColumnName = "Longitude";
                colvarLongitude.DataType = DbType.Double;
                colvarLongitude.MaxLength = 0;
                colvarLongitude.AutoIncrement = false;
                colvarLongitude.IsNullable = true;
                colvarLongitude.IsPrimaryKey = false;
                colvarLongitude.IsForeignKey = false;
                colvarLongitude.IsReadOnly = false;
                
                schema.Columns.Add(colvarLongitude);
                
                TableSchema.TableColumn colvarElevation = new TableSchema.TableColumn(schema);
                colvarElevation.ColumnName = "Elevation";
                colvarElevation.DataType = DbType.Double;
                colvarElevation.MaxLength = 0;
                colvarElevation.AutoIncrement = false;
                colvarElevation.IsNullable = true;
                colvarElevation.IsPrimaryKey = false;
                colvarElevation.IsForeignKey = false;
                colvarElevation.IsReadOnly = false;
                
                schema.Columns.Add(colvarElevation);
                
                TableSchema.TableColumn colvarImportBatchID = new TableSchema.TableColumn(schema);
                colvarImportBatchID.ColumnName = "ImportBatch.ID";
                colvarImportBatchID.DataType = DbType.Guid;
                colvarImportBatchID.MaxLength = 0;
                colvarImportBatchID.AutoIncrement = false;
                colvarImportBatchID.IsNullable = false;
                colvarImportBatchID.IsPrimaryKey = false;
                colvarImportBatchID.IsForeignKey = false;
                colvarImportBatchID.IsReadOnly = false;
                
                schema.Columns.Add(colvarImportBatchID);
                
                TableSchema.TableColumn colvarImportBatchCode = new TableSchema.TableColumn(schema);
                colvarImportBatchCode.ColumnName = "ImportBatch.Code";
                colvarImportBatchCode.DataType = DbType.Int32;
                colvarImportBatchCode.MaxLength = 0;
                colvarImportBatchCode.AutoIncrement = false;
                colvarImportBatchCode.IsNullable = false;
                colvarImportBatchCode.IsPrimaryKey = false;
                colvarImportBatchCode.IsForeignKey = false;
                colvarImportBatchCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarImportBatchCode);
                
                TableSchema.TableColumn colvarImportBatchDate = new TableSchema.TableColumn(schema);
                colvarImportBatchDate.ColumnName = "ImportBatch.Date";
                colvarImportBatchDate.DataType = DbType.DateTime;
                colvarImportBatchDate.MaxLength = 0;
                colvarImportBatchDate.AutoIncrement = false;
                colvarImportBatchDate.IsNullable = false;
                colvarImportBatchDate.IsPrimaryKey = false;
                colvarImportBatchDate.IsForeignKey = false;
                colvarImportBatchDate.IsReadOnly = false;
                
                schema.Columns.Add(colvarImportBatchDate);
                
                TableSchema.TableColumn colvarSiteID = new TableSchema.TableColumn(schema);
                colvarSiteID.ColumnName = "Site.ID";
                colvarSiteID.DataType = DbType.Guid;
                colvarSiteID.MaxLength = 0;
                colvarSiteID.AutoIncrement = false;
                colvarSiteID.IsNullable = false;
                colvarSiteID.IsPrimaryKey = false;
                colvarSiteID.IsForeignKey = false;
                colvarSiteID.IsReadOnly = false;
                
                schema.Columns.Add(colvarSiteID);
                
                TableSchema.TableColumn colvarSiteCode = new TableSchema.TableColumn(schema);
                colvarSiteCode.ColumnName = "Site.Code";
                colvarSiteCode.DataType = DbType.AnsiString;
                colvarSiteCode.MaxLength = 50;
                colvarSiteCode.AutoIncrement = false;
                colvarSiteCode.IsNullable = false;
                colvarSiteCode.IsPrimaryKey = false;
                colvarSiteCode.IsForeignKey = false;
                colvarSiteCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarSiteCode);
                
                TableSchema.TableColumn colvarSiteName = new TableSchema.TableColumn(schema);
                colvarSiteName.ColumnName = "Site.Name";
                colvarSiteName.DataType = DbType.AnsiString;
                colvarSiteName.MaxLength = 150;
                colvarSiteName.AutoIncrement = false;
                colvarSiteName.IsNullable = false;
                colvarSiteName.IsPrimaryKey = false;
                colvarSiteName.IsForeignKey = false;
                colvarSiteName.IsReadOnly = false;
                
                schema.Columns.Add(colvarSiteName);
                
                TableSchema.TableColumn colvarStationID = new TableSchema.TableColumn(schema);
                colvarStationID.ColumnName = "Station.ID";
                colvarStationID.DataType = DbType.Guid;
                colvarStationID.MaxLength = 0;
                colvarStationID.AutoIncrement = false;
                colvarStationID.IsNullable = false;
                colvarStationID.IsPrimaryKey = false;
                colvarStationID.IsForeignKey = false;
                colvarStationID.IsReadOnly = false;
                
                schema.Columns.Add(colvarStationID);
                
                TableSchema.TableColumn colvarStationCode = new TableSchema.TableColumn(schema);
                colvarStationCode.ColumnName = "Station.Code";
                colvarStationCode.DataType = DbType.AnsiString;
                colvarStationCode.MaxLength = 50;
                colvarStationCode.AutoIncrement = false;
                colvarStationCode.IsNullable = false;
                colvarStationCode.IsPrimaryKey = false;
                colvarStationCode.IsForeignKey = false;
                colvarStationCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarStationCode);
                
                TableSchema.TableColumn colvarStationName = new TableSchema.TableColumn(schema);
                colvarStationName.ColumnName = "Station.Name";
                colvarStationName.DataType = DbType.AnsiString;
                colvarStationName.MaxLength = 150;
                colvarStationName.AutoIncrement = false;
                colvarStationName.IsNullable = false;
                colvarStationName.IsPrimaryKey = false;
                colvarStationName.IsForeignKey = false;
                colvarStationName.IsReadOnly = false;
                
                schema.Columns.Add(colvarStationName);
                
                TableSchema.TableColumn colvarInstrumentID = new TableSchema.TableColumn(schema);
                colvarInstrumentID.ColumnName = "Instrument.ID";
                colvarInstrumentID.DataType = DbType.Guid;
                colvarInstrumentID.MaxLength = 0;
                colvarInstrumentID.AutoIncrement = false;
                colvarInstrumentID.IsNullable = false;
                colvarInstrumentID.IsPrimaryKey = false;
                colvarInstrumentID.IsForeignKey = false;
                colvarInstrumentID.IsReadOnly = false;
                
                schema.Columns.Add(colvarInstrumentID);
                
                TableSchema.TableColumn colvarInstrumentCode = new TableSchema.TableColumn(schema);
                colvarInstrumentCode.ColumnName = "Instrument.Code";
                colvarInstrumentCode.DataType = DbType.AnsiString;
                colvarInstrumentCode.MaxLength = 50;
                colvarInstrumentCode.AutoIncrement = false;
                colvarInstrumentCode.IsNullable = false;
                colvarInstrumentCode.IsPrimaryKey = false;
                colvarInstrumentCode.IsForeignKey = false;
                colvarInstrumentCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarInstrumentCode);
                
                TableSchema.TableColumn colvarInstrumentName = new TableSchema.TableColumn(schema);
                colvarInstrumentName.ColumnName = "Instrument.Name";
                colvarInstrumentName.DataType = DbType.AnsiString;
                colvarInstrumentName.MaxLength = 150;
                colvarInstrumentName.AutoIncrement = false;
                colvarInstrumentName.IsNullable = false;
                colvarInstrumentName.IsPrimaryKey = false;
                colvarInstrumentName.IsForeignKey = false;
                colvarInstrumentName.IsReadOnly = false;
                
                schema.Columns.Add(colvarInstrumentName);
                
                TableSchema.TableColumn colvarSensorID = new TableSchema.TableColumn(schema);
                colvarSensorID.ColumnName = "Sensor.ID";
                colvarSensorID.DataType = DbType.Guid;
                colvarSensorID.MaxLength = 0;
                colvarSensorID.AutoIncrement = false;
                colvarSensorID.IsNullable = false;
                colvarSensorID.IsPrimaryKey = false;
                colvarSensorID.IsForeignKey = false;
                colvarSensorID.IsReadOnly = false;
                
                schema.Columns.Add(colvarSensorID);
                
                TableSchema.TableColumn colvarSensorCode = new TableSchema.TableColumn(schema);
                colvarSensorCode.ColumnName = "Sensor.Code";
                colvarSensorCode.DataType = DbType.AnsiString;
                colvarSensorCode.MaxLength = 50;
                colvarSensorCode.AutoIncrement = false;
                colvarSensorCode.IsNullable = false;
                colvarSensorCode.IsPrimaryKey = false;
                colvarSensorCode.IsForeignKey = false;
                colvarSensorCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarSensorCode);
                
                TableSchema.TableColumn colvarSensorName = new TableSchema.TableColumn(schema);
                colvarSensorName.ColumnName = "Sensor.Name";
                colvarSensorName.DataType = DbType.AnsiString;
                colvarSensorName.MaxLength = 150;
                colvarSensorName.AutoIncrement = false;
                colvarSensorName.IsNullable = false;
                colvarSensorName.IsPrimaryKey = false;
                colvarSensorName.IsForeignKey = false;
                colvarSensorName.IsReadOnly = false;
                
                schema.Columns.Add(colvarSensorName);
                
                TableSchema.TableColumn colvarPhenomenonID = new TableSchema.TableColumn(schema);
                colvarPhenomenonID.ColumnName = "Phenomenon.ID";
                colvarPhenomenonID.DataType = DbType.Guid;
                colvarPhenomenonID.MaxLength = 0;
                colvarPhenomenonID.AutoIncrement = false;
                colvarPhenomenonID.IsNullable = false;
                colvarPhenomenonID.IsPrimaryKey = false;
                colvarPhenomenonID.IsForeignKey = false;
                colvarPhenomenonID.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhenomenonID);
                
                TableSchema.TableColumn colvarPhenomenonCode = new TableSchema.TableColumn(schema);
                colvarPhenomenonCode.ColumnName = "Phenomenon.Code";
                colvarPhenomenonCode.DataType = DbType.AnsiString;
                colvarPhenomenonCode.MaxLength = 50;
                colvarPhenomenonCode.AutoIncrement = false;
                colvarPhenomenonCode.IsNullable = false;
                colvarPhenomenonCode.IsPrimaryKey = false;
                colvarPhenomenonCode.IsForeignKey = false;
                colvarPhenomenonCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhenomenonCode);
                
                TableSchema.TableColumn colvarPhenomenonName = new TableSchema.TableColumn(schema);
                colvarPhenomenonName.ColumnName = "Phenomenon.Name";
                colvarPhenomenonName.DataType = DbType.AnsiString;
                colvarPhenomenonName.MaxLength = 150;
                colvarPhenomenonName.AutoIncrement = false;
                colvarPhenomenonName.IsNullable = false;
                colvarPhenomenonName.IsPrimaryKey = false;
                colvarPhenomenonName.IsForeignKey = false;
                colvarPhenomenonName.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhenomenonName);
                
                TableSchema.TableColumn colvarOfferingID = new TableSchema.TableColumn(schema);
                colvarOfferingID.ColumnName = "Offering.ID";
                colvarOfferingID.DataType = DbType.Guid;
                colvarOfferingID.MaxLength = 0;
                colvarOfferingID.AutoIncrement = false;
                colvarOfferingID.IsNullable = false;
                colvarOfferingID.IsPrimaryKey = false;
                colvarOfferingID.IsForeignKey = false;
                colvarOfferingID.IsReadOnly = false;
                
                schema.Columns.Add(colvarOfferingID);
                
                TableSchema.TableColumn colvarOfferingCode = new TableSchema.TableColumn(schema);
                colvarOfferingCode.ColumnName = "Offering.Code";
                colvarOfferingCode.DataType = DbType.AnsiString;
                colvarOfferingCode.MaxLength = 50;
                colvarOfferingCode.AutoIncrement = false;
                colvarOfferingCode.IsNullable = false;
                colvarOfferingCode.IsPrimaryKey = false;
                colvarOfferingCode.IsForeignKey = false;
                colvarOfferingCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarOfferingCode);
                
                TableSchema.TableColumn colvarOfferingName = new TableSchema.TableColumn(schema);
                colvarOfferingName.ColumnName = "Offering.Name";
                colvarOfferingName.DataType = DbType.AnsiString;
                colvarOfferingName.MaxLength = 150;
                colvarOfferingName.AutoIncrement = false;
                colvarOfferingName.IsNullable = false;
                colvarOfferingName.IsPrimaryKey = false;
                colvarOfferingName.IsForeignKey = false;
                colvarOfferingName.IsReadOnly = false;
                
                schema.Columns.Add(colvarOfferingName);
                
                TableSchema.TableColumn colvarUnitID = new TableSchema.TableColumn(schema);
                colvarUnitID.ColumnName = "Unit.ID";
                colvarUnitID.DataType = DbType.Guid;
                colvarUnitID.MaxLength = 0;
                colvarUnitID.AutoIncrement = false;
                colvarUnitID.IsNullable = false;
                colvarUnitID.IsPrimaryKey = false;
                colvarUnitID.IsForeignKey = false;
                colvarUnitID.IsReadOnly = false;
                
                schema.Columns.Add(colvarUnitID);
                
                TableSchema.TableColumn colvarUnitCode = new TableSchema.TableColumn(schema);
                colvarUnitCode.ColumnName = "Unit.Code";
                colvarUnitCode.DataType = DbType.AnsiString;
                colvarUnitCode.MaxLength = 50;
                colvarUnitCode.AutoIncrement = false;
                colvarUnitCode.IsNullable = false;
                colvarUnitCode.IsPrimaryKey = false;
                colvarUnitCode.IsForeignKey = false;
                colvarUnitCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarUnitCode);
                
                TableSchema.TableColumn colvarUnitName = new TableSchema.TableColumn(schema);
                colvarUnitName.ColumnName = "Unit.Name";
                colvarUnitName.DataType = DbType.AnsiString;
                colvarUnitName.MaxLength = 100;
                colvarUnitName.AutoIncrement = false;
                colvarUnitName.IsNullable = false;
                colvarUnitName.IsPrimaryKey = false;
                colvarUnitName.IsForeignKey = false;
                colvarUnitName.IsReadOnly = false;
                
                schema.Columns.Add(colvarUnitName);
                
                TableSchema.TableColumn colvarUnitSymbol = new TableSchema.TableColumn(schema);
                colvarUnitSymbol.ColumnName = "Unit.Symbol";
                colvarUnitSymbol.DataType = DbType.AnsiString;
                colvarUnitSymbol.MaxLength = 20;
                colvarUnitSymbol.AutoIncrement = false;
                colvarUnitSymbol.IsNullable = false;
                colvarUnitSymbol.IsPrimaryKey = false;
                colvarUnitSymbol.IsForeignKey = false;
                colvarUnitSymbol.IsReadOnly = false;
                
                schema.Columns.Add(colvarUnitSymbol);
                
                TableSchema.TableColumn colvarStatusID = new TableSchema.TableColumn(schema);
                colvarStatusID.ColumnName = "Status.ID";
                colvarStatusID.DataType = DbType.Guid;
                colvarStatusID.MaxLength = 0;
                colvarStatusID.AutoIncrement = false;
                colvarStatusID.IsNullable = true;
                colvarStatusID.IsPrimaryKey = false;
                colvarStatusID.IsForeignKey = false;
                colvarStatusID.IsReadOnly = false;
                
                schema.Columns.Add(colvarStatusID);
                
                TableSchema.TableColumn colvarStatusCode = new TableSchema.TableColumn(schema);
                colvarStatusCode.ColumnName = "Status.Code";
                colvarStatusCode.DataType = DbType.AnsiString;
                colvarStatusCode.MaxLength = 50;
                colvarStatusCode.AutoIncrement = false;
                colvarStatusCode.IsNullable = true;
                colvarStatusCode.IsPrimaryKey = false;
                colvarStatusCode.IsForeignKey = false;
                colvarStatusCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarStatusCode);
                
                TableSchema.TableColumn colvarStatusName = new TableSchema.TableColumn(schema);
                colvarStatusName.ColumnName = "Status.Name";
                colvarStatusName.DataType = DbType.AnsiString;
                colvarStatusName.MaxLength = 150;
                colvarStatusName.AutoIncrement = false;
                colvarStatusName.IsNullable = true;
                colvarStatusName.IsPrimaryKey = false;
                colvarStatusName.IsForeignKey = false;
                colvarStatusName.IsReadOnly = false;
                
                schema.Columns.Add(colvarStatusName);
                
                TableSchema.TableColumn colvarStatusReasonID = new TableSchema.TableColumn(schema);
                colvarStatusReasonID.ColumnName = "StatusReason.ID";
                colvarStatusReasonID.DataType = DbType.Guid;
                colvarStatusReasonID.MaxLength = 0;
                colvarStatusReasonID.AutoIncrement = false;
                colvarStatusReasonID.IsNullable = true;
                colvarStatusReasonID.IsPrimaryKey = false;
                colvarStatusReasonID.IsForeignKey = false;
                colvarStatusReasonID.IsReadOnly = false;
                
                schema.Columns.Add(colvarStatusReasonID);
                
                TableSchema.TableColumn colvarStatusReasonCode = new TableSchema.TableColumn(schema);
                colvarStatusReasonCode.ColumnName = "StatusReason.Code";
                colvarStatusReasonCode.DataType = DbType.AnsiString;
                colvarStatusReasonCode.MaxLength = 50;
                colvarStatusReasonCode.AutoIncrement = false;
                colvarStatusReasonCode.IsNullable = true;
                colvarStatusReasonCode.IsPrimaryKey = false;
                colvarStatusReasonCode.IsForeignKey = false;
                colvarStatusReasonCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarStatusReasonCode);
                
                TableSchema.TableColumn colvarStatusReasonName = new TableSchema.TableColumn(schema);
                colvarStatusReasonName.ColumnName = "StatusReason.Name";
                colvarStatusReasonName.DataType = DbType.AnsiString;
                colvarStatusReasonName.MaxLength = 150;
                colvarStatusReasonName.AutoIncrement = false;
                colvarStatusReasonName.IsNullable = true;
                colvarStatusReasonName.IsPrimaryKey = false;
                colvarStatusReasonName.IsForeignKey = false;
                colvarStatusReasonName.IsReadOnly = false;
                
                schema.Columns.Add(colvarStatusReasonName);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ObservationsDB"].AddSchema("vObservationJSON",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VObservationJSON()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VObservationJSON(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VObservationJSON(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VObservationJSON(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Id")]
        [Bindable(true)]
        public int Id 
	    {
		    get
		    {
			    return GetColumnValue<int>("ID");
		    }
            set 
		    {
			    SetColumnValue("ID", value);
            }
        }
	      
        [XmlAttribute("ValueDate")]
        [Bindable(true)]
        public DateTime ValueDate 
	    {
		    get
		    {
			    return GetColumnValue<DateTime>("ValueDate");
		    }
            set 
		    {
			    SetColumnValue("ValueDate", value);
            }
        }
	      
        [XmlAttribute("ValueDay")]
        [Bindable(true)]
        public DateTime? ValueDay 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("ValueDay");
		    }
            set 
		    {
			    SetColumnValue("ValueDay", value);
            }
        }
	      
        [XmlAttribute("ValueYear")]
        [Bindable(true)]
        public int? ValueYear 
	    {
		    get
		    {
			    return GetColumnValue<int?>("ValueYear");
		    }
            set 
		    {
			    SetColumnValue("ValueYear", value);
            }
        }
	      
        [XmlAttribute("ValueDecade")]
        [Bindable(true)]
        public int? ValueDecade 
	    {
		    get
		    {
			    return GetColumnValue<int?>("ValueDecade");
		    }
            set 
		    {
			    SetColumnValue("ValueDecade", value);
            }
        }
	      
        [XmlAttribute("TextValue")]
        [Bindable(true)]
        public string TextValue 
	    {
		    get
		    {
			    return GetColumnValue<string>("TextValue");
		    }
            set 
		    {
			    SetColumnValue("TextValue", value);
            }
        }
	      
        [XmlAttribute("RawValue")]
        [Bindable(true)]
        public double? RawValue 
	    {
		    get
		    {
			    return GetColumnValue<double?>("RawValue");
		    }
            set 
		    {
			    SetColumnValue("RawValue", value);
            }
        }
	      
        [XmlAttribute("DataValue")]
        [Bindable(true)]
        public double? DataValue 
	    {
		    get
		    {
			    return GetColumnValue<double?>("DataValue");
		    }
            set 
		    {
			    SetColumnValue("DataValue", value);
            }
        }
	      
        [XmlAttribute("Comment")]
        [Bindable(true)]
        public string Comment 
	    {
		    get
		    {
			    return GetColumnValue<string>("Comment");
		    }
            set 
		    {
			    SetColumnValue("Comment", value);
            }
        }
	      
        [XmlAttribute("CorrelationID")]
        [Bindable(true)]
        public Guid? CorrelationID 
	    {
		    get
		    {
			    return GetColumnValue<Guid?>("CorrelationID");
		    }
            set 
		    {
			    SetColumnValue("CorrelationID", value);
            }
        }
	      
        [XmlAttribute("Latitude")]
        [Bindable(true)]
        public double? Latitude 
	    {
		    get
		    {
			    return GetColumnValue<double?>("Latitude");
		    }
            set 
		    {
			    SetColumnValue("Latitude", value);
            }
        }
	      
        [XmlAttribute("Longitude")]
        [Bindable(true)]
        public double? Longitude 
	    {
		    get
		    {
			    return GetColumnValue<double?>("Longitude");
		    }
            set 
		    {
			    SetColumnValue("Longitude", value);
            }
        }
	      
        [XmlAttribute("Elevation")]
        [Bindable(true)]
        public double? Elevation 
	    {
		    get
		    {
			    return GetColumnValue<double?>("Elevation");
		    }
            set 
		    {
			    SetColumnValue("Elevation", value);
            }
        }
	      
        [XmlAttribute("ImportBatchID")]
        [Bindable(true)]
        public Guid ImportBatchID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("ImportBatch.ID");
		    }
            set 
		    {
			    SetColumnValue("ImportBatch.ID", value);
            }
        }
	      
        [XmlAttribute("ImportBatchCode")]
        [Bindable(true)]
        public int ImportBatchCode 
	    {
		    get
		    {
			    return GetColumnValue<int>("ImportBatch.Code");
		    }
            set 
		    {
			    SetColumnValue("ImportBatch.Code", value);
            }
        }
	      
        [XmlAttribute("ImportBatchDate")]
        [Bindable(true)]
        public DateTime ImportBatchDate 
	    {
		    get
		    {
			    return GetColumnValue<DateTime>("ImportBatch.Date");
		    }
            set 
		    {
			    SetColumnValue("ImportBatch.Date", value);
            }
        }
	      
        [XmlAttribute("SiteID")]
        [Bindable(true)]
        public Guid SiteID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("Site.ID");
		    }
            set 
		    {
			    SetColumnValue("Site.ID", value);
            }
        }
	      
        [XmlAttribute("SiteCode")]
        [Bindable(true)]
        public string SiteCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("Site.Code");
		    }
            set 
		    {
			    SetColumnValue("Site.Code", value);
            }
        }
	      
        [XmlAttribute("SiteName")]
        [Bindable(true)]
        public string SiteName 
	    {
		    get
		    {
			    return GetColumnValue<string>("Site.Name");
		    }
            set 
		    {
			    SetColumnValue("Site.Name", value);
            }
        }
	      
        [XmlAttribute("StationID")]
        [Bindable(true)]
        public Guid StationID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("Station.ID");
		    }
            set 
		    {
			    SetColumnValue("Station.ID", value);
            }
        }
	      
        [XmlAttribute("StationCode")]
        [Bindable(true)]
        public string StationCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("Station.Code");
		    }
            set 
		    {
			    SetColumnValue("Station.Code", value);
            }
        }
	      
        [XmlAttribute("StationName")]
        [Bindable(true)]
        public string StationName 
	    {
		    get
		    {
			    return GetColumnValue<string>("Station.Name");
		    }
            set 
		    {
			    SetColumnValue("Station.Name", value);
            }
        }
	      
        [XmlAttribute("InstrumentID")]
        [Bindable(true)]
        public Guid InstrumentID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("Instrument.ID");
		    }
            set 
		    {
			    SetColumnValue("Instrument.ID", value);
            }
        }
	      
        [XmlAttribute("InstrumentCode")]
        [Bindable(true)]
        public string InstrumentCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("Instrument.Code");
		    }
            set 
		    {
			    SetColumnValue("Instrument.Code", value);
            }
        }
	      
        [XmlAttribute("InstrumentName")]
        [Bindable(true)]
        public string InstrumentName 
	    {
		    get
		    {
			    return GetColumnValue<string>("Instrument.Name");
		    }
            set 
		    {
			    SetColumnValue("Instrument.Name", value);
            }
        }
	      
        [XmlAttribute("SensorID")]
        [Bindable(true)]
        public Guid SensorID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("Sensor.ID");
		    }
            set 
		    {
			    SetColumnValue("Sensor.ID", value);
            }
        }
	      
        [XmlAttribute("SensorCode")]
        [Bindable(true)]
        public string SensorCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("Sensor.Code");
		    }
            set 
		    {
			    SetColumnValue("Sensor.Code", value);
            }
        }
	      
        [XmlAttribute("SensorName")]
        [Bindable(true)]
        public string SensorName 
	    {
		    get
		    {
			    return GetColumnValue<string>("Sensor.Name");
		    }
            set 
		    {
			    SetColumnValue("Sensor.Name", value);
            }
        }
	      
        [XmlAttribute("PhenomenonID")]
        [Bindable(true)]
        public Guid PhenomenonID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("Phenomenon.ID");
		    }
            set 
		    {
			    SetColumnValue("Phenomenon.ID", value);
            }
        }
	      
        [XmlAttribute("PhenomenonCode")]
        [Bindable(true)]
        public string PhenomenonCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("Phenomenon.Code");
		    }
            set 
		    {
			    SetColumnValue("Phenomenon.Code", value);
            }
        }
	      
        [XmlAttribute("PhenomenonName")]
        [Bindable(true)]
        public string PhenomenonName 
	    {
		    get
		    {
			    return GetColumnValue<string>("Phenomenon.Name");
		    }
            set 
		    {
			    SetColumnValue("Phenomenon.Name", value);
            }
        }
	      
        [XmlAttribute("OfferingID")]
        [Bindable(true)]
        public Guid OfferingID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("Offering.ID");
		    }
            set 
		    {
			    SetColumnValue("Offering.ID", value);
            }
        }
	      
        [XmlAttribute("OfferingCode")]
        [Bindable(true)]
        public string OfferingCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("Offering.Code");
		    }
            set 
		    {
			    SetColumnValue("Offering.Code", value);
            }
        }
	      
        [XmlAttribute("OfferingName")]
        [Bindable(true)]
        public string OfferingName 
	    {
		    get
		    {
			    return GetColumnValue<string>("Offering.Name");
		    }
            set 
		    {
			    SetColumnValue("Offering.Name", value);
            }
        }
	      
        [XmlAttribute("UnitID")]
        [Bindable(true)]
        public Guid UnitID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("Unit.ID");
		    }
            set 
		    {
			    SetColumnValue("Unit.ID", value);
            }
        }
	      
        [XmlAttribute("UnitCode")]
        [Bindable(true)]
        public string UnitCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("Unit.Code");
		    }
            set 
		    {
			    SetColumnValue("Unit.Code", value);
            }
        }
	      
        [XmlAttribute("UnitName")]
        [Bindable(true)]
        public string UnitName 
	    {
		    get
		    {
			    return GetColumnValue<string>("Unit.Name");
		    }
            set 
		    {
			    SetColumnValue("Unit.Name", value);
            }
        }
	      
        [XmlAttribute("UnitSymbol")]
        [Bindable(true)]
        public string UnitSymbol 
	    {
		    get
		    {
			    return GetColumnValue<string>("Unit.Symbol");
		    }
            set 
		    {
			    SetColumnValue("Unit.Symbol", value);
            }
        }
	      
        [XmlAttribute("StatusID")]
        [Bindable(true)]
        public Guid? StatusID 
	    {
		    get
		    {
			    return GetColumnValue<Guid?>("Status.ID");
		    }
            set 
		    {
			    SetColumnValue("Status.ID", value);
            }
        }
	      
        [XmlAttribute("StatusCode")]
        [Bindable(true)]
        public string StatusCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("Status.Code");
		    }
            set 
		    {
			    SetColumnValue("Status.Code", value);
            }
        }
	      
        [XmlAttribute("StatusName")]
        [Bindable(true)]
        public string StatusName 
	    {
		    get
		    {
			    return GetColumnValue<string>("Status.Name");
		    }
            set 
		    {
			    SetColumnValue("Status.Name", value);
            }
        }
	      
        [XmlAttribute("StatusReasonID")]
        [Bindable(true)]
        public Guid? StatusReasonID 
	    {
		    get
		    {
			    return GetColumnValue<Guid?>("StatusReason.ID");
		    }
            set 
		    {
			    SetColumnValue("StatusReason.ID", value);
            }
        }
	      
        [XmlAttribute("StatusReasonCode")]
        [Bindable(true)]
        public string StatusReasonCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("StatusReason.Code");
		    }
            set 
		    {
			    SetColumnValue("StatusReason.Code", value);
            }
        }
	      
        [XmlAttribute("StatusReasonName")]
        [Bindable(true)]
        public string StatusReasonName 
	    {
		    get
		    {
			    return GetColumnValue<string>("StatusReason.Name");
		    }
            set 
		    {
			    SetColumnValue("StatusReason.Name", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Id = @"ID";
            
            public static string ValueDate = @"ValueDate";
            
            public static string ValueDay = @"ValueDay";
            
            public static string ValueYear = @"ValueYear";
            
            public static string ValueDecade = @"ValueDecade";
            
            public static string TextValue = @"TextValue";
            
            public static string RawValue = @"RawValue";
            
            public static string DataValue = @"DataValue";
            
            public static string Comment = @"Comment";
            
            public static string CorrelationID = @"CorrelationID";
            
            public static string Latitude = @"Latitude";
            
            public static string Longitude = @"Longitude";
            
            public static string Elevation = @"Elevation";
            
            public static string ImportBatchID = @"ImportBatch.ID";
            
            public static string ImportBatchCode = @"ImportBatch.Code";
            
            public static string ImportBatchDate = @"ImportBatch.Date";
            
            public static string SiteID = @"Site.ID";
            
            public static string SiteCode = @"Site.Code";
            
            public static string SiteName = @"Site.Name";
            
            public static string StationID = @"Station.ID";
            
            public static string StationCode = @"Station.Code";
            
            public static string StationName = @"Station.Name";
            
            public static string InstrumentID = @"Instrument.ID";
            
            public static string InstrumentCode = @"Instrument.Code";
            
            public static string InstrumentName = @"Instrument.Name";
            
            public static string SensorID = @"Sensor.ID";
            
            public static string SensorCode = @"Sensor.Code";
            
            public static string SensorName = @"Sensor.Name";
            
            public static string PhenomenonID = @"Phenomenon.ID";
            
            public static string PhenomenonCode = @"Phenomenon.Code";
            
            public static string PhenomenonName = @"Phenomenon.Name";
            
            public static string OfferingID = @"Offering.ID";
            
            public static string OfferingCode = @"Offering.Code";
            
            public static string OfferingName = @"Offering.Name";
            
            public static string UnitID = @"Unit.ID";
            
            public static string UnitCode = @"Unit.Code";
            
            public static string UnitName = @"Unit.Name";
            
            public static string UnitSymbol = @"Unit.Symbol";
            
            public static string StatusID = @"Status.ID";
            
            public static string StatusCode = @"Status.Code";
            
            public static string StatusName = @"Status.Name";
            
            public static string StatusReasonID = @"StatusReason.ID";
            
            public static string StatusReasonCode = @"StatusReason.Code";
            
            public static string StatusReasonName = @"StatusReason.Name";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
