using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SAEON.Observations.Data{
    /// <summary>
    /// Strongly-typed collection for the VDataSourceRole class.
    /// </summary>
    [Serializable]
    public partial class VDataSourceRoleCollection : ReadOnlyList<VDataSourceRole, VDataSourceRoleCollection>
    {        
        public VDataSourceRoleCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the vDataSourceRole view.
    /// </summary>
    [Serializable]
    public partial class VDataSourceRole : ReadOnlyRecord<VDataSourceRole>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("vDataSourceRole", TableType.View, DataService.GetInstance("ObservationsDB"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
                colvarId.ColumnName = "ID";
                colvarId.DataType = DbType.Guid;
                colvarId.MaxLength = 0;
                colvarId.AutoIncrement = false;
                colvarId.IsNullable = false;
                colvarId.IsPrimaryKey = false;
                colvarId.IsForeignKey = false;
                colvarId.IsReadOnly = false;
                
                schema.Columns.Add(colvarId);
                
                TableSchema.TableColumn colvarDataSourceID = new TableSchema.TableColumn(schema);
                colvarDataSourceID.ColumnName = "DataSourceID";
                colvarDataSourceID.DataType = DbType.Guid;
                colvarDataSourceID.MaxLength = 0;
                colvarDataSourceID.AutoIncrement = false;
                colvarDataSourceID.IsNullable = false;
                colvarDataSourceID.IsPrimaryKey = false;
                colvarDataSourceID.IsForeignKey = false;
                colvarDataSourceID.IsReadOnly = false;
                
                schema.Columns.Add(colvarDataSourceID);
                
                TableSchema.TableColumn colvarRoleId = new TableSchema.TableColumn(schema);
                colvarRoleId.ColumnName = "RoleId";
                colvarRoleId.DataType = DbType.Guid;
                colvarRoleId.MaxLength = 0;
                colvarRoleId.AutoIncrement = false;
                colvarRoleId.IsNullable = false;
                colvarRoleId.IsPrimaryKey = false;
                colvarRoleId.IsForeignKey = false;
                colvarRoleId.IsReadOnly = false;
                
                schema.Columns.Add(colvarRoleId);
                
                TableSchema.TableColumn colvarDateStart = new TableSchema.TableColumn(schema);
                colvarDateStart.ColumnName = "DateStart";
                colvarDateStart.DataType = DbType.DateTime;
                colvarDateStart.MaxLength = 0;
                colvarDateStart.AutoIncrement = false;
                colvarDateStart.IsNullable = true;
                colvarDateStart.IsPrimaryKey = false;
                colvarDateStart.IsForeignKey = false;
                colvarDateStart.IsReadOnly = false;
                
                schema.Columns.Add(colvarDateStart);
                
                TableSchema.TableColumn colvarDateEnd = new TableSchema.TableColumn(schema);
                colvarDateEnd.ColumnName = "DateEnd";
                colvarDateEnd.DataType = DbType.DateTime;
                colvarDateEnd.MaxLength = 0;
                colvarDateEnd.AutoIncrement = false;
                colvarDateEnd.IsNullable = true;
                colvarDateEnd.IsPrimaryKey = false;
                colvarDateEnd.IsForeignKey = false;
                colvarDateEnd.IsReadOnly = false;
                
                schema.Columns.Add(colvarDateEnd);
                
                TableSchema.TableColumn colvarRoleName = new TableSchema.TableColumn(schema);
                colvarRoleName.ColumnName = "RoleName";
                colvarRoleName.DataType = DbType.AnsiString;
                colvarRoleName.MaxLength = 256;
                colvarRoleName.AutoIncrement = false;
                colvarRoleName.IsNullable = true;
                colvarRoleName.IsPrimaryKey = false;
                colvarRoleName.IsForeignKey = false;
                colvarRoleName.IsReadOnly = false;
                
                schema.Columns.Add(colvarRoleName);
                
                TableSchema.TableColumn colvarIsRoleReadOnly = new TableSchema.TableColumn(schema);
                colvarIsRoleReadOnly.ColumnName = "IsRoleReadOnly";
                colvarIsRoleReadOnly.DataType = DbType.Boolean;
                colvarIsRoleReadOnly.MaxLength = 0;
                colvarIsRoleReadOnly.AutoIncrement = false;
                colvarIsRoleReadOnly.IsNullable = true;
                colvarIsRoleReadOnly.IsPrimaryKey = false;
                colvarIsRoleReadOnly.IsForeignKey = false;
                colvarIsRoleReadOnly.IsReadOnly = false;
                
                schema.Columns.Add(colvarIsRoleReadOnly);
                
                TableSchema.TableColumn colvarUserId = new TableSchema.TableColumn(schema);
                colvarUserId.ColumnName = "UserId";
                colvarUserId.DataType = DbType.Guid;
                colvarUserId.MaxLength = 0;
                colvarUserId.AutoIncrement = false;
                colvarUserId.IsNullable = true;
                colvarUserId.IsPrimaryKey = false;
                colvarUserId.IsForeignKey = false;
                colvarUserId.IsReadOnly = false;
                
                schema.Columns.Add(colvarUserId);
                
                TableSchema.TableColumn colvarAddedAt = new TableSchema.TableColumn(schema);
                colvarAddedAt.ColumnName = "AddedAt";
                colvarAddedAt.DataType = DbType.DateTime;
                colvarAddedAt.MaxLength = 0;
                colvarAddedAt.AutoIncrement = false;
                colvarAddedAt.IsNullable = true;
                colvarAddedAt.IsPrimaryKey = false;
                colvarAddedAt.IsForeignKey = false;
                colvarAddedAt.IsReadOnly = false;
                
                schema.Columns.Add(colvarAddedAt);
                
                TableSchema.TableColumn colvarUpdatedAt = new TableSchema.TableColumn(schema);
                colvarUpdatedAt.ColumnName = "UpdatedAt";
                colvarUpdatedAt.DataType = DbType.DateTime;
                colvarUpdatedAt.MaxLength = 0;
                colvarUpdatedAt.AutoIncrement = false;
                colvarUpdatedAt.IsNullable = true;
                colvarUpdatedAt.IsPrimaryKey = false;
                colvarUpdatedAt.IsForeignKey = false;
                colvarUpdatedAt.IsReadOnly = false;
                
                schema.Columns.Add(colvarUpdatedAt);
                
                TableSchema.TableColumn colvarDataSourceCode = new TableSchema.TableColumn(schema);
                colvarDataSourceCode.ColumnName = "DataSourceCode";
                colvarDataSourceCode.DataType = DbType.AnsiString;
                colvarDataSourceCode.MaxLength = 50;
                colvarDataSourceCode.AutoIncrement = false;
                colvarDataSourceCode.IsNullable = false;
                colvarDataSourceCode.IsPrimaryKey = false;
                colvarDataSourceCode.IsForeignKey = false;
                colvarDataSourceCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarDataSourceCode);
                
                TableSchema.TableColumn colvarDataSourceName = new TableSchema.TableColumn(schema);
                colvarDataSourceName.ColumnName = "DataSourceName";
                colvarDataSourceName.DataType = DbType.AnsiString;
                colvarDataSourceName.MaxLength = 150;
                colvarDataSourceName.AutoIncrement = false;
                colvarDataSourceName.IsNullable = false;
                colvarDataSourceName.IsPrimaryKey = false;
                colvarDataSourceName.IsForeignKey = false;
                colvarDataSourceName.IsReadOnly = false;
                
                schema.Columns.Add(colvarDataSourceName);
                
                TableSchema.TableColumn colvarActualRoleName = new TableSchema.TableColumn(schema);
                colvarActualRoleName.ColumnName = "ActualRoleName";
                colvarActualRoleName.DataType = DbType.String;
                colvarActualRoleName.MaxLength = 256;
                colvarActualRoleName.AutoIncrement = false;
                colvarActualRoleName.IsNullable = false;
                colvarActualRoleName.IsPrimaryKey = false;
                colvarActualRoleName.IsForeignKey = false;
                colvarActualRoleName.IsReadOnly = false;
                
                schema.Columns.Add(colvarActualRoleName);
                
                TableSchema.TableColumn colvarRoleDescription = new TableSchema.TableColumn(schema);
                colvarRoleDescription.ColumnName = "RoleDescription";
                colvarRoleDescription.DataType = DbType.String;
                colvarRoleDescription.MaxLength = 256;
                colvarRoleDescription.AutoIncrement = false;
                colvarRoleDescription.IsNullable = true;
                colvarRoleDescription.IsPrimaryKey = false;
                colvarRoleDescription.IsForeignKey = false;
                colvarRoleDescription.IsReadOnly = false;
                
                schema.Columns.Add(colvarRoleDescription);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ObservationsDB"].AddSchema("vDataSourceRole",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VDataSourceRole()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VDataSourceRole(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VDataSourceRole(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VDataSourceRole(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Id")]
        [Bindable(true)]
        public Guid Id 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("ID");
		    }
            set 
		    {
			    SetColumnValue("ID", value);
            }
        }
	      
        [XmlAttribute("DataSourceID")]
        [Bindable(true)]
        public Guid DataSourceID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("DataSourceID");
		    }
            set 
		    {
			    SetColumnValue("DataSourceID", value);
            }
        }
	      
        [XmlAttribute("RoleId")]
        [Bindable(true)]
        public Guid RoleId 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("RoleId");
		    }
            set 
		    {
			    SetColumnValue("RoleId", value);
            }
        }
	      
        [XmlAttribute("DateStart")]
        [Bindable(true)]
        public DateTime? DateStart 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("DateStart");
		    }
            set 
		    {
			    SetColumnValue("DateStart", value);
            }
        }
	      
        [XmlAttribute("DateEnd")]
        [Bindable(true)]
        public DateTime? DateEnd 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("DateEnd");
		    }
            set 
		    {
			    SetColumnValue("DateEnd", value);
            }
        }
	      
        [XmlAttribute("RoleName")]
        [Bindable(true)]
        public string RoleName 
	    {
		    get
		    {
			    return GetColumnValue<string>("RoleName");
		    }
            set 
		    {
			    SetColumnValue("RoleName", value);
            }
        }
	      
        [XmlAttribute("IsRoleReadOnly")]
        [Bindable(true)]
        public bool? IsRoleReadOnly 
	    {
		    get
		    {
			    return GetColumnValue<bool?>("IsRoleReadOnly");
		    }
            set 
		    {
			    SetColumnValue("IsRoleReadOnly", value);
            }
        }
	      
        [XmlAttribute("UserId")]
        [Bindable(true)]
        public Guid? UserId 
	    {
		    get
		    {
			    return GetColumnValue<Guid?>("UserId");
		    }
            set 
		    {
			    SetColumnValue("UserId", value);
            }
        }
	      
        [XmlAttribute("AddedAt")]
        [Bindable(true)]
        public DateTime? AddedAt 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("AddedAt");
		    }
            set 
		    {
			    SetColumnValue("AddedAt", value);
            }
        }
	      
        [XmlAttribute("UpdatedAt")]
        [Bindable(true)]
        public DateTime? UpdatedAt 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("UpdatedAt");
		    }
            set 
		    {
			    SetColumnValue("UpdatedAt", value);
            }
        }
	      
        [XmlAttribute("DataSourceCode")]
        [Bindable(true)]
        public string DataSourceCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("DataSourceCode");
		    }
            set 
		    {
			    SetColumnValue("DataSourceCode", value);
            }
        }
	      
        [XmlAttribute("DataSourceName")]
        [Bindable(true)]
        public string DataSourceName 
	    {
		    get
		    {
			    return GetColumnValue<string>("DataSourceName");
		    }
            set 
		    {
			    SetColumnValue("DataSourceName", value);
            }
        }
	      
        [XmlAttribute("ActualRoleName")]
        [Bindable(true)]
        public string ActualRoleName 
	    {
		    get
		    {
			    return GetColumnValue<string>("ActualRoleName");
		    }
            set 
		    {
			    SetColumnValue("ActualRoleName", value);
            }
        }
	      
        [XmlAttribute("RoleDescription")]
        [Bindable(true)]
        public string RoleDescription 
	    {
		    get
		    {
			    return GetColumnValue<string>("RoleDescription");
		    }
            set 
		    {
			    SetColumnValue("RoleDescription", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Id = @"ID";
            
            public static string DataSourceID = @"DataSourceID";
            
            public static string RoleId = @"RoleId";
            
            public static string DateStart = @"DateStart";
            
            public static string DateEnd = @"DateEnd";
            
            public static string RoleName = @"RoleName";
            
            public static string IsRoleReadOnly = @"IsRoleReadOnly";
            
            public static string UserId = @"UserId";
            
            public static string AddedAt = @"AddedAt";
            
            public static string UpdatedAt = @"UpdatedAt";
            
            public static string DataSourceCode = @"DataSourceCode";
            
            public static string DataSourceName = @"DataSourceName";
            
            public static string ActualRoleName = @"ActualRoleName";
            
            public static string RoleDescription = @"RoleDescription";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
