using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SAEON.Observations.Data{
    /// <summary>
    /// Strongly-typed collection for the VLocation class.
    /// </summary>
    [Serializable]
    public partial class VLocationCollection : ReadOnlyList<VLocation, VLocationCollection>
    {        
        public VLocationCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the vLocations view.
    /// </summary>
    [Serializable]
    public partial class VLocation : ReadOnlyRecord<VLocation>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("vLocations", TableType.View, DataService.GetInstance("ObservationsDB"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarOrganisationID = new TableSchema.TableColumn(schema);
                colvarOrganisationID.ColumnName = "OrganisationID";
                colvarOrganisationID.DataType = DbType.Guid;
                colvarOrganisationID.MaxLength = 0;
                colvarOrganisationID.AutoIncrement = false;
                colvarOrganisationID.IsNullable = false;
                colvarOrganisationID.IsPrimaryKey = false;
                colvarOrganisationID.IsForeignKey = false;
                colvarOrganisationID.IsReadOnly = false;
                
                schema.Columns.Add(colvarOrganisationID);
                
                TableSchema.TableColumn colvarSiteID = new TableSchema.TableColumn(schema);
                colvarSiteID.ColumnName = "SiteID";
                colvarSiteID.DataType = DbType.Guid;
                colvarSiteID.MaxLength = 0;
                colvarSiteID.AutoIncrement = false;
                colvarSiteID.IsNullable = false;
                colvarSiteID.IsPrimaryKey = false;
                colvarSiteID.IsForeignKey = false;
                colvarSiteID.IsReadOnly = false;
                
                schema.Columns.Add(colvarSiteID);
                
                TableSchema.TableColumn colvarStationID = new TableSchema.TableColumn(schema);
                colvarStationID.ColumnName = "StationID";
                colvarStationID.DataType = DbType.Guid;
                colvarStationID.MaxLength = 0;
                colvarStationID.AutoIncrement = false;
                colvarStationID.IsNullable = false;
                colvarStationID.IsPrimaryKey = false;
                colvarStationID.IsForeignKey = false;
                colvarStationID.IsReadOnly = false;
                
                schema.Columns.Add(colvarStationID);
                
                TableSchema.TableColumn colvarStationName = new TableSchema.TableColumn(schema);
                colvarStationName.ColumnName = "StationName";
                colvarStationName.DataType = DbType.AnsiString;
                colvarStationName.MaxLength = 150;
                colvarStationName.AutoIncrement = false;
                colvarStationName.IsNullable = false;
                colvarStationName.IsPrimaryKey = false;
                colvarStationName.IsForeignKey = false;
                colvarStationName.IsReadOnly = false;
                
                schema.Columns.Add(colvarStationName);
                
                TableSchema.TableColumn colvarLatitude = new TableSchema.TableColumn(schema);
                colvarLatitude.ColumnName = "Latitude";
                colvarLatitude.DataType = DbType.Double;
                colvarLatitude.MaxLength = 0;
                colvarLatitude.AutoIncrement = false;
                colvarLatitude.IsNullable = true;
                colvarLatitude.IsPrimaryKey = false;
                colvarLatitude.IsForeignKey = false;
                colvarLatitude.IsReadOnly = false;
                
                schema.Columns.Add(colvarLatitude);
                
                TableSchema.TableColumn colvarLongitude = new TableSchema.TableColumn(schema);
                colvarLongitude.ColumnName = "Longitude";
                colvarLongitude.DataType = DbType.Double;
                colvarLongitude.MaxLength = 0;
                colvarLongitude.AutoIncrement = false;
                colvarLongitude.IsNullable = true;
                colvarLongitude.IsPrimaryKey = false;
                colvarLongitude.IsForeignKey = false;
                colvarLongitude.IsReadOnly = false;
                
                schema.Columns.Add(colvarLongitude);
                
                TableSchema.TableColumn colvarElevation = new TableSchema.TableColumn(schema);
                colvarElevation.ColumnName = "Elevation";
                colvarElevation.DataType = DbType.Double;
                colvarElevation.MaxLength = 0;
                colvarElevation.AutoIncrement = false;
                colvarElevation.IsNullable = true;
                colvarElevation.IsPrimaryKey = false;
                colvarElevation.IsForeignKey = false;
                colvarElevation.IsReadOnly = false;
                
                schema.Columns.Add(colvarElevation);
                
                TableSchema.TableColumn colvarUrl = new TableSchema.TableColumn(schema);
                colvarUrl.ColumnName = "Url";
                colvarUrl.DataType = DbType.AnsiString;
                colvarUrl.MaxLength = 250;
                colvarUrl.AutoIncrement = false;
                colvarUrl.IsNullable = true;
                colvarUrl.IsPrimaryKey = false;
                colvarUrl.IsForeignKey = false;
                colvarUrl.IsReadOnly = false;
                
                schema.Columns.Add(colvarUrl);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ObservationsDB"].AddSchema("vLocations",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VLocation()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VLocation(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VLocation(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VLocation(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("OrganisationID")]
        [Bindable(true)]
        public Guid OrganisationID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("OrganisationID");
		    }
            set 
		    {
			    SetColumnValue("OrganisationID", value);
            }
        }
	      
        [XmlAttribute("SiteID")]
        [Bindable(true)]
        public Guid SiteID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("SiteID");
		    }
            set 
		    {
			    SetColumnValue("SiteID", value);
            }
        }
	      
        [XmlAttribute("StationID")]
        [Bindable(true)]
        public Guid StationID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("StationID");
		    }
            set 
		    {
			    SetColumnValue("StationID", value);
            }
        }
	      
        [XmlAttribute("StationName")]
        [Bindable(true)]
        public string StationName 
	    {
		    get
		    {
			    return GetColumnValue<string>("StationName");
		    }
            set 
		    {
			    SetColumnValue("StationName", value);
            }
        }
	      
        [XmlAttribute("Latitude")]
        [Bindable(true)]
        public double? Latitude 
	    {
		    get
		    {
			    return GetColumnValue<double?>("Latitude");
		    }
            set 
		    {
			    SetColumnValue("Latitude", value);
            }
        }
	      
        [XmlAttribute("Longitude")]
        [Bindable(true)]
        public double? Longitude 
	    {
		    get
		    {
			    return GetColumnValue<double?>("Longitude");
		    }
            set 
		    {
			    SetColumnValue("Longitude", value);
            }
        }
	      
        [XmlAttribute("Elevation")]
        [Bindable(true)]
        public double? Elevation 
	    {
		    get
		    {
			    return GetColumnValue<double?>("Elevation");
		    }
            set 
		    {
			    SetColumnValue("Elevation", value);
            }
        }
	      
        [XmlAttribute("Url")]
        [Bindable(true)]
        public string Url 
	    {
		    get
		    {
			    return GetColumnValue<string>("Url");
		    }
            set 
		    {
			    SetColumnValue("Url", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string OrganisationID = @"OrganisationID";
            
            public static string SiteID = @"SiteID";
            
            public static string StationID = @"StationID";
            
            public static string StationName = @"StationName";
            
            public static string Latitude = @"Latitude";
            
            public static string Longitude = @"Longitude";
            
            public static string Elevation = @"Elevation";
            
            public static string Url = @"Url";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
