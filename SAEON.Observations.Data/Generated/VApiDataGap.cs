using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SAEON.Observations.Data{
    /// <summary>
    /// Strongly-typed collection for the VApiDataGap class.
    /// </summary>
    [Serializable]
    public partial class VApiDataGapCollection : ReadOnlyList<VApiDataGap, VApiDataGapCollection>
    {        
        public VApiDataGapCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the vApiDataGaps view.
    /// </summary>
    [Serializable]
    public partial class VApiDataGap : ReadOnlyRecord<VApiDataGap>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("vApiDataGaps", TableType.View, DataService.GetInstance("ObservationsDB"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
                colvarId.ColumnName = "ID";
                colvarId.DataType = DbType.Int32;
                colvarId.MaxLength = 0;
                colvarId.AutoIncrement = false;
                colvarId.IsNullable = false;
                colvarId.IsPrimaryKey = false;
                colvarId.IsForeignKey = false;
                colvarId.IsReadOnly = false;
                
                schema.Columns.Add(colvarId);
                
                TableSchema.TableColumn colvarSiteName = new TableSchema.TableColumn(schema);
                colvarSiteName.ColumnName = "SiteName";
                colvarSiteName.DataType = DbType.AnsiString;
                colvarSiteName.MaxLength = 150;
                colvarSiteName.AutoIncrement = false;
                colvarSiteName.IsNullable = false;
                colvarSiteName.IsPrimaryKey = false;
                colvarSiteName.IsForeignKey = false;
                colvarSiteName.IsReadOnly = false;
                
                schema.Columns.Add(colvarSiteName);
                
                TableSchema.TableColumn colvarStationID = new TableSchema.TableColumn(schema);
                colvarStationID.ColumnName = "StationID";
                colvarStationID.DataType = DbType.Guid;
                colvarStationID.MaxLength = 0;
                colvarStationID.AutoIncrement = false;
                colvarStationID.IsNullable = false;
                colvarStationID.IsPrimaryKey = false;
                colvarStationID.IsForeignKey = false;
                colvarStationID.IsReadOnly = false;
                
                schema.Columns.Add(colvarStationID);
                
                TableSchema.TableColumn colvarStationName = new TableSchema.TableColumn(schema);
                colvarStationName.ColumnName = "StationName";
                colvarStationName.DataType = DbType.AnsiString;
                colvarStationName.MaxLength = 150;
                colvarStationName.AutoIncrement = false;
                colvarStationName.IsNullable = false;
                colvarStationName.IsPrimaryKey = false;
                colvarStationName.IsForeignKey = false;
                colvarStationName.IsReadOnly = false;
                
                schema.Columns.Add(colvarStationName);
                
                TableSchema.TableColumn colvarPhenomenonID = new TableSchema.TableColumn(schema);
                colvarPhenomenonID.ColumnName = "PhenomenonID";
                colvarPhenomenonID.DataType = DbType.Guid;
                colvarPhenomenonID.MaxLength = 0;
                colvarPhenomenonID.AutoIncrement = false;
                colvarPhenomenonID.IsNullable = false;
                colvarPhenomenonID.IsPrimaryKey = false;
                colvarPhenomenonID.IsForeignKey = false;
                colvarPhenomenonID.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhenomenonID);
                
                TableSchema.TableColumn colvarPhenomenonCode = new TableSchema.TableColumn(schema);
                colvarPhenomenonCode.ColumnName = "PhenomenonCode";
                colvarPhenomenonCode.DataType = DbType.AnsiString;
                colvarPhenomenonCode.MaxLength = 50;
                colvarPhenomenonCode.AutoIncrement = false;
                colvarPhenomenonCode.IsNullable = false;
                colvarPhenomenonCode.IsPrimaryKey = false;
                colvarPhenomenonCode.IsForeignKey = false;
                colvarPhenomenonCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhenomenonCode);
                
                TableSchema.TableColumn colvarPhenomenonName = new TableSchema.TableColumn(schema);
                colvarPhenomenonName.ColumnName = "PhenomenonName";
                colvarPhenomenonName.DataType = DbType.AnsiString;
                colvarPhenomenonName.MaxLength = 150;
                colvarPhenomenonName.AutoIncrement = false;
                colvarPhenomenonName.IsNullable = false;
                colvarPhenomenonName.IsPrimaryKey = false;
                colvarPhenomenonName.IsForeignKey = false;
                colvarPhenomenonName.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhenomenonName);
                
                TableSchema.TableColumn colvarPhenomenonOfferingID = new TableSchema.TableColumn(schema);
                colvarPhenomenonOfferingID.ColumnName = "PhenomenonOfferingID";
                colvarPhenomenonOfferingID.DataType = DbType.Guid;
                colvarPhenomenonOfferingID.MaxLength = 0;
                colvarPhenomenonOfferingID.AutoIncrement = false;
                colvarPhenomenonOfferingID.IsNullable = false;
                colvarPhenomenonOfferingID.IsPrimaryKey = false;
                colvarPhenomenonOfferingID.IsForeignKey = false;
                colvarPhenomenonOfferingID.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhenomenonOfferingID);
                
                TableSchema.TableColumn colvarOfferingID = new TableSchema.TableColumn(schema);
                colvarOfferingID.ColumnName = "OfferingID";
                colvarOfferingID.DataType = DbType.Guid;
                colvarOfferingID.MaxLength = 0;
                colvarOfferingID.AutoIncrement = false;
                colvarOfferingID.IsNullable = false;
                colvarOfferingID.IsPrimaryKey = false;
                colvarOfferingID.IsForeignKey = false;
                colvarOfferingID.IsReadOnly = false;
                
                schema.Columns.Add(colvarOfferingID);
                
                TableSchema.TableColumn colvarOfferingCode = new TableSchema.TableColumn(schema);
                colvarOfferingCode.ColumnName = "OfferingCode";
                colvarOfferingCode.DataType = DbType.AnsiString;
                colvarOfferingCode.MaxLength = 50;
                colvarOfferingCode.AutoIncrement = false;
                colvarOfferingCode.IsNullable = false;
                colvarOfferingCode.IsPrimaryKey = false;
                colvarOfferingCode.IsForeignKey = false;
                colvarOfferingCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarOfferingCode);
                
                TableSchema.TableColumn colvarOfferingName = new TableSchema.TableColumn(schema);
                colvarOfferingName.ColumnName = "OfferingName";
                colvarOfferingName.DataType = DbType.AnsiString;
                colvarOfferingName.MaxLength = 150;
                colvarOfferingName.AutoIncrement = false;
                colvarOfferingName.IsNullable = false;
                colvarOfferingName.IsPrimaryKey = false;
                colvarOfferingName.IsForeignKey = false;
                colvarOfferingName.IsReadOnly = false;
                
                schema.Columns.Add(colvarOfferingName);
                
                TableSchema.TableColumn colvarPhenomenonUnitOfMeasureID = new TableSchema.TableColumn(schema);
                colvarPhenomenonUnitOfMeasureID.ColumnName = "PhenomenonUnitOfMeasureID";
                colvarPhenomenonUnitOfMeasureID.DataType = DbType.Guid;
                colvarPhenomenonUnitOfMeasureID.MaxLength = 0;
                colvarPhenomenonUnitOfMeasureID.AutoIncrement = false;
                colvarPhenomenonUnitOfMeasureID.IsNullable = false;
                colvarPhenomenonUnitOfMeasureID.IsPrimaryKey = false;
                colvarPhenomenonUnitOfMeasureID.IsForeignKey = false;
                colvarPhenomenonUnitOfMeasureID.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhenomenonUnitOfMeasureID);
                
                TableSchema.TableColumn colvarUnitOfMeasureID = new TableSchema.TableColumn(schema);
                colvarUnitOfMeasureID.ColumnName = "UnitOfMeasureID";
                colvarUnitOfMeasureID.DataType = DbType.Guid;
                colvarUnitOfMeasureID.MaxLength = 0;
                colvarUnitOfMeasureID.AutoIncrement = false;
                colvarUnitOfMeasureID.IsNullable = false;
                colvarUnitOfMeasureID.IsPrimaryKey = false;
                colvarUnitOfMeasureID.IsForeignKey = false;
                colvarUnitOfMeasureID.IsReadOnly = false;
                
                schema.Columns.Add(colvarUnitOfMeasureID);
                
                TableSchema.TableColumn colvarUnitOfMeasureCode = new TableSchema.TableColumn(schema);
                colvarUnitOfMeasureCode.ColumnName = "UnitOfMeasureCode";
                colvarUnitOfMeasureCode.DataType = DbType.AnsiString;
                colvarUnitOfMeasureCode.MaxLength = 50;
                colvarUnitOfMeasureCode.AutoIncrement = false;
                colvarUnitOfMeasureCode.IsNullable = false;
                colvarUnitOfMeasureCode.IsPrimaryKey = false;
                colvarUnitOfMeasureCode.IsForeignKey = false;
                colvarUnitOfMeasureCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarUnitOfMeasureCode);
                
                TableSchema.TableColumn colvarUnitOfMeasureUnit = new TableSchema.TableColumn(schema);
                colvarUnitOfMeasureUnit.ColumnName = "UnitOfMeasureUnit";
                colvarUnitOfMeasureUnit.DataType = DbType.AnsiString;
                colvarUnitOfMeasureUnit.MaxLength = 100;
                colvarUnitOfMeasureUnit.AutoIncrement = false;
                colvarUnitOfMeasureUnit.IsNullable = false;
                colvarUnitOfMeasureUnit.IsPrimaryKey = false;
                colvarUnitOfMeasureUnit.IsForeignKey = false;
                colvarUnitOfMeasureUnit.IsReadOnly = false;
                
                schema.Columns.Add(colvarUnitOfMeasureUnit);
                
                TableSchema.TableColumn colvarUnitOfMeasureSymbol = new TableSchema.TableColumn(schema);
                colvarUnitOfMeasureSymbol.ColumnName = "UnitOfMeasureSymbol";
                colvarUnitOfMeasureSymbol.DataType = DbType.AnsiString;
                colvarUnitOfMeasureSymbol.MaxLength = 20;
                colvarUnitOfMeasureSymbol.AutoIncrement = false;
                colvarUnitOfMeasureSymbol.IsNullable = false;
                colvarUnitOfMeasureSymbol.IsPrimaryKey = false;
                colvarUnitOfMeasureSymbol.IsForeignKey = false;
                colvarUnitOfMeasureSymbol.IsReadOnly = false;
                
                schema.Columns.Add(colvarUnitOfMeasureSymbol);
                
                TableSchema.TableColumn colvarFeatureCaption = new TableSchema.TableColumn(schema);
                colvarFeatureCaption.ColumnName = "FeatureCaption";
                colvarFeatureCaption.DataType = DbType.AnsiString;
                colvarFeatureCaption.MaxLength = 324;
                colvarFeatureCaption.AutoIncrement = false;
                colvarFeatureCaption.IsNullable = false;
                colvarFeatureCaption.IsPrimaryKey = false;
                colvarFeatureCaption.IsForeignKey = false;
                colvarFeatureCaption.IsReadOnly = false;
                
                schema.Columns.Add(colvarFeatureCaption);
                
                TableSchema.TableColumn colvarFeatureName = new TableSchema.TableColumn(schema);
                colvarFeatureName.ColumnName = "FeatureName";
                colvarFeatureName.DataType = DbType.AnsiString;
                colvarFeatureName.MaxLength = 8000;
                colvarFeatureName.AutoIncrement = false;
                colvarFeatureName.IsNullable = true;
                colvarFeatureName.IsPrimaryKey = false;
                colvarFeatureName.IsForeignKey = false;
                colvarFeatureName.IsReadOnly = false;
                
                schema.Columns.Add(colvarFeatureName);
                
                TableSchema.TableColumn colvarValueDate = new TableSchema.TableColumn(schema);
                colvarValueDate.ColumnName = "ValueDate";
                colvarValueDate.DataType = DbType.DateTime;
                colvarValueDate.MaxLength = 0;
                colvarValueDate.AutoIncrement = false;
                colvarValueDate.IsNullable = false;
                colvarValueDate.IsPrimaryKey = false;
                colvarValueDate.IsForeignKey = false;
                colvarValueDate.IsReadOnly = false;
                
                schema.Columns.Add(colvarValueDate);
                
                TableSchema.TableColumn colvarValueDay = new TableSchema.TableColumn(schema);
                colvarValueDay.ColumnName = "ValueDay";
                colvarValueDay.DataType = DbType.Date;
                colvarValueDay.MaxLength = 0;
                colvarValueDay.AutoIncrement = false;
                colvarValueDay.IsNullable = true;
                colvarValueDay.IsPrimaryKey = false;
                colvarValueDay.IsForeignKey = false;
                colvarValueDay.IsReadOnly = false;
                
                schema.Columns.Add(colvarValueDay);
                
                TableSchema.TableColumn colvarValueX = new TableSchema.TableColumn(schema);
                colvarValueX.ColumnName = "Value";
                colvarValueX.DataType = DbType.Double;
                colvarValueX.MaxLength = 0;
                colvarValueX.AutoIncrement = false;
                colvarValueX.IsNullable = true;
                colvarValueX.IsPrimaryKey = false;
                colvarValueX.IsForeignKey = false;
                colvarValueX.IsReadOnly = false;
                
                schema.Columns.Add(colvarValueX);
                
                TableSchema.TableColumn colvarStatus = new TableSchema.TableColumn(schema);
                colvarStatus.ColumnName = "Status";
                colvarStatus.DataType = DbType.AnsiString;
                colvarStatus.MaxLength = 150;
                colvarStatus.AutoIncrement = false;
                colvarStatus.IsNullable = true;
                colvarStatus.IsPrimaryKey = false;
                colvarStatus.IsForeignKey = false;
                colvarStatus.IsReadOnly = false;
                
                schema.Columns.Add(colvarStatus);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ObservationsDB"].AddSchema("vApiDataGaps",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VApiDataGap()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VApiDataGap(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VApiDataGap(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VApiDataGap(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Id")]
        [Bindable(true)]
        public int Id 
	    {
		    get
		    {
			    return GetColumnValue<int>("ID");
		    }
            set 
		    {
			    SetColumnValue("ID", value);
            }
        }
	      
        [XmlAttribute("SiteName")]
        [Bindable(true)]
        public string SiteName 
	    {
		    get
		    {
			    return GetColumnValue<string>("SiteName");
		    }
            set 
		    {
			    SetColumnValue("SiteName", value);
            }
        }
	      
        [XmlAttribute("StationID")]
        [Bindable(true)]
        public Guid StationID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("StationID");
		    }
            set 
		    {
			    SetColumnValue("StationID", value);
            }
        }
	      
        [XmlAttribute("StationName")]
        [Bindable(true)]
        public string StationName 
	    {
		    get
		    {
			    return GetColumnValue<string>("StationName");
		    }
            set 
		    {
			    SetColumnValue("StationName", value);
            }
        }
	      
        [XmlAttribute("PhenomenonID")]
        [Bindable(true)]
        public Guid PhenomenonID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("PhenomenonID");
		    }
            set 
		    {
			    SetColumnValue("PhenomenonID", value);
            }
        }
	      
        [XmlAttribute("PhenomenonCode")]
        [Bindable(true)]
        public string PhenomenonCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("PhenomenonCode");
		    }
            set 
		    {
			    SetColumnValue("PhenomenonCode", value);
            }
        }
	      
        [XmlAttribute("PhenomenonName")]
        [Bindable(true)]
        public string PhenomenonName 
	    {
		    get
		    {
			    return GetColumnValue<string>("PhenomenonName");
		    }
            set 
		    {
			    SetColumnValue("PhenomenonName", value);
            }
        }
	      
        [XmlAttribute("PhenomenonOfferingID")]
        [Bindable(true)]
        public Guid PhenomenonOfferingID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("PhenomenonOfferingID");
		    }
            set 
		    {
			    SetColumnValue("PhenomenonOfferingID", value);
            }
        }
	      
        [XmlAttribute("OfferingID")]
        [Bindable(true)]
        public Guid OfferingID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("OfferingID");
		    }
            set 
		    {
			    SetColumnValue("OfferingID", value);
            }
        }
	      
        [XmlAttribute("OfferingCode")]
        [Bindable(true)]
        public string OfferingCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("OfferingCode");
		    }
            set 
		    {
			    SetColumnValue("OfferingCode", value);
            }
        }
	      
        [XmlAttribute("OfferingName")]
        [Bindable(true)]
        public string OfferingName 
	    {
		    get
		    {
			    return GetColumnValue<string>("OfferingName");
		    }
            set 
		    {
			    SetColumnValue("OfferingName", value);
            }
        }
	      
        [XmlAttribute("PhenomenonUnitOfMeasureID")]
        [Bindable(true)]
        public Guid PhenomenonUnitOfMeasureID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("PhenomenonUnitOfMeasureID");
		    }
            set 
		    {
			    SetColumnValue("PhenomenonUnitOfMeasureID", value);
            }
        }
	      
        [XmlAttribute("UnitOfMeasureID")]
        [Bindable(true)]
        public Guid UnitOfMeasureID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("UnitOfMeasureID");
		    }
            set 
		    {
			    SetColumnValue("UnitOfMeasureID", value);
            }
        }
	      
        [XmlAttribute("UnitOfMeasureCode")]
        [Bindable(true)]
        public string UnitOfMeasureCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("UnitOfMeasureCode");
		    }
            set 
		    {
			    SetColumnValue("UnitOfMeasureCode", value);
            }
        }
	      
        [XmlAttribute("UnitOfMeasureUnit")]
        [Bindable(true)]
        public string UnitOfMeasureUnit 
	    {
		    get
		    {
			    return GetColumnValue<string>("UnitOfMeasureUnit");
		    }
            set 
		    {
			    SetColumnValue("UnitOfMeasureUnit", value);
            }
        }
	      
        [XmlAttribute("UnitOfMeasureSymbol")]
        [Bindable(true)]
        public string UnitOfMeasureSymbol 
	    {
		    get
		    {
			    return GetColumnValue<string>("UnitOfMeasureSymbol");
		    }
            set 
		    {
			    SetColumnValue("UnitOfMeasureSymbol", value);
            }
        }
	      
        [XmlAttribute("FeatureCaption")]
        [Bindable(true)]
        public string FeatureCaption 
	    {
		    get
		    {
			    return GetColumnValue<string>("FeatureCaption");
		    }
            set 
		    {
			    SetColumnValue("FeatureCaption", value);
            }
        }
	      
        [XmlAttribute("FeatureName")]
        [Bindable(true)]
        public string FeatureName 
	    {
		    get
		    {
			    return GetColumnValue<string>("FeatureName");
		    }
            set 
		    {
			    SetColumnValue("FeatureName", value);
            }
        }
	      
        [XmlAttribute("ValueDate")]
        [Bindable(true)]
        public DateTime ValueDate 
	    {
		    get
		    {
			    return GetColumnValue<DateTime>("ValueDate");
		    }
            set 
		    {
			    SetColumnValue("ValueDate", value);
            }
        }
	      
        [XmlAttribute("ValueDay")]
        [Bindable(true)]
        public DateTime? ValueDay 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("ValueDay");
		    }
            set 
		    {
			    SetColumnValue("ValueDay", value);
            }
        }
	      
        [XmlAttribute("ValueX")]
        [Bindable(true)]
        public double? ValueX 
	    {
		    get
		    {
			    return GetColumnValue<double?>("Value");
		    }
            set 
		    {
			    SetColumnValue("Value", value);
            }
        }
	      
        [XmlAttribute("Status")]
        [Bindable(true)]
        public string Status 
	    {
		    get
		    {
			    return GetColumnValue<string>("Status");
		    }
            set 
		    {
			    SetColumnValue("Status", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Id = @"ID";
            
            public static string SiteName = @"SiteName";
            
            public static string StationID = @"StationID";
            
            public static string StationName = @"StationName";
            
            public static string PhenomenonID = @"PhenomenonID";
            
            public static string PhenomenonCode = @"PhenomenonCode";
            
            public static string PhenomenonName = @"PhenomenonName";
            
            public static string PhenomenonOfferingID = @"PhenomenonOfferingID";
            
            public static string OfferingID = @"OfferingID";
            
            public static string OfferingCode = @"OfferingCode";
            
            public static string OfferingName = @"OfferingName";
            
            public static string PhenomenonUnitOfMeasureID = @"PhenomenonUnitOfMeasureID";
            
            public static string UnitOfMeasureID = @"UnitOfMeasureID";
            
            public static string UnitOfMeasureCode = @"UnitOfMeasureCode";
            
            public static string UnitOfMeasureUnit = @"UnitOfMeasureUnit";
            
            public static string UnitOfMeasureSymbol = @"UnitOfMeasureSymbol";
            
            public static string FeatureCaption = @"FeatureCaption";
            
            public static string FeatureName = @"FeatureName";
            
            public static string ValueDate = @"ValueDate";
            
            public static string ValueDay = @"ValueDay";
            
            public static string ValueX = @"Value";
            
            public static string Status = @"Status";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
