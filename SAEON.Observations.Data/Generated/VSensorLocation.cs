using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SAEON.Observations.Data{
    /// <summary>
    /// Strongly-typed collection for the VSensorLocation class.
    /// </summary>
    [Serializable]
    public partial class VSensorLocationCollection : ReadOnlyList<VSensorLocation, VSensorLocationCollection>
    {        
        public VSensorLocationCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the vSensorLocation view.
    /// </summary>
    [Serializable]
    public partial class VSensorLocation : ReadOnlyRecord<VSensorLocation>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("vSensorLocation", TableType.View, DataService.GetInstance("ObservationsDB"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarSensorID = new TableSchema.TableColumn(schema);
                colvarSensorID.ColumnName = "SensorID";
                colvarSensorID.DataType = DbType.Guid;
                colvarSensorID.MaxLength = 0;
                colvarSensorID.AutoIncrement = false;
                colvarSensorID.IsNullable = false;
                colvarSensorID.IsPrimaryKey = false;
                colvarSensorID.IsForeignKey = false;
                colvarSensorID.IsReadOnly = false;
                
                schema.Columns.Add(colvarSensorID);
                
                TableSchema.TableColumn colvarLatitude = new TableSchema.TableColumn(schema);
                colvarLatitude.ColumnName = "Latitude";
                colvarLatitude.DataType = DbType.Double;
                colvarLatitude.MaxLength = 0;
                colvarLatitude.AutoIncrement = false;
                colvarLatitude.IsNullable = true;
                colvarLatitude.IsPrimaryKey = false;
                colvarLatitude.IsForeignKey = false;
                colvarLatitude.IsReadOnly = false;
                
                schema.Columns.Add(colvarLatitude);
                
                TableSchema.TableColumn colvarLongitude = new TableSchema.TableColumn(schema);
                colvarLongitude.ColumnName = "Longitude";
                colvarLongitude.DataType = DbType.Double;
                colvarLongitude.MaxLength = 0;
                colvarLongitude.AutoIncrement = false;
                colvarLongitude.IsNullable = true;
                colvarLongitude.IsPrimaryKey = false;
                colvarLongitude.IsForeignKey = false;
                colvarLongitude.IsReadOnly = false;
                
                schema.Columns.Add(colvarLongitude);
                
                TableSchema.TableColumn colvarElevation = new TableSchema.TableColumn(schema);
                colvarElevation.ColumnName = "Elevation";
                colvarElevation.DataType = DbType.Double;
                colvarElevation.MaxLength = 0;
                colvarElevation.AutoIncrement = false;
                colvarElevation.IsNullable = true;
                colvarElevation.IsPrimaryKey = false;
                colvarElevation.IsForeignKey = false;
                colvarElevation.IsReadOnly = false;
                
                schema.Columns.Add(colvarElevation);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ObservationsDB"].AddSchema("vSensorLocation",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VSensorLocation()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VSensorLocation(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VSensorLocation(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VSensorLocation(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("SensorID")]
        [Bindable(true)]
        public Guid SensorID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("SensorID");
		    }
            set 
		    {
			    SetColumnValue("SensorID", value);
            }
        }
	      
        [XmlAttribute("Latitude")]
        [Bindable(true)]
        public double? Latitude 
	    {
		    get
		    {
			    return GetColumnValue<double?>("Latitude");
		    }
            set 
		    {
			    SetColumnValue("Latitude", value);
            }
        }
	      
        [XmlAttribute("Longitude")]
        [Bindable(true)]
        public double? Longitude 
	    {
		    get
		    {
			    return GetColumnValue<double?>("Longitude");
		    }
            set 
		    {
			    SetColumnValue("Longitude", value);
            }
        }
	      
        [XmlAttribute("Elevation")]
        [Bindable(true)]
        public double? Elevation 
	    {
		    get
		    {
			    return GetColumnValue<double?>("Elevation");
		    }
            set 
		    {
			    SetColumnValue("Elevation", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string SensorID = @"SensorID";
            
            public static string Latitude = @"Latitude";
            
            public static string Longitude = @"Longitude";
            
            public static string Elevation = @"Elevation";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
