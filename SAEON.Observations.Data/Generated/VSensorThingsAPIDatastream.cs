using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SAEON.Observations.Data{
    /// <summary>
    /// Strongly-typed collection for the VSensorThingsAPIDatastream class.
    /// </summary>
    [Serializable]
    public partial class VSensorThingsAPIDatastreamCollection : ReadOnlyList<VSensorThingsAPIDatastream, VSensorThingsAPIDatastreamCollection>
    {        
        public VSensorThingsAPIDatastreamCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the vSensorThingsAPIDatastreams view.
    /// </summary>
    [Serializable]
    public partial class VSensorThingsAPIDatastream : ReadOnlyRecord<VSensorThingsAPIDatastream>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("vSensorThingsAPIDatastreams", TableType.View, DataService.GetInstance("ObservationsDB"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
                colvarId.ColumnName = "ID";
                colvarId.DataType = DbType.Guid;
                colvarId.MaxLength = 0;
                colvarId.AutoIncrement = false;
                colvarId.IsNullable = false;
                colvarId.IsPrimaryKey = false;
                colvarId.IsForeignKey = false;
                colvarId.IsReadOnly = false;
                
                schema.Columns.Add(colvarId);
                
                TableSchema.TableColumn colvarCode = new TableSchema.TableColumn(schema);
                colvarCode.ColumnName = "Code";
                colvarCode.DataType = DbType.AnsiString;
                colvarCode.MaxLength = 50;
                colvarCode.AutoIncrement = false;
                colvarCode.IsNullable = false;
                colvarCode.IsPrimaryKey = false;
                colvarCode.IsForeignKey = false;
                colvarCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarCode);
                
                TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
                colvarName.ColumnName = "Name";
                colvarName.DataType = DbType.AnsiString;
                colvarName.MaxLength = 150;
                colvarName.AutoIncrement = false;
                colvarName.IsNullable = false;
                colvarName.IsPrimaryKey = false;
                colvarName.IsForeignKey = false;
                colvarName.IsReadOnly = false;
                
                schema.Columns.Add(colvarName);
                
                TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
                colvarDescription.ColumnName = "Description";
                colvarDescription.DataType = DbType.AnsiString;
                colvarDescription.MaxLength = 5000;
                colvarDescription.AutoIncrement = false;
                colvarDescription.IsNullable = true;
                colvarDescription.IsPrimaryKey = false;
                colvarDescription.IsForeignKey = false;
                colvarDescription.IsReadOnly = false;
                
                schema.Columns.Add(colvarDescription);
                
                TableSchema.TableColumn colvarPhenomenonCode = new TableSchema.TableColumn(schema);
                colvarPhenomenonCode.ColumnName = "PhenomenonCode";
                colvarPhenomenonCode.DataType = DbType.AnsiString;
                colvarPhenomenonCode.MaxLength = 50;
                colvarPhenomenonCode.AutoIncrement = false;
                colvarPhenomenonCode.IsNullable = false;
                colvarPhenomenonCode.IsPrimaryKey = false;
                colvarPhenomenonCode.IsForeignKey = false;
                colvarPhenomenonCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhenomenonCode);
                
                TableSchema.TableColumn colvarPhenomenonName = new TableSchema.TableColumn(schema);
                colvarPhenomenonName.ColumnName = "PhenomenonName";
                colvarPhenomenonName.DataType = DbType.AnsiString;
                colvarPhenomenonName.MaxLength = 150;
                colvarPhenomenonName.AutoIncrement = false;
                colvarPhenomenonName.IsNullable = false;
                colvarPhenomenonName.IsPrimaryKey = false;
                colvarPhenomenonName.IsForeignKey = false;
                colvarPhenomenonName.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhenomenonName);
                
                TableSchema.TableColumn colvarPhenomenonDescription = new TableSchema.TableColumn(schema);
                colvarPhenomenonDescription.ColumnName = "PhenomenonDescription";
                colvarPhenomenonDescription.DataType = DbType.AnsiString;
                colvarPhenomenonDescription.MaxLength = 5000;
                colvarPhenomenonDescription.AutoIncrement = false;
                colvarPhenomenonDescription.IsNullable = true;
                colvarPhenomenonDescription.IsPrimaryKey = false;
                colvarPhenomenonDescription.IsForeignKey = false;
                colvarPhenomenonDescription.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhenomenonDescription);
                
                TableSchema.TableColumn colvarPhenomenonUrl = new TableSchema.TableColumn(schema);
                colvarPhenomenonUrl.ColumnName = "PhenomenonUrl";
                colvarPhenomenonUrl.DataType = DbType.AnsiString;
                colvarPhenomenonUrl.MaxLength = 250;
                colvarPhenomenonUrl.AutoIncrement = false;
                colvarPhenomenonUrl.IsNullable = true;
                colvarPhenomenonUrl.IsPrimaryKey = false;
                colvarPhenomenonUrl.IsForeignKey = false;
                colvarPhenomenonUrl.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhenomenonUrl);
                
                TableSchema.TableColumn colvarOfferingCode = new TableSchema.TableColumn(schema);
                colvarOfferingCode.ColumnName = "OfferingCode";
                colvarOfferingCode.DataType = DbType.AnsiString;
                colvarOfferingCode.MaxLength = 50;
                colvarOfferingCode.AutoIncrement = false;
                colvarOfferingCode.IsNullable = false;
                colvarOfferingCode.IsPrimaryKey = false;
                colvarOfferingCode.IsForeignKey = false;
                colvarOfferingCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarOfferingCode);
                
                TableSchema.TableColumn colvarOfferingName = new TableSchema.TableColumn(schema);
                colvarOfferingName.ColumnName = "OfferingName";
                colvarOfferingName.DataType = DbType.AnsiString;
                colvarOfferingName.MaxLength = 150;
                colvarOfferingName.AutoIncrement = false;
                colvarOfferingName.IsNullable = false;
                colvarOfferingName.IsPrimaryKey = false;
                colvarOfferingName.IsForeignKey = false;
                colvarOfferingName.IsReadOnly = false;
                
                schema.Columns.Add(colvarOfferingName);
                
                TableSchema.TableColumn colvarOfferingDescription = new TableSchema.TableColumn(schema);
                colvarOfferingDescription.ColumnName = "OfferingDescription";
                colvarOfferingDescription.DataType = DbType.AnsiString;
                colvarOfferingDescription.MaxLength = 5000;
                colvarOfferingDescription.AutoIncrement = false;
                colvarOfferingDescription.IsNullable = true;
                colvarOfferingDescription.IsPrimaryKey = false;
                colvarOfferingDescription.IsForeignKey = false;
                colvarOfferingDescription.IsReadOnly = false;
                
                schema.Columns.Add(colvarOfferingDescription);
                
                TableSchema.TableColumn colvarUnitOfMeasureCode = new TableSchema.TableColumn(schema);
                colvarUnitOfMeasureCode.ColumnName = "UnitOfMeasureCode";
                colvarUnitOfMeasureCode.DataType = DbType.AnsiString;
                colvarUnitOfMeasureCode.MaxLength = 50;
                colvarUnitOfMeasureCode.AutoIncrement = false;
                colvarUnitOfMeasureCode.IsNullable = false;
                colvarUnitOfMeasureCode.IsPrimaryKey = false;
                colvarUnitOfMeasureCode.IsForeignKey = false;
                colvarUnitOfMeasureCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarUnitOfMeasureCode);
                
                TableSchema.TableColumn colvarUnitOfMeasureUnit = new TableSchema.TableColumn(schema);
                colvarUnitOfMeasureUnit.ColumnName = "UnitOfMeasureUnit";
                colvarUnitOfMeasureUnit.DataType = DbType.AnsiString;
                colvarUnitOfMeasureUnit.MaxLength = 100;
                colvarUnitOfMeasureUnit.AutoIncrement = false;
                colvarUnitOfMeasureUnit.IsNullable = false;
                colvarUnitOfMeasureUnit.IsPrimaryKey = false;
                colvarUnitOfMeasureUnit.IsForeignKey = false;
                colvarUnitOfMeasureUnit.IsReadOnly = false;
                
                schema.Columns.Add(colvarUnitOfMeasureUnit);
                
                TableSchema.TableColumn colvarUnitOfMeasureSymbol = new TableSchema.TableColumn(schema);
                colvarUnitOfMeasureSymbol.ColumnName = "UnitOfMeasureSymbol";
                colvarUnitOfMeasureSymbol.DataType = DbType.AnsiString;
                colvarUnitOfMeasureSymbol.MaxLength = 20;
                colvarUnitOfMeasureSymbol.AutoIncrement = false;
                colvarUnitOfMeasureSymbol.IsNullable = false;
                colvarUnitOfMeasureSymbol.IsPrimaryKey = false;
                colvarUnitOfMeasureSymbol.IsForeignKey = false;
                colvarUnitOfMeasureSymbol.IsReadOnly = false;
                
                schema.Columns.Add(colvarUnitOfMeasureSymbol);
                
                TableSchema.TableColumn colvarStartDate = new TableSchema.TableColumn(schema);
                colvarStartDate.ColumnName = "StartDate";
                colvarStartDate.DataType = DbType.DateTime;
                colvarStartDate.MaxLength = 0;
                colvarStartDate.AutoIncrement = false;
                colvarStartDate.IsNullable = true;
                colvarStartDate.IsPrimaryKey = false;
                colvarStartDate.IsForeignKey = false;
                colvarStartDate.IsReadOnly = false;
                
                schema.Columns.Add(colvarStartDate);
                
                TableSchema.TableColumn colvarEndDate = new TableSchema.TableColumn(schema);
                colvarEndDate.ColumnName = "EndDate";
                colvarEndDate.DataType = DbType.DateTime;
                colvarEndDate.MaxLength = 0;
                colvarEndDate.AutoIncrement = false;
                colvarEndDate.IsNullable = true;
                colvarEndDate.IsPrimaryKey = false;
                colvarEndDate.IsForeignKey = false;
                colvarEndDate.IsReadOnly = false;
                
                schema.Columns.Add(colvarEndDate);
                
                TableSchema.TableColumn colvarLatitudeNorth = new TableSchema.TableColumn(schema);
                colvarLatitudeNorth.ColumnName = "LatitudeNorth";
                colvarLatitudeNorth.DataType = DbType.Double;
                colvarLatitudeNorth.MaxLength = 0;
                colvarLatitudeNorth.AutoIncrement = false;
                colvarLatitudeNorth.IsNullable = true;
                colvarLatitudeNorth.IsPrimaryKey = false;
                colvarLatitudeNorth.IsForeignKey = false;
                colvarLatitudeNorth.IsReadOnly = false;
                
                schema.Columns.Add(colvarLatitudeNorth);
                
                TableSchema.TableColumn colvarLatitudeSouth = new TableSchema.TableColumn(schema);
                colvarLatitudeSouth.ColumnName = "LatitudeSouth";
                colvarLatitudeSouth.DataType = DbType.Double;
                colvarLatitudeSouth.MaxLength = 0;
                colvarLatitudeSouth.AutoIncrement = false;
                colvarLatitudeSouth.IsNullable = true;
                colvarLatitudeSouth.IsPrimaryKey = false;
                colvarLatitudeSouth.IsForeignKey = false;
                colvarLatitudeSouth.IsReadOnly = false;
                
                schema.Columns.Add(colvarLatitudeSouth);
                
                TableSchema.TableColumn colvarLongitudeWest = new TableSchema.TableColumn(schema);
                colvarLongitudeWest.ColumnName = "LongitudeWest";
                colvarLongitudeWest.DataType = DbType.Double;
                colvarLongitudeWest.MaxLength = 0;
                colvarLongitudeWest.AutoIncrement = false;
                colvarLongitudeWest.IsNullable = true;
                colvarLongitudeWest.IsPrimaryKey = false;
                colvarLongitudeWest.IsForeignKey = false;
                colvarLongitudeWest.IsReadOnly = false;
                
                schema.Columns.Add(colvarLongitudeWest);
                
                TableSchema.TableColumn colvarLongitudeEast = new TableSchema.TableColumn(schema);
                colvarLongitudeEast.ColumnName = "LongitudeEast";
                colvarLongitudeEast.DataType = DbType.Double;
                colvarLongitudeEast.MaxLength = 0;
                colvarLongitudeEast.AutoIncrement = false;
                colvarLongitudeEast.IsNullable = true;
                colvarLongitudeEast.IsPrimaryKey = false;
                colvarLongitudeEast.IsForeignKey = false;
                colvarLongitudeEast.IsReadOnly = false;
                
                schema.Columns.Add(colvarLongitudeEast);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ObservationsDB"].AddSchema("vSensorThingsAPIDatastreams",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VSensorThingsAPIDatastream()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VSensorThingsAPIDatastream(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VSensorThingsAPIDatastream(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VSensorThingsAPIDatastream(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Id")]
        [Bindable(true)]
        public Guid Id 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("ID");
		    }
            set 
		    {
			    SetColumnValue("ID", value);
            }
        }
	      
        [XmlAttribute("Code")]
        [Bindable(true)]
        public string Code 
	    {
		    get
		    {
			    return GetColumnValue<string>("Code");
		    }
            set 
		    {
			    SetColumnValue("Code", value);
            }
        }
	      
        [XmlAttribute("Name")]
        [Bindable(true)]
        public string Name 
	    {
		    get
		    {
			    return GetColumnValue<string>("Name");
		    }
            set 
		    {
			    SetColumnValue("Name", value);
            }
        }
	      
        [XmlAttribute("Description")]
        [Bindable(true)]
        public string Description 
	    {
		    get
		    {
			    return GetColumnValue<string>("Description");
		    }
            set 
		    {
			    SetColumnValue("Description", value);
            }
        }
	      
        [XmlAttribute("PhenomenonCode")]
        [Bindable(true)]
        public string PhenomenonCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("PhenomenonCode");
		    }
            set 
		    {
			    SetColumnValue("PhenomenonCode", value);
            }
        }
	      
        [XmlAttribute("PhenomenonName")]
        [Bindable(true)]
        public string PhenomenonName 
	    {
		    get
		    {
			    return GetColumnValue<string>("PhenomenonName");
		    }
            set 
		    {
			    SetColumnValue("PhenomenonName", value);
            }
        }
	      
        [XmlAttribute("PhenomenonDescription")]
        [Bindable(true)]
        public string PhenomenonDescription 
	    {
		    get
		    {
			    return GetColumnValue<string>("PhenomenonDescription");
		    }
            set 
		    {
			    SetColumnValue("PhenomenonDescription", value);
            }
        }
	      
        [XmlAttribute("PhenomenonUrl")]
        [Bindable(true)]
        public string PhenomenonUrl 
	    {
		    get
		    {
			    return GetColumnValue<string>("PhenomenonUrl");
		    }
            set 
		    {
			    SetColumnValue("PhenomenonUrl", value);
            }
        }
	      
        [XmlAttribute("OfferingCode")]
        [Bindable(true)]
        public string OfferingCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("OfferingCode");
		    }
            set 
		    {
			    SetColumnValue("OfferingCode", value);
            }
        }
	      
        [XmlAttribute("OfferingName")]
        [Bindable(true)]
        public string OfferingName 
	    {
		    get
		    {
			    return GetColumnValue<string>("OfferingName");
		    }
            set 
		    {
			    SetColumnValue("OfferingName", value);
            }
        }
	      
        [XmlAttribute("OfferingDescription")]
        [Bindable(true)]
        public string OfferingDescription 
	    {
		    get
		    {
			    return GetColumnValue<string>("OfferingDescription");
		    }
            set 
		    {
			    SetColumnValue("OfferingDescription", value);
            }
        }
	      
        [XmlAttribute("UnitOfMeasureCode")]
        [Bindable(true)]
        public string UnitOfMeasureCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("UnitOfMeasureCode");
		    }
            set 
		    {
			    SetColumnValue("UnitOfMeasureCode", value);
            }
        }
	      
        [XmlAttribute("UnitOfMeasureUnit")]
        [Bindable(true)]
        public string UnitOfMeasureUnit 
	    {
		    get
		    {
			    return GetColumnValue<string>("UnitOfMeasureUnit");
		    }
            set 
		    {
			    SetColumnValue("UnitOfMeasureUnit", value);
            }
        }
	      
        [XmlAttribute("UnitOfMeasureSymbol")]
        [Bindable(true)]
        public string UnitOfMeasureSymbol 
	    {
		    get
		    {
			    return GetColumnValue<string>("UnitOfMeasureSymbol");
		    }
            set 
		    {
			    SetColumnValue("UnitOfMeasureSymbol", value);
            }
        }
	      
        [XmlAttribute("StartDate")]
        [Bindable(true)]
        public DateTime? StartDate 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("StartDate");
		    }
            set 
		    {
			    SetColumnValue("StartDate", value);
            }
        }
	      
        [XmlAttribute("EndDate")]
        [Bindable(true)]
        public DateTime? EndDate 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("EndDate");
		    }
            set 
		    {
			    SetColumnValue("EndDate", value);
            }
        }
	      
        [XmlAttribute("LatitudeNorth")]
        [Bindable(true)]
        public double? LatitudeNorth 
	    {
		    get
		    {
			    return GetColumnValue<double?>("LatitudeNorth");
		    }
            set 
		    {
			    SetColumnValue("LatitudeNorth", value);
            }
        }
	      
        [XmlAttribute("LatitudeSouth")]
        [Bindable(true)]
        public double? LatitudeSouth 
	    {
		    get
		    {
			    return GetColumnValue<double?>("LatitudeSouth");
		    }
            set 
		    {
			    SetColumnValue("LatitudeSouth", value);
            }
        }
	      
        [XmlAttribute("LongitudeWest")]
        [Bindable(true)]
        public double? LongitudeWest 
	    {
		    get
		    {
			    return GetColumnValue<double?>("LongitudeWest");
		    }
            set 
		    {
			    SetColumnValue("LongitudeWest", value);
            }
        }
	      
        [XmlAttribute("LongitudeEast")]
        [Bindable(true)]
        public double? LongitudeEast 
	    {
		    get
		    {
			    return GetColumnValue<double?>("LongitudeEast");
		    }
            set 
		    {
			    SetColumnValue("LongitudeEast", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Id = @"ID";
            
            public static string Code = @"Code";
            
            public static string Name = @"Name";
            
            public static string Description = @"Description";
            
            public static string PhenomenonCode = @"PhenomenonCode";
            
            public static string PhenomenonName = @"PhenomenonName";
            
            public static string PhenomenonDescription = @"PhenomenonDescription";
            
            public static string PhenomenonUrl = @"PhenomenonUrl";
            
            public static string OfferingCode = @"OfferingCode";
            
            public static string OfferingName = @"OfferingName";
            
            public static string OfferingDescription = @"OfferingDescription";
            
            public static string UnitOfMeasureCode = @"UnitOfMeasureCode";
            
            public static string UnitOfMeasureUnit = @"UnitOfMeasureUnit";
            
            public static string UnitOfMeasureSymbol = @"UnitOfMeasureSymbol";
            
            public static string StartDate = @"StartDate";
            
            public static string EndDate = @"EndDate";
            
            public static string LatitudeNorth = @"LatitudeNorth";
            
            public static string LatitudeSouth = @"LatitudeSouth";
            
            public static string LongitudeWest = @"LongitudeWest";
            
            public static string LongitudeEast = @"LongitudeEast";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
