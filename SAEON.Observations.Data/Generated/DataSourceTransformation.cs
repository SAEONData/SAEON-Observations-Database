using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SAEON.Observations.Data
{
	/// <summary>
	/// Strongly-typed collection for the DataSourceTransformation class.
	/// </summary>
    [Serializable]
	public partial class DataSourceTransformationCollection : ActiveList<DataSourceTransformation, DataSourceTransformationCollection>
	{	   
		public DataSourceTransformationCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DataSourceTransformationCollection</returns>
		public DataSourceTransformationCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DataSourceTransformation o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the DataSourceTransformation table.
	/// </summary>
	[Serializable]
	public partial class DataSourceTransformation : ActiveRecord<DataSourceTransformation>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DataSourceTransformation()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DataSourceTransformation(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DataSourceTransformation(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DataSourceTransformation(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("DataSourceTransformation", TableType.Table, DataService.GetInstance("ObservationsDB"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Guid;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = false;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				
						colvarId.DefaultSetting = @"(newid())";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarTransformationTypeID = new TableSchema.TableColumn(schema);
				colvarTransformationTypeID.ColumnName = "TransformationTypeID";
				colvarTransformationTypeID.DataType = DbType.Guid;
				colvarTransformationTypeID.MaxLength = 0;
				colvarTransformationTypeID.AutoIncrement = false;
				colvarTransformationTypeID.IsNullable = false;
				colvarTransformationTypeID.IsPrimaryKey = false;
				colvarTransformationTypeID.IsForeignKey = true;
				colvarTransformationTypeID.IsReadOnly = false;
				colvarTransformationTypeID.DefaultSetting = @"";
				
					colvarTransformationTypeID.ForeignKeyTableName = "TransformationType";
				schema.Columns.Add(colvarTransformationTypeID);
				
				TableSchema.TableColumn colvarPhenomenonID = new TableSchema.TableColumn(schema);
				colvarPhenomenonID.ColumnName = "PhenomenonID";
				colvarPhenomenonID.DataType = DbType.Guid;
				colvarPhenomenonID.MaxLength = 0;
				colvarPhenomenonID.AutoIncrement = false;
				colvarPhenomenonID.IsNullable = false;
				colvarPhenomenonID.IsPrimaryKey = false;
				colvarPhenomenonID.IsForeignKey = true;
				colvarPhenomenonID.IsReadOnly = false;
				colvarPhenomenonID.DefaultSetting = @"";
				
					colvarPhenomenonID.ForeignKeyTableName = "Phenomenon";
				schema.Columns.Add(colvarPhenomenonID);
				
				TableSchema.TableColumn colvarPhenomenonOfferingID = new TableSchema.TableColumn(schema);
				colvarPhenomenonOfferingID.ColumnName = "PhenomenonOfferingID";
				colvarPhenomenonOfferingID.DataType = DbType.Guid;
				colvarPhenomenonOfferingID.MaxLength = 0;
				colvarPhenomenonOfferingID.AutoIncrement = false;
				colvarPhenomenonOfferingID.IsNullable = true;
				colvarPhenomenonOfferingID.IsPrimaryKey = false;
				colvarPhenomenonOfferingID.IsForeignKey = true;
				colvarPhenomenonOfferingID.IsReadOnly = false;
				colvarPhenomenonOfferingID.DefaultSetting = @"";
				
					colvarPhenomenonOfferingID.ForeignKeyTableName = "PhenomenonOffering";
				schema.Columns.Add(colvarPhenomenonOfferingID);
				
				TableSchema.TableColumn colvarPhenomenonUOMID = new TableSchema.TableColumn(schema);
				colvarPhenomenonUOMID.ColumnName = "PhenomenonUOMID";
				colvarPhenomenonUOMID.DataType = DbType.Guid;
				colvarPhenomenonUOMID.MaxLength = 0;
				colvarPhenomenonUOMID.AutoIncrement = false;
				colvarPhenomenonUOMID.IsNullable = true;
				colvarPhenomenonUOMID.IsPrimaryKey = false;
				colvarPhenomenonUOMID.IsForeignKey = true;
				colvarPhenomenonUOMID.IsReadOnly = false;
				colvarPhenomenonUOMID.DefaultSetting = @"";
				
					colvarPhenomenonUOMID.ForeignKeyTableName = "PhenomenonUOM";
				schema.Columns.Add(colvarPhenomenonUOMID);
				
				TableSchema.TableColumn colvarStartDate = new TableSchema.TableColumn(schema);
				colvarStartDate.ColumnName = "StartDate";
				colvarStartDate.DataType = DbType.DateTime;
				colvarStartDate.MaxLength = 0;
				colvarStartDate.AutoIncrement = false;
				colvarStartDate.IsNullable = true;
				colvarStartDate.IsPrimaryKey = false;
				colvarStartDate.IsForeignKey = false;
				colvarStartDate.IsReadOnly = false;
				colvarStartDate.DefaultSetting = @"";
				colvarStartDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartDate);
				
				TableSchema.TableColumn colvarEndDate = new TableSchema.TableColumn(schema);
				colvarEndDate.ColumnName = "EndDate";
				colvarEndDate.DataType = DbType.DateTime;
				colvarEndDate.MaxLength = 0;
				colvarEndDate.AutoIncrement = false;
				colvarEndDate.IsNullable = true;
				colvarEndDate.IsPrimaryKey = false;
				colvarEndDate.IsForeignKey = false;
				colvarEndDate.IsReadOnly = false;
				colvarEndDate.DefaultSetting = @"";
				colvarEndDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEndDate);
				
				TableSchema.TableColumn colvarDataSourceID = new TableSchema.TableColumn(schema);
				colvarDataSourceID.ColumnName = "DataSourceID";
				colvarDataSourceID.DataType = DbType.Guid;
				colvarDataSourceID.MaxLength = 0;
				colvarDataSourceID.AutoIncrement = false;
				colvarDataSourceID.IsNullable = false;
				colvarDataSourceID.IsPrimaryKey = false;
				colvarDataSourceID.IsForeignKey = true;
				colvarDataSourceID.IsReadOnly = false;
				colvarDataSourceID.DefaultSetting = @"";
				
					colvarDataSourceID.ForeignKeyTableName = "DataSource";
				schema.Columns.Add(colvarDataSourceID);
				
				TableSchema.TableColumn colvarDefinition = new TableSchema.TableColumn(schema);
				colvarDefinition.ColumnName = "Definition";
				colvarDefinition.DataType = DbType.AnsiString;
				colvarDefinition.MaxLength = 2147483647;
				colvarDefinition.AutoIncrement = false;
				colvarDefinition.IsNullable = false;
				colvarDefinition.IsPrimaryKey = false;
				colvarDefinition.IsForeignKey = false;
				colvarDefinition.IsReadOnly = false;
				colvarDefinition.DefaultSetting = @"";
				colvarDefinition.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDefinition);
				
				TableSchema.TableColumn colvarNewPhenomenonOfferingID = new TableSchema.TableColumn(schema);
				colvarNewPhenomenonOfferingID.ColumnName = "NewPhenomenonOfferingID";
				colvarNewPhenomenonOfferingID.DataType = DbType.Guid;
				colvarNewPhenomenonOfferingID.MaxLength = 0;
				colvarNewPhenomenonOfferingID.AutoIncrement = false;
				colvarNewPhenomenonOfferingID.IsNullable = true;
				colvarNewPhenomenonOfferingID.IsPrimaryKey = false;
				colvarNewPhenomenonOfferingID.IsForeignKey = true;
				colvarNewPhenomenonOfferingID.IsReadOnly = false;
				colvarNewPhenomenonOfferingID.DefaultSetting = @"";
				
					colvarNewPhenomenonOfferingID.ForeignKeyTableName = "PhenomenonOffering";
				schema.Columns.Add(colvarNewPhenomenonOfferingID);
				
				TableSchema.TableColumn colvarNewPhenomenonUOMID = new TableSchema.TableColumn(schema);
				colvarNewPhenomenonUOMID.ColumnName = "NewPhenomenonUOMID";
				colvarNewPhenomenonUOMID.DataType = DbType.Guid;
				colvarNewPhenomenonUOMID.MaxLength = 0;
				colvarNewPhenomenonUOMID.AutoIncrement = false;
				colvarNewPhenomenonUOMID.IsNullable = true;
				colvarNewPhenomenonUOMID.IsPrimaryKey = false;
				colvarNewPhenomenonUOMID.IsForeignKey = true;
				colvarNewPhenomenonUOMID.IsReadOnly = false;
				colvarNewPhenomenonUOMID.DefaultSetting = @"";
				
					colvarNewPhenomenonUOMID.ForeignKeyTableName = "PhenomenonUOM";
				schema.Columns.Add(colvarNewPhenomenonUOMID);
				
				TableSchema.TableColumn colvarRank = new TableSchema.TableColumn(schema);
				colvarRank.ColumnName = "Rank";
				colvarRank.DataType = DbType.Int32;
				colvarRank.MaxLength = 0;
				colvarRank.AutoIncrement = false;
				colvarRank.IsNullable = true;
				colvarRank.IsPrimaryKey = false;
				colvarRank.IsForeignKey = false;
				colvarRank.IsReadOnly = false;
				
						colvarRank.DefaultSetting = @"((0))";
				colvarRank.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRank);
				
				TableSchema.TableColumn colvarSensorID = new TableSchema.TableColumn(schema);
				colvarSensorID.ColumnName = "SensorID";
				colvarSensorID.DataType = DbType.Guid;
				colvarSensorID.MaxLength = 0;
				colvarSensorID.AutoIncrement = false;
				colvarSensorID.IsNullable = true;
				colvarSensorID.IsPrimaryKey = false;
				colvarSensorID.IsForeignKey = true;
				colvarSensorID.IsReadOnly = false;
				colvarSensorID.DefaultSetting = @"";
				
					colvarSensorID.ForeignKeyTableName = "Sensor";
				schema.Columns.Add(colvarSensorID);
				
				TableSchema.TableColumn colvarUserId = new TableSchema.TableColumn(schema);
				colvarUserId.ColumnName = "UserId";
				colvarUserId.DataType = DbType.Guid;
				colvarUserId.MaxLength = 0;
				colvarUserId.AutoIncrement = false;
				colvarUserId.IsNullable = true;
				colvarUserId.IsPrimaryKey = false;
				colvarUserId.IsForeignKey = true;
				colvarUserId.IsReadOnly = false;
				colvarUserId.DefaultSetting = @"";
				
					colvarUserId.ForeignKeyTableName = "aspnet_Users";
				schema.Columns.Add(colvarUserId);
				
				TableSchema.TableColumn colvarAddedAt = new TableSchema.TableColumn(schema);
				colvarAddedAt.ColumnName = "AddedAt";
				colvarAddedAt.DataType = DbType.DateTime;
				colvarAddedAt.MaxLength = 0;
				colvarAddedAt.AutoIncrement = false;
				colvarAddedAt.IsNullable = true;
				colvarAddedAt.IsPrimaryKey = false;
				colvarAddedAt.IsForeignKey = false;
				colvarAddedAt.IsReadOnly = false;
				
						colvarAddedAt.DefaultSetting = @"(getdate())";
				colvarAddedAt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddedAt);
				
				TableSchema.TableColumn colvarUpdatedAt = new TableSchema.TableColumn(schema);
				colvarUpdatedAt.ColumnName = "UpdatedAt";
				colvarUpdatedAt.DataType = DbType.DateTime;
				colvarUpdatedAt.MaxLength = 0;
				colvarUpdatedAt.AutoIncrement = false;
				colvarUpdatedAt.IsNullable = true;
				colvarUpdatedAt.IsPrimaryKey = false;
				colvarUpdatedAt.IsForeignKey = false;
				colvarUpdatedAt.IsReadOnly = false;
				
						colvarUpdatedAt.DefaultSetting = @"(getdate())";
				colvarUpdatedAt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpdatedAt);
				
				TableSchema.TableColumn colvarRowVersion = new TableSchema.TableColumn(schema);
				colvarRowVersion.ColumnName = "RowVersion";
				colvarRowVersion.DataType = DbType.Binary;
				colvarRowVersion.MaxLength = 0;
				colvarRowVersion.AutoIncrement = false;
				colvarRowVersion.IsNullable = false;
				colvarRowVersion.IsPrimaryKey = false;
				colvarRowVersion.IsForeignKey = false;
				colvarRowVersion.IsReadOnly = true;
				colvarRowVersion.DefaultSetting = @"";
				colvarRowVersion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRowVersion);
				
				TableSchema.TableColumn colvarParamA = new TableSchema.TableColumn(schema);
				colvarParamA.ColumnName = "ParamA";
				colvarParamA.DataType = DbType.Double;
				colvarParamA.MaxLength = 0;
				colvarParamA.AutoIncrement = false;
				colvarParamA.IsNullable = true;
				colvarParamA.IsPrimaryKey = false;
				colvarParamA.IsForeignKey = false;
				colvarParamA.IsReadOnly = false;
				colvarParamA.DefaultSetting = @"";
				colvarParamA.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParamA);
				
				TableSchema.TableColumn colvarParamB = new TableSchema.TableColumn(schema);
				colvarParamB.ColumnName = "ParamB";
				colvarParamB.DataType = DbType.Double;
				colvarParamB.MaxLength = 0;
				colvarParamB.AutoIncrement = false;
				colvarParamB.IsNullable = true;
				colvarParamB.IsPrimaryKey = false;
				colvarParamB.IsForeignKey = false;
				colvarParamB.IsReadOnly = false;
				colvarParamB.DefaultSetting = @"";
				colvarParamB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParamB);
				
				TableSchema.TableColumn colvarParamC = new TableSchema.TableColumn(schema);
				colvarParamC.ColumnName = "ParamC";
				colvarParamC.DataType = DbType.Double;
				colvarParamC.MaxLength = 0;
				colvarParamC.AutoIncrement = false;
				colvarParamC.IsNullable = true;
				colvarParamC.IsPrimaryKey = false;
				colvarParamC.IsForeignKey = false;
				colvarParamC.IsReadOnly = false;
				colvarParamC.DefaultSetting = @"";
				colvarParamC.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParamC);
				
				TableSchema.TableColumn colvarParamD = new TableSchema.TableColumn(schema);
				colvarParamD.ColumnName = "ParamD";
				colvarParamD.DataType = DbType.Double;
				colvarParamD.MaxLength = 0;
				colvarParamD.AutoIncrement = false;
				colvarParamD.IsNullable = true;
				colvarParamD.IsPrimaryKey = false;
				colvarParamD.IsForeignKey = false;
				colvarParamD.IsReadOnly = false;
				colvarParamD.DefaultSetting = @"";
				colvarParamD.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParamD);
				
				TableSchema.TableColumn colvarParamE = new TableSchema.TableColumn(schema);
				colvarParamE.ColumnName = "ParamE";
				colvarParamE.DataType = DbType.Double;
				colvarParamE.MaxLength = 0;
				colvarParamE.AutoIncrement = false;
				colvarParamE.IsNullable = true;
				colvarParamE.IsPrimaryKey = false;
				colvarParamE.IsForeignKey = false;
				colvarParamE.IsReadOnly = false;
				colvarParamE.DefaultSetting = @"";
				colvarParamE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParamE);
				
				TableSchema.TableColumn colvarParamF = new TableSchema.TableColumn(schema);
				colvarParamF.ColumnName = "ParamF";
				colvarParamF.DataType = DbType.Double;
				colvarParamF.MaxLength = 0;
				colvarParamF.AutoIncrement = false;
				colvarParamF.IsNullable = true;
				colvarParamF.IsPrimaryKey = false;
				colvarParamF.IsForeignKey = false;
				colvarParamF.IsReadOnly = false;
				colvarParamF.DefaultSetting = @"";
				colvarParamF.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParamF);
				
				TableSchema.TableColumn colvarParamG = new TableSchema.TableColumn(schema);
				colvarParamG.ColumnName = "ParamG";
				colvarParamG.DataType = DbType.Double;
				colvarParamG.MaxLength = 0;
				colvarParamG.AutoIncrement = false;
				colvarParamG.IsNullable = true;
				colvarParamG.IsPrimaryKey = false;
				colvarParamG.IsForeignKey = false;
				colvarParamG.IsReadOnly = false;
				colvarParamG.DefaultSetting = @"";
				colvarParamG.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParamG);
				
				TableSchema.TableColumn colvarParamH = new TableSchema.TableColumn(schema);
				colvarParamH.ColumnName = "ParamH";
				colvarParamH.DataType = DbType.Double;
				colvarParamH.MaxLength = 0;
				colvarParamH.AutoIncrement = false;
				colvarParamH.IsNullable = true;
				colvarParamH.IsPrimaryKey = false;
				colvarParamH.IsForeignKey = false;
				colvarParamH.IsReadOnly = false;
				colvarParamH.DefaultSetting = @"";
				colvarParamH.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParamH);
				
				TableSchema.TableColumn colvarParamI = new TableSchema.TableColumn(schema);
				colvarParamI.ColumnName = "ParamI";
				colvarParamI.DataType = DbType.Double;
				colvarParamI.MaxLength = 0;
				colvarParamI.AutoIncrement = false;
				colvarParamI.IsNullable = true;
				colvarParamI.IsPrimaryKey = false;
				colvarParamI.IsForeignKey = false;
				colvarParamI.IsReadOnly = false;
				colvarParamI.DefaultSetting = @"";
				colvarParamI.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParamI);
				
				TableSchema.TableColumn colvarParamJ = new TableSchema.TableColumn(schema);
				colvarParamJ.ColumnName = "ParamJ";
				colvarParamJ.DataType = DbType.Double;
				colvarParamJ.MaxLength = 0;
				colvarParamJ.AutoIncrement = false;
				colvarParamJ.IsNullable = true;
				colvarParamJ.IsPrimaryKey = false;
				colvarParamJ.IsForeignKey = false;
				colvarParamJ.IsReadOnly = false;
				colvarParamJ.DefaultSetting = @"";
				colvarParamJ.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParamJ);
				
				TableSchema.TableColumn colvarParamK = new TableSchema.TableColumn(schema);
				colvarParamK.ColumnName = "ParamK";
				colvarParamK.DataType = DbType.Double;
				colvarParamK.MaxLength = 0;
				colvarParamK.AutoIncrement = false;
				colvarParamK.IsNullable = true;
				colvarParamK.IsPrimaryKey = false;
				colvarParamK.IsForeignKey = false;
				colvarParamK.IsReadOnly = false;
				colvarParamK.DefaultSetting = @"";
				colvarParamK.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParamK);
				
				TableSchema.TableColumn colvarParamL = new TableSchema.TableColumn(schema);
				colvarParamL.ColumnName = "ParamL";
				colvarParamL.DataType = DbType.Double;
				colvarParamL.MaxLength = 0;
				colvarParamL.AutoIncrement = false;
				colvarParamL.IsNullable = true;
				colvarParamL.IsPrimaryKey = false;
				colvarParamL.IsForeignKey = false;
				colvarParamL.IsReadOnly = false;
				colvarParamL.DefaultSetting = @"";
				colvarParamL.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParamL);
				
				TableSchema.TableColumn colvarParamM = new TableSchema.TableColumn(schema);
				colvarParamM.ColumnName = "ParamM";
				colvarParamM.DataType = DbType.Double;
				colvarParamM.MaxLength = 0;
				colvarParamM.AutoIncrement = false;
				colvarParamM.IsNullable = true;
				colvarParamM.IsPrimaryKey = false;
				colvarParamM.IsForeignKey = false;
				colvarParamM.IsReadOnly = false;
				colvarParamM.DefaultSetting = @"";
				colvarParamM.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParamM);
				
				TableSchema.TableColumn colvarParamN = new TableSchema.TableColumn(schema);
				colvarParamN.ColumnName = "ParamN";
				colvarParamN.DataType = DbType.Double;
				colvarParamN.MaxLength = 0;
				colvarParamN.AutoIncrement = false;
				colvarParamN.IsNullable = true;
				colvarParamN.IsPrimaryKey = false;
				colvarParamN.IsForeignKey = false;
				colvarParamN.IsReadOnly = false;
				colvarParamN.DefaultSetting = @"";
				colvarParamN.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParamN);
				
				TableSchema.TableColumn colvarParamO = new TableSchema.TableColumn(schema);
				colvarParamO.ColumnName = "ParamO";
				colvarParamO.DataType = DbType.Double;
				colvarParamO.MaxLength = 0;
				colvarParamO.AutoIncrement = false;
				colvarParamO.IsNullable = true;
				colvarParamO.IsPrimaryKey = false;
				colvarParamO.IsForeignKey = false;
				colvarParamO.IsReadOnly = false;
				colvarParamO.DefaultSetting = @"";
				colvarParamO.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParamO);
				
				TableSchema.TableColumn colvarParamP = new TableSchema.TableColumn(schema);
				colvarParamP.ColumnName = "ParamP";
				colvarParamP.DataType = DbType.Double;
				colvarParamP.MaxLength = 0;
				colvarParamP.AutoIncrement = false;
				colvarParamP.IsNullable = true;
				colvarParamP.IsPrimaryKey = false;
				colvarParamP.IsForeignKey = false;
				colvarParamP.IsReadOnly = false;
				colvarParamP.DefaultSetting = @"";
				colvarParamP.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParamP);
				
				TableSchema.TableColumn colvarParamQ = new TableSchema.TableColumn(schema);
				colvarParamQ.ColumnName = "ParamQ";
				colvarParamQ.DataType = DbType.Double;
				colvarParamQ.MaxLength = 0;
				colvarParamQ.AutoIncrement = false;
				colvarParamQ.IsNullable = true;
				colvarParamQ.IsPrimaryKey = false;
				colvarParamQ.IsForeignKey = false;
				colvarParamQ.IsReadOnly = false;
				colvarParamQ.DefaultSetting = @"";
				colvarParamQ.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParamQ);
				
				TableSchema.TableColumn colvarParamR = new TableSchema.TableColumn(schema);
				colvarParamR.ColumnName = "ParamR";
				colvarParamR.DataType = DbType.Double;
				colvarParamR.MaxLength = 0;
				colvarParamR.AutoIncrement = false;
				colvarParamR.IsNullable = true;
				colvarParamR.IsPrimaryKey = false;
				colvarParamR.IsForeignKey = false;
				colvarParamR.IsReadOnly = false;
				colvarParamR.DefaultSetting = @"";
				colvarParamR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParamR);
				
				TableSchema.TableColumn colvarParamSX = new TableSchema.TableColumn(schema);
				colvarParamSX.ColumnName = "ParamS";
				colvarParamSX.DataType = DbType.Double;
				colvarParamSX.MaxLength = 0;
				colvarParamSX.AutoIncrement = false;
				colvarParamSX.IsNullable = true;
				colvarParamSX.IsPrimaryKey = false;
				colvarParamSX.IsForeignKey = false;
				colvarParamSX.IsReadOnly = false;
				colvarParamSX.DefaultSetting = @"";
				colvarParamSX.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParamSX);
				
				TableSchema.TableColumn colvarParamT = new TableSchema.TableColumn(schema);
				colvarParamT.ColumnName = "ParamT";
				colvarParamT.DataType = DbType.Double;
				colvarParamT.MaxLength = 0;
				colvarParamT.AutoIncrement = false;
				colvarParamT.IsNullable = true;
				colvarParamT.IsPrimaryKey = false;
				colvarParamT.IsForeignKey = false;
				colvarParamT.IsReadOnly = false;
				colvarParamT.DefaultSetting = @"";
				colvarParamT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParamT);
				
				TableSchema.TableColumn colvarParamU = new TableSchema.TableColumn(schema);
				colvarParamU.ColumnName = "ParamU";
				colvarParamU.DataType = DbType.Double;
				colvarParamU.MaxLength = 0;
				colvarParamU.AutoIncrement = false;
				colvarParamU.IsNullable = true;
				colvarParamU.IsPrimaryKey = false;
				colvarParamU.IsForeignKey = false;
				colvarParamU.IsReadOnly = false;
				colvarParamU.DefaultSetting = @"";
				colvarParamU.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParamU);
				
				TableSchema.TableColumn colvarParamV = new TableSchema.TableColumn(schema);
				colvarParamV.ColumnName = "ParamV";
				colvarParamV.DataType = DbType.Double;
				colvarParamV.MaxLength = 0;
				colvarParamV.AutoIncrement = false;
				colvarParamV.IsNullable = true;
				colvarParamV.IsPrimaryKey = false;
				colvarParamV.IsForeignKey = false;
				colvarParamV.IsReadOnly = false;
				colvarParamV.DefaultSetting = @"";
				colvarParamV.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParamV);
				
				TableSchema.TableColumn colvarParamW = new TableSchema.TableColumn(schema);
				colvarParamW.ColumnName = "ParamW";
				colvarParamW.DataType = DbType.Double;
				colvarParamW.MaxLength = 0;
				colvarParamW.AutoIncrement = false;
				colvarParamW.IsNullable = true;
				colvarParamW.IsPrimaryKey = false;
				colvarParamW.IsForeignKey = false;
				colvarParamW.IsReadOnly = false;
				colvarParamW.DefaultSetting = @"";
				colvarParamW.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParamW);
				
				TableSchema.TableColumn colvarParamX = new TableSchema.TableColumn(schema);
				colvarParamX.ColumnName = "ParamX";
				colvarParamX.DataType = DbType.Double;
				colvarParamX.MaxLength = 0;
				colvarParamX.AutoIncrement = false;
				colvarParamX.IsNullable = true;
				colvarParamX.IsPrimaryKey = false;
				colvarParamX.IsForeignKey = false;
				colvarParamX.IsReadOnly = false;
				colvarParamX.DefaultSetting = @"";
				colvarParamX.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParamX);
				
				TableSchema.TableColumn colvarParamY = new TableSchema.TableColumn(schema);
				colvarParamY.ColumnName = "ParamY";
				colvarParamY.DataType = DbType.Double;
				colvarParamY.MaxLength = 0;
				colvarParamY.AutoIncrement = false;
				colvarParamY.IsNullable = true;
				colvarParamY.IsPrimaryKey = false;
				colvarParamY.IsForeignKey = false;
				colvarParamY.IsReadOnly = false;
				colvarParamY.DefaultSetting = @"";
				colvarParamY.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParamY);
				
				TableSchema.TableColumn colvarNewPhenomenonID = new TableSchema.TableColumn(schema);
				colvarNewPhenomenonID.ColumnName = "NewPhenomenonID";
				colvarNewPhenomenonID.DataType = DbType.Guid;
				colvarNewPhenomenonID.MaxLength = 0;
				colvarNewPhenomenonID.AutoIncrement = false;
				colvarNewPhenomenonID.IsNullable = true;
				colvarNewPhenomenonID.IsPrimaryKey = false;
				colvarNewPhenomenonID.IsForeignKey = true;
				colvarNewPhenomenonID.IsReadOnly = false;
				colvarNewPhenomenonID.DefaultSetting = @"";
				
					colvarNewPhenomenonID.ForeignKeyTableName = "Phenomenon";
				schema.Columns.Add(colvarNewPhenomenonID);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ObservationsDB"].AddSchema("DataSourceTransformation",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public Guid Id 
		{
			get { return GetColumnValue<Guid>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("TransformationTypeID")]
		[Bindable(true)]
		public Guid TransformationTypeID 
		{
			get { return GetColumnValue<Guid>(Columns.TransformationTypeID); }
			set { SetColumnValue(Columns.TransformationTypeID, value); }
		}
		  
		[XmlAttribute("PhenomenonID")]
		[Bindable(true)]
		public Guid PhenomenonID 
		{
			get { return GetColumnValue<Guid>(Columns.PhenomenonID); }
			set { SetColumnValue(Columns.PhenomenonID, value); }
		}
		  
		[XmlAttribute("PhenomenonOfferingID")]
		[Bindable(true)]
		public Guid? PhenomenonOfferingID 
		{
			get { return GetColumnValue<Guid?>(Columns.PhenomenonOfferingID); }
			set { SetColumnValue(Columns.PhenomenonOfferingID, value); }
		}
		  
		[XmlAttribute("PhenomenonUOMID")]
		[Bindable(true)]
		public Guid? PhenomenonUOMID 
		{
			get { return GetColumnValue<Guid?>(Columns.PhenomenonUOMID); }
			set { SetColumnValue(Columns.PhenomenonUOMID, value); }
		}
		  
		[XmlAttribute("StartDate")]
		[Bindable(true)]
		public DateTime? StartDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.StartDate); }
			set { SetColumnValue(Columns.StartDate, value); }
		}
		  
		[XmlAttribute("EndDate")]
		[Bindable(true)]
		public DateTime? EndDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.EndDate); }
			set { SetColumnValue(Columns.EndDate, value); }
		}
		  
		[XmlAttribute("DataSourceID")]
		[Bindable(true)]
		public Guid DataSourceID 
		{
			get { return GetColumnValue<Guid>(Columns.DataSourceID); }
			set { SetColumnValue(Columns.DataSourceID, value); }
		}
		  
		[XmlAttribute("Definition")]
		[Bindable(true)]
		public string Definition 
		{
			get { return GetColumnValue<string>(Columns.Definition); }
			set { SetColumnValue(Columns.Definition, value); }
		}
		  
		[XmlAttribute("NewPhenomenonOfferingID")]
		[Bindable(true)]
		public Guid? NewPhenomenonOfferingID 
		{
			get { return GetColumnValue<Guid?>(Columns.NewPhenomenonOfferingID); }
			set { SetColumnValue(Columns.NewPhenomenonOfferingID, value); }
		}
		  
		[XmlAttribute("NewPhenomenonUOMID")]
		[Bindable(true)]
		public Guid? NewPhenomenonUOMID 
		{
			get { return GetColumnValue<Guid?>(Columns.NewPhenomenonUOMID); }
			set { SetColumnValue(Columns.NewPhenomenonUOMID, value); }
		}
		  
		[XmlAttribute("Rank")]
		[Bindable(true)]
		public int? Rank 
		{
			get { return GetColumnValue<int?>(Columns.Rank); }
			set { SetColumnValue(Columns.Rank, value); }
		}
		  
		[XmlAttribute("SensorID")]
		[Bindable(true)]
		public Guid? SensorID 
		{
			get { return GetColumnValue<Guid?>(Columns.SensorID); }
			set { SetColumnValue(Columns.SensorID, value); }
		}
		  
		[XmlAttribute("UserId")]
		[Bindable(true)]
		public Guid? UserId 
		{
			get { return GetColumnValue<Guid?>(Columns.UserId); }
			set { SetColumnValue(Columns.UserId, value); }
		}
		  
		[XmlAttribute("AddedAt")]
		[Bindable(true)]
		public DateTime? AddedAt 
		{
			get { return GetColumnValue<DateTime?>(Columns.AddedAt); }
			set { SetColumnValue(Columns.AddedAt, value); }
		}
		  
		[XmlAttribute("UpdatedAt")]
		[Bindable(true)]
		public DateTime? UpdatedAt 
		{
			get { return GetColumnValue<DateTime?>(Columns.UpdatedAt); }
			set { SetColumnValue(Columns.UpdatedAt, value); }
		}
		  
		[XmlAttribute("RowVersion")]
		[Bindable(true)]
		public byte[] RowVersion 
		{
			get { return GetColumnValue<byte[]>(Columns.RowVersion); }
			set { SetColumnValue(Columns.RowVersion, value); }
		}
		  
		[XmlAttribute("ParamA")]
		[Bindable(true)]
		public double? ParamA 
		{
			get { return GetColumnValue<double?>(Columns.ParamA); }
			set { SetColumnValue(Columns.ParamA, value); }
		}
		  
		[XmlAttribute("ParamB")]
		[Bindable(true)]
		public double? ParamB 
		{
			get { return GetColumnValue<double?>(Columns.ParamB); }
			set { SetColumnValue(Columns.ParamB, value); }
		}
		  
		[XmlAttribute("ParamC")]
		[Bindable(true)]
		public double? ParamC 
		{
			get { return GetColumnValue<double?>(Columns.ParamC); }
			set { SetColumnValue(Columns.ParamC, value); }
		}
		  
		[XmlAttribute("ParamD")]
		[Bindable(true)]
		public double? ParamD 
		{
			get { return GetColumnValue<double?>(Columns.ParamD); }
			set { SetColumnValue(Columns.ParamD, value); }
		}
		  
		[XmlAttribute("ParamE")]
		[Bindable(true)]
		public double? ParamE 
		{
			get { return GetColumnValue<double?>(Columns.ParamE); }
			set { SetColumnValue(Columns.ParamE, value); }
		}
		  
		[XmlAttribute("ParamF")]
		[Bindable(true)]
		public double? ParamF 
		{
			get { return GetColumnValue<double?>(Columns.ParamF); }
			set { SetColumnValue(Columns.ParamF, value); }
		}
		  
		[XmlAttribute("ParamG")]
		[Bindable(true)]
		public double? ParamG 
		{
			get { return GetColumnValue<double?>(Columns.ParamG); }
			set { SetColumnValue(Columns.ParamG, value); }
		}
		  
		[XmlAttribute("ParamH")]
		[Bindable(true)]
		public double? ParamH 
		{
			get { return GetColumnValue<double?>(Columns.ParamH); }
			set { SetColumnValue(Columns.ParamH, value); }
		}
		  
		[XmlAttribute("ParamI")]
		[Bindable(true)]
		public double? ParamI 
		{
			get { return GetColumnValue<double?>(Columns.ParamI); }
			set { SetColumnValue(Columns.ParamI, value); }
		}
		  
		[XmlAttribute("ParamJ")]
		[Bindable(true)]
		public double? ParamJ 
		{
			get { return GetColumnValue<double?>(Columns.ParamJ); }
			set { SetColumnValue(Columns.ParamJ, value); }
		}
		  
		[XmlAttribute("ParamK")]
		[Bindable(true)]
		public double? ParamK 
		{
			get { return GetColumnValue<double?>(Columns.ParamK); }
			set { SetColumnValue(Columns.ParamK, value); }
		}
		  
		[XmlAttribute("ParamL")]
		[Bindable(true)]
		public double? ParamL 
		{
			get { return GetColumnValue<double?>(Columns.ParamL); }
			set { SetColumnValue(Columns.ParamL, value); }
		}
		  
		[XmlAttribute("ParamM")]
		[Bindable(true)]
		public double? ParamM 
		{
			get { return GetColumnValue<double?>(Columns.ParamM); }
			set { SetColumnValue(Columns.ParamM, value); }
		}
		  
		[XmlAttribute("ParamN")]
		[Bindable(true)]
		public double? ParamN 
		{
			get { return GetColumnValue<double?>(Columns.ParamN); }
			set { SetColumnValue(Columns.ParamN, value); }
		}
		  
		[XmlAttribute("ParamO")]
		[Bindable(true)]
		public double? ParamO 
		{
			get { return GetColumnValue<double?>(Columns.ParamO); }
			set { SetColumnValue(Columns.ParamO, value); }
		}
		  
		[XmlAttribute("ParamP")]
		[Bindable(true)]
		public double? ParamP 
		{
			get { return GetColumnValue<double?>(Columns.ParamP); }
			set { SetColumnValue(Columns.ParamP, value); }
		}
		  
		[XmlAttribute("ParamQ")]
		[Bindable(true)]
		public double? ParamQ 
		{
			get { return GetColumnValue<double?>(Columns.ParamQ); }
			set { SetColumnValue(Columns.ParamQ, value); }
		}
		  
		[XmlAttribute("ParamR")]
		[Bindable(true)]
		public double? ParamR 
		{
			get { return GetColumnValue<double?>(Columns.ParamR); }
			set { SetColumnValue(Columns.ParamR, value); }
		}
		  
		[XmlAttribute("ParamSX")]
		[Bindable(true)]
		public double? ParamSX 
		{
			get { return GetColumnValue<double?>(Columns.ParamSX); }
			set { SetColumnValue(Columns.ParamSX, value); }
		}
		  
		[XmlAttribute("ParamT")]
		[Bindable(true)]
		public double? ParamT 
		{
			get { return GetColumnValue<double?>(Columns.ParamT); }
			set { SetColumnValue(Columns.ParamT, value); }
		}
		  
		[XmlAttribute("ParamU")]
		[Bindable(true)]
		public double? ParamU 
		{
			get { return GetColumnValue<double?>(Columns.ParamU); }
			set { SetColumnValue(Columns.ParamU, value); }
		}
		  
		[XmlAttribute("ParamV")]
		[Bindable(true)]
		public double? ParamV 
		{
			get { return GetColumnValue<double?>(Columns.ParamV); }
			set { SetColumnValue(Columns.ParamV, value); }
		}
		  
		[XmlAttribute("ParamW")]
		[Bindable(true)]
		public double? ParamW 
		{
			get { return GetColumnValue<double?>(Columns.ParamW); }
			set { SetColumnValue(Columns.ParamW, value); }
		}
		  
		[XmlAttribute("ParamX")]
		[Bindable(true)]
		public double? ParamX 
		{
			get { return GetColumnValue<double?>(Columns.ParamX); }
			set { SetColumnValue(Columns.ParamX, value); }
		}
		  
		[XmlAttribute("ParamY")]
		[Bindable(true)]
		public double? ParamY 
		{
			get { return GetColumnValue<double?>(Columns.ParamY); }
			set { SetColumnValue(Columns.ParamY, value); }
		}
		  
		[XmlAttribute("NewPhenomenonID")]
		[Bindable(true)]
		public Guid? NewPhenomenonID 
		{
			get { return GetColumnValue<Guid?>(Columns.NewPhenomenonID); }
			set { SetColumnValue(Columns.NewPhenomenonID, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public SAEON.Observations.Data.DataLogCollection DataLogRecords()
		{
			return new SAEON.Observations.Data.DataLogCollection().Where(DataLog.Columns.DataSourceTransformationID, Id).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a AspnetUser ActiveRecord object related to this DataSourceTransformation
		/// 
		/// </summary>
		public SAEON.Observations.Data.AspnetUser AspnetUser
		{
			get { return SAEON.Observations.Data.AspnetUser.FetchByID(this.UserId); }
			set { SetColumnValue("UserId", value.UserId); }
		}
		
		
		/// <summary>
		/// Returns a DataSource ActiveRecord object related to this DataSourceTransformation
		/// 
		/// </summary>
		public SAEON.Observations.Data.DataSource DataSource
		{
			get { return SAEON.Observations.Data.DataSource.FetchByID(this.DataSourceID); }
			set { SetColumnValue("DataSourceID", value.Id); }
		}
		
		
		/// <summary>
		/// Returns a Phenomenon ActiveRecord object related to this DataSourceTransformation
		/// 
		/// </summary>
		public SAEON.Observations.Data.Phenomenon Phenomenon
		{
			get { return SAEON.Observations.Data.Phenomenon.FetchByID(this.NewPhenomenonID); }
			set { SetColumnValue("NewPhenomenonID", value.Id); }
		}
		
		
		/// <summary>
		/// Returns a Phenomenon ActiveRecord object related to this DataSourceTransformation
		/// 
		/// </summary>
		public SAEON.Observations.Data.Phenomenon PhenomenonToPhenomenonID
		{
			get { return SAEON.Observations.Data.Phenomenon.FetchByID(this.PhenomenonID); }
			set { SetColumnValue("PhenomenonID", value.Id); }
		}
		
		
		/// <summary>
		/// Returns a PhenomenonOffering ActiveRecord object related to this DataSourceTransformation
		/// 
		/// </summary>
		public SAEON.Observations.Data.PhenomenonOffering PhenomenonOffering
		{
			get { return SAEON.Observations.Data.PhenomenonOffering.FetchByID(this.NewPhenomenonOfferingID); }
			set { SetColumnValue("NewPhenomenonOfferingID", value.Id); }
		}
		
		
		/// <summary>
		/// Returns a PhenomenonOffering ActiveRecord object related to this DataSourceTransformation
		/// 
		/// </summary>
		public SAEON.Observations.Data.PhenomenonOffering PhenomenonOfferingToPhenomenonOfferingID
		{
			get { return SAEON.Observations.Data.PhenomenonOffering.FetchByID(this.PhenomenonOfferingID); }
			set { SetColumnValue("PhenomenonOfferingID", value.Id); }
		}
		
		
		/// <summary>
		/// Returns a PhenomenonUOM ActiveRecord object related to this DataSourceTransformation
		/// 
		/// </summary>
		public SAEON.Observations.Data.PhenomenonUOM PhenomenonUOM
		{
			get { return SAEON.Observations.Data.PhenomenonUOM.FetchByID(this.NewPhenomenonUOMID); }
			set { SetColumnValue("NewPhenomenonUOMID", value.Id); }
		}
		
		
		/// <summary>
		/// Returns a PhenomenonUOM ActiveRecord object related to this DataSourceTransformation
		/// 
		/// </summary>
		public SAEON.Observations.Data.PhenomenonUOM PhenomenonUOMToPhenomenonUOMID
		{
			get { return SAEON.Observations.Data.PhenomenonUOM.FetchByID(this.PhenomenonUOMID); }
			set { SetColumnValue("PhenomenonUOMID", value.Id); }
		}
		
		
		/// <summary>
		/// Returns a Sensor ActiveRecord object related to this DataSourceTransformation
		/// 
		/// </summary>
		public SAEON.Observations.Data.Sensor Sensor
		{
			get { return SAEON.Observations.Data.Sensor.FetchByID(this.SensorID); }
			set { SetColumnValue("SensorID", value.Id); }
		}
		
		
		/// <summary>
		/// Returns a TransformationType ActiveRecord object related to this DataSourceTransformation
		/// 
		/// </summary>
		public SAEON.Observations.Data.TransformationType TransformationType
		{
			get { return SAEON.Observations.Data.TransformationType.FetchByID(this.TransformationTypeID); }
			set { SetColumnValue("TransformationTypeID", value.Id); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(Guid varId,Guid varTransformationTypeID,Guid varPhenomenonID,Guid? varPhenomenonOfferingID,Guid? varPhenomenonUOMID,DateTime? varStartDate,DateTime? varEndDate,Guid varDataSourceID,string varDefinition,Guid? varNewPhenomenonOfferingID,Guid? varNewPhenomenonUOMID,int? varRank,Guid? varSensorID,Guid? varUserId,DateTime? varAddedAt,DateTime? varUpdatedAt,byte[] varRowVersion,double? varParamA,double? varParamB,double? varParamC,double? varParamD,double? varParamE,double? varParamF,double? varParamG,double? varParamH,double? varParamI,double? varParamJ,double? varParamK,double? varParamL,double? varParamM,double? varParamN,double? varParamO,double? varParamP,double? varParamQ,double? varParamR,double? varParamSX,double? varParamT,double? varParamU,double? varParamV,double? varParamW,double? varParamX,double? varParamY,Guid? varNewPhenomenonID)
		{
			DataSourceTransformation item = new DataSourceTransformation();
			
			item.Id = varId;
			
			item.TransformationTypeID = varTransformationTypeID;
			
			item.PhenomenonID = varPhenomenonID;
			
			item.PhenomenonOfferingID = varPhenomenonOfferingID;
			
			item.PhenomenonUOMID = varPhenomenonUOMID;
			
			item.StartDate = varStartDate;
			
			item.EndDate = varEndDate;
			
			item.DataSourceID = varDataSourceID;
			
			item.Definition = varDefinition;
			
			item.NewPhenomenonOfferingID = varNewPhenomenonOfferingID;
			
			item.NewPhenomenonUOMID = varNewPhenomenonUOMID;
			
			item.Rank = varRank;
			
			item.SensorID = varSensorID;
			
			item.UserId = varUserId;
			
			item.AddedAt = varAddedAt;
			
			item.UpdatedAt = varUpdatedAt;
			
			item.RowVersion = varRowVersion;
			
			item.ParamA = varParamA;
			
			item.ParamB = varParamB;
			
			item.ParamC = varParamC;
			
			item.ParamD = varParamD;
			
			item.ParamE = varParamE;
			
			item.ParamF = varParamF;
			
			item.ParamG = varParamG;
			
			item.ParamH = varParamH;
			
			item.ParamI = varParamI;
			
			item.ParamJ = varParamJ;
			
			item.ParamK = varParamK;
			
			item.ParamL = varParamL;
			
			item.ParamM = varParamM;
			
			item.ParamN = varParamN;
			
			item.ParamO = varParamO;
			
			item.ParamP = varParamP;
			
			item.ParamQ = varParamQ;
			
			item.ParamR = varParamR;
			
			item.ParamSX = varParamSX;
			
			item.ParamT = varParamT;
			
			item.ParamU = varParamU;
			
			item.ParamV = varParamV;
			
			item.ParamW = varParamW;
			
			item.ParamX = varParamX;
			
			item.ParamY = varParamY;
			
			item.NewPhenomenonID = varNewPhenomenonID;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(Guid varId,Guid varTransformationTypeID,Guid varPhenomenonID,Guid? varPhenomenonOfferingID,Guid? varPhenomenonUOMID,DateTime? varStartDate,DateTime? varEndDate,Guid varDataSourceID,string varDefinition,Guid? varNewPhenomenonOfferingID,Guid? varNewPhenomenonUOMID,int? varRank,Guid? varSensorID,Guid? varUserId,DateTime? varAddedAt,DateTime? varUpdatedAt,byte[] varRowVersion,double? varParamA,double? varParamB,double? varParamC,double? varParamD,double? varParamE,double? varParamF,double? varParamG,double? varParamH,double? varParamI,double? varParamJ,double? varParamK,double? varParamL,double? varParamM,double? varParamN,double? varParamO,double? varParamP,double? varParamQ,double? varParamR,double? varParamSX,double? varParamT,double? varParamU,double? varParamV,double? varParamW,double? varParamX,double? varParamY,Guid? varNewPhenomenonID)
		{
			DataSourceTransformation item = new DataSourceTransformation();
			
				item.Id = varId;
			
				item.TransformationTypeID = varTransformationTypeID;
			
				item.PhenomenonID = varPhenomenonID;
			
				item.PhenomenonOfferingID = varPhenomenonOfferingID;
			
				item.PhenomenonUOMID = varPhenomenonUOMID;
			
				item.StartDate = varStartDate;
			
				item.EndDate = varEndDate;
			
				item.DataSourceID = varDataSourceID;
			
				item.Definition = varDefinition;
			
				item.NewPhenomenonOfferingID = varNewPhenomenonOfferingID;
			
				item.NewPhenomenonUOMID = varNewPhenomenonUOMID;
			
				item.Rank = varRank;
			
				item.SensorID = varSensorID;
			
				item.UserId = varUserId;
			
				item.AddedAt = varAddedAt;
			
				item.UpdatedAt = varUpdatedAt;
			
				item.RowVersion = varRowVersion;
			
				item.ParamA = varParamA;
			
				item.ParamB = varParamB;
			
				item.ParamC = varParamC;
			
				item.ParamD = varParamD;
			
				item.ParamE = varParamE;
			
				item.ParamF = varParamF;
			
				item.ParamG = varParamG;
			
				item.ParamH = varParamH;
			
				item.ParamI = varParamI;
			
				item.ParamJ = varParamJ;
			
				item.ParamK = varParamK;
			
				item.ParamL = varParamL;
			
				item.ParamM = varParamM;
			
				item.ParamN = varParamN;
			
				item.ParamO = varParamO;
			
				item.ParamP = varParamP;
			
				item.ParamQ = varParamQ;
			
				item.ParamR = varParamR;
			
				item.ParamSX = varParamSX;
			
				item.ParamT = varParamT;
			
				item.ParamU = varParamU;
			
				item.ParamV = varParamV;
			
				item.ParamW = varParamW;
			
				item.ParamX = varParamX;
			
				item.ParamY = varParamY;
			
				item.NewPhenomenonID = varNewPhenomenonID;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn TransformationTypeIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PhenomenonIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn PhenomenonOfferingIDColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn PhenomenonUOMIDColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn StartDateColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn EndDateColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DataSourceIDColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn DefinitionColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn NewPhenomenonOfferingIDColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn NewPhenomenonUOMIDColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn RankColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn SensorIDColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn UserIdColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn AddedAtColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn UpdatedAtColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn RowVersionColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn ParamAColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn ParamBColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn ParamCColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn ParamDColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn ParamEColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn ParamFColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn ParamGColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn ParamHColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn ParamIColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn ParamJColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn ParamKColumn
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        public static TableSchema.TableColumn ParamLColumn
        {
            get { return Schema.Columns[28]; }
        }
        
        
        
        public static TableSchema.TableColumn ParamMColumn
        {
            get { return Schema.Columns[29]; }
        }
        
        
        
        public static TableSchema.TableColumn ParamNColumn
        {
            get { return Schema.Columns[30]; }
        }
        
        
        
        public static TableSchema.TableColumn ParamOColumn
        {
            get { return Schema.Columns[31]; }
        }
        
        
        
        public static TableSchema.TableColumn ParamPColumn
        {
            get { return Schema.Columns[32]; }
        }
        
        
        
        public static TableSchema.TableColumn ParamQColumn
        {
            get { return Schema.Columns[33]; }
        }
        
        
        
        public static TableSchema.TableColumn ParamRColumn
        {
            get { return Schema.Columns[34]; }
        }
        
        
        
        public static TableSchema.TableColumn ParamSXColumn
        {
            get { return Schema.Columns[35]; }
        }
        
        
        
        public static TableSchema.TableColumn ParamTColumn
        {
            get { return Schema.Columns[36]; }
        }
        
        
        
        public static TableSchema.TableColumn ParamUColumn
        {
            get { return Schema.Columns[37]; }
        }
        
        
        
        public static TableSchema.TableColumn ParamVColumn
        {
            get { return Schema.Columns[38]; }
        }
        
        
        
        public static TableSchema.TableColumn ParamWColumn
        {
            get { return Schema.Columns[39]; }
        }
        
        
        
        public static TableSchema.TableColumn ParamXColumn
        {
            get { return Schema.Columns[40]; }
        }
        
        
        
        public static TableSchema.TableColumn ParamYColumn
        {
            get { return Schema.Columns[41]; }
        }
        
        
        
        public static TableSchema.TableColumn NewPhenomenonIDColumn
        {
            get { return Schema.Columns[42]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string TransformationTypeID = @"TransformationTypeID";
			 public static string PhenomenonID = @"PhenomenonID";
			 public static string PhenomenonOfferingID = @"PhenomenonOfferingID";
			 public static string PhenomenonUOMID = @"PhenomenonUOMID";
			 public static string StartDate = @"StartDate";
			 public static string EndDate = @"EndDate";
			 public static string DataSourceID = @"DataSourceID";
			 public static string Definition = @"Definition";
			 public static string NewPhenomenonOfferingID = @"NewPhenomenonOfferingID";
			 public static string NewPhenomenonUOMID = @"NewPhenomenonUOMID";
			 public static string Rank = @"Rank";
			 public static string SensorID = @"SensorID";
			 public static string UserId = @"UserId";
			 public static string AddedAt = @"AddedAt";
			 public static string UpdatedAt = @"UpdatedAt";
			 public static string RowVersion = @"RowVersion";
			 public static string ParamA = @"ParamA";
			 public static string ParamB = @"ParamB";
			 public static string ParamC = @"ParamC";
			 public static string ParamD = @"ParamD";
			 public static string ParamE = @"ParamE";
			 public static string ParamF = @"ParamF";
			 public static string ParamG = @"ParamG";
			 public static string ParamH = @"ParamH";
			 public static string ParamI = @"ParamI";
			 public static string ParamJ = @"ParamJ";
			 public static string ParamK = @"ParamK";
			 public static string ParamL = @"ParamL";
			 public static string ParamM = @"ParamM";
			 public static string ParamN = @"ParamN";
			 public static string ParamO = @"ParamO";
			 public static string ParamP = @"ParamP";
			 public static string ParamQ = @"ParamQ";
			 public static string ParamR = @"ParamR";
			 public static string ParamSX = @"ParamS";
			 public static string ParamT = @"ParamT";
			 public static string ParamU = @"ParamU";
			 public static string ParamV = @"ParamV";
			 public static string ParamW = @"ParamW";
			 public static string ParamX = @"ParamX";
			 public static string ParamY = @"ParamY";
			 public static string NewPhenomenonID = @"NewPhenomenonID";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
