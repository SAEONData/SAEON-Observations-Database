using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SAEON.Observations.Data{
    /// <summary>
    /// Strongly-typed collection for the VObservationsList class.
    /// </summary>
    [Serializable]
    public partial class VObservationsListCollection : ReadOnlyList<VObservationsList, VObservationsListCollection>
    {        
        public VObservationsListCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the vObservationsList view.
    /// </summary>
    [Serializable]
    public partial class VObservationsList : ReadOnlyRecord<VObservationsList>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("vObservationsList", TableType.View, DataService.GetInstance("ObservationsDB"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
                colvarId.ColumnName = "ID";
                colvarId.DataType = DbType.Int32;
                colvarId.MaxLength = 0;
                colvarId.AutoIncrement = false;
                colvarId.IsNullable = false;
                colvarId.IsPrimaryKey = false;
                colvarId.IsForeignKey = false;
                colvarId.IsReadOnly = false;
                
                schema.Columns.Add(colvarId);
                
                TableSchema.TableColumn colvarImportBatchID = new TableSchema.TableColumn(schema);
                colvarImportBatchID.ColumnName = "ImportBatchID";
                colvarImportBatchID.DataType = DbType.Guid;
                colvarImportBatchID.MaxLength = 0;
                colvarImportBatchID.AutoIncrement = false;
                colvarImportBatchID.IsNullable = false;
                colvarImportBatchID.IsPrimaryKey = false;
                colvarImportBatchID.IsForeignKey = false;
                colvarImportBatchID.IsReadOnly = false;
                
                schema.Columns.Add(colvarImportBatchID);
                
                TableSchema.TableColumn colvarValueDate = new TableSchema.TableColumn(schema);
                colvarValueDate.ColumnName = "ValueDate";
                colvarValueDate.DataType = DbType.DateTime;
                colvarValueDate.MaxLength = 0;
                colvarValueDate.AutoIncrement = false;
                colvarValueDate.IsNullable = false;
                colvarValueDate.IsPrimaryKey = false;
                colvarValueDate.IsForeignKey = false;
                colvarValueDate.IsReadOnly = false;
                
                schema.Columns.Add(colvarValueDate);
                
                TableSchema.TableColumn colvarRawValue = new TableSchema.TableColumn(schema);
                colvarRawValue.ColumnName = "RawValue";
                colvarRawValue.DataType = DbType.Double;
                colvarRawValue.MaxLength = 0;
                colvarRawValue.AutoIncrement = false;
                colvarRawValue.IsNullable = true;
                colvarRawValue.IsPrimaryKey = false;
                colvarRawValue.IsForeignKey = false;
                colvarRawValue.IsReadOnly = false;
                
                schema.Columns.Add(colvarRawValue);
                
                TableSchema.TableColumn colvarDataValue = new TableSchema.TableColumn(schema);
                colvarDataValue.ColumnName = "DataValue";
                colvarDataValue.DataType = DbType.Double;
                colvarDataValue.MaxLength = 0;
                colvarDataValue.AutoIncrement = false;
                colvarDataValue.IsNullable = true;
                colvarDataValue.IsPrimaryKey = false;
                colvarDataValue.IsForeignKey = false;
                colvarDataValue.IsReadOnly = false;
                
                schema.Columns.Add(colvarDataValue);
                
                TableSchema.TableColumn colvarComment = new TableSchema.TableColumn(schema);
                colvarComment.ColumnName = "Comment";
                colvarComment.DataType = DbType.AnsiString;
                colvarComment.MaxLength = 250;
                colvarComment.AutoIncrement = false;
                colvarComment.IsNullable = true;
                colvarComment.IsPrimaryKey = false;
                colvarComment.IsForeignKey = false;
                colvarComment.IsReadOnly = false;
                
                schema.Columns.Add(colvarComment);
                
                TableSchema.TableColumn colvarCorrelationID = new TableSchema.TableColumn(schema);
                colvarCorrelationID.ColumnName = "CorrelationID";
                colvarCorrelationID.DataType = DbType.Guid;
                colvarCorrelationID.MaxLength = 0;
                colvarCorrelationID.AutoIncrement = false;
                colvarCorrelationID.IsNullable = true;
                colvarCorrelationID.IsPrimaryKey = false;
                colvarCorrelationID.IsForeignKey = false;
                colvarCorrelationID.IsReadOnly = false;
                
                schema.Columns.Add(colvarCorrelationID);
                
                TableSchema.TableColumn colvarSensorCode = new TableSchema.TableColumn(schema);
                colvarSensorCode.ColumnName = "SensorCode";
                colvarSensorCode.DataType = DbType.AnsiString;
                colvarSensorCode.MaxLength = 50;
                colvarSensorCode.AutoIncrement = false;
                colvarSensorCode.IsNullable = false;
                colvarSensorCode.IsPrimaryKey = false;
                colvarSensorCode.IsForeignKey = false;
                colvarSensorCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarSensorCode);
                
                TableSchema.TableColumn colvarSensorName = new TableSchema.TableColumn(schema);
                colvarSensorName.ColumnName = "SensorName";
                colvarSensorName.DataType = DbType.AnsiString;
                colvarSensorName.MaxLength = 150;
                colvarSensorName.AutoIncrement = false;
                colvarSensorName.IsNullable = false;
                colvarSensorName.IsPrimaryKey = false;
                colvarSensorName.IsForeignKey = false;
                colvarSensorName.IsReadOnly = false;
                
                schema.Columns.Add(colvarSensorName);
                
                TableSchema.TableColumn colvarPhenomenonCode = new TableSchema.TableColumn(schema);
                colvarPhenomenonCode.ColumnName = "PhenomenonCode";
                colvarPhenomenonCode.DataType = DbType.AnsiString;
                colvarPhenomenonCode.MaxLength = 50;
                colvarPhenomenonCode.AutoIncrement = false;
                colvarPhenomenonCode.IsNullable = false;
                colvarPhenomenonCode.IsPrimaryKey = false;
                colvarPhenomenonCode.IsForeignKey = false;
                colvarPhenomenonCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhenomenonCode);
                
                TableSchema.TableColumn colvarPhenomenonName = new TableSchema.TableColumn(schema);
                colvarPhenomenonName.ColumnName = "PhenomenonName";
                colvarPhenomenonName.DataType = DbType.AnsiString;
                colvarPhenomenonName.MaxLength = 150;
                colvarPhenomenonName.AutoIncrement = false;
                colvarPhenomenonName.IsNullable = false;
                colvarPhenomenonName.IsPrimaryKey = false;
                colvarPhenomenonName.IsForeignKey = false;
                colvarPhenomenonName.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhenomenonName);
                
                TableSchema.TableColumn colvarOfferingCode = new TableSchema.TableColumn(schema);
                colvarOfferingCode.ColumnName = "OfferingCode";
                colvarOfferingCode.DataType = DbType.AnsiString;
                colvarOfferingCode.MaxLength = 50;
                colvarOfferingCode.AutoIncrement = false;
                colvarOfferingCode.IsNullable = false;
                colvarOfferingCode.IsPrimaryKey = false;
                colvarOfferingCode.IsForeignKey = false;
                colvarOfferingCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarOfferingCode);
                
                TableSchema.TableColumn colvarOfferingName = new TableSchema.TableColumn(schema);
                colvarOfferingName.ColumnName = "OfferingName";
                colvarOfferingName.DataType = DbType.AnsiString;
                colvarOfferingName.MaxLength = 150;
                colvarOfferingName.AutoIncrement = false;
                colvarOfferingName.IsNullable = false;
                colvarOfferingName.IsPrimaryKey = false;
                colvarOfferingName.IsForeignKey = false;
                colvarOfferingName.IsReadOnly = false;
                
                schema.Columns.Add(colvarOfferingName);
                
                TableSchema.TableColumn colvarUnitOfMeasureCode = new TableSchema.TableColumn(schema);
                colvarUnitOfMeasureCode.ColumnName = "UnitOfMeasureCode";
                colvarUnitOfMeasureCode.DataType = DbType.AnsiString;
                colvarUnitOfMeasureCode.MaxLength = 50;
                colvarUnitOfMeasureCode.AutoIncrement = false;
                colvarUnitOfMeasureCode.IsNullable = false;
                colvarUnitOfMeasureCode.IsPrimaryKey = false;
                colvarUnitOfMeasureCode.IsForeignKey = false;
                colvarUnitOfMeasureCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarUnitOfMeasureCode);
                
                TableSchema.TableColumn colvarUnitOfMeasureUnit = new TableSchema.TableColumn(schema);
                colvarUnitOfMeasureUnit.ColumnName = "UnitOfMeasureUnit";
                colvarUnitOfMeasureUnit.DataType = DbType.AnsiString;
                colvarUnitOfMeasureUnit.MaxLength = 100;
                colvarUnitOfMeasureUnit.AutoIncrement = false;
                colvarUnitOfMeasureUnit.IsNullable = false;
                colvarUnitOfMeasureUnit.IsPrimaryKey = false;
                colvarUnitOfMeasureUnit.IsForeignKey = false;
                colvarUnitOfMeasureUnit.IsReadOnly = false;
                
                schema.Columns.Add(colvarUnitOfMeasureUnit);
                
                TableSchema.TableColumn colvarStatusCode = new TableSchema.TableColumn(schema);
                colvarStatusCode.ColumnName = "StatusCode";
                colvarStatusCode.DataType = DbType.AnsiString;
                colvarStatusCode.MaxLength = 50;
                colvarStatusCode.AutoIncrement = false;
                colvarStatusCode.IsNullable = true;
                colvarStatusCode.IsPrimaryKey = false;
                colvarStatusCode.IsForeignKey = false;
                colvarStatusCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarStatusCode);
                
                TableSchema.TableColumn colvarStatusName = new TableSchema.TableColumn(schema);
                colvarStatusName.ColumnName = "StatusName";
                colvarStatusName.DataType = DbType.AnsiString;
                colvarStatusName.MaxLength = 150;
                colvarStatusName.AutoIncrement = false;
                colvarStatusName.IsNullable = true;
                colvarStatusName.IsPrimaryKey = false;
                colvarStatusName.IsForeignKey = false;
                colvarStatusName.IsReadOnly = false;
                
                schema.Columns.Add(colvarStatusName);
                
                TableSchema.TableColumn colvarStatusReasonCode = new TableSchema.TableColumn(schema);
                colvarStatusReasonCode.ColumnName = "StatusReasonCode";
                colvarStatusReasonCode.DataType = DbType.AnsiString;
                colvarStatusReasonCode.MaxLength = 50;
                colvarStatusReasonCode.AutoIncrement = false;
                colvarStatusReasonCode.IsNullable = true;
                colvarStatusReasonCode.IsPrimaryKey = false;
                colvarStatusReasonCode.IsForeignKey = false;
                colvarStatusReasonCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarStatusReasonCode);
                
                TableSchema.TableColumn colvarStatusReasonName = new TableSchema.TableColumn(schema);
                colvarStatusReasonName.ColumnName = "StatusReasonName";
                colvarStatusReasonName.DataType = DbType.AnsiString;
                colvarStatusReasonName.MaxLength = 150;
                colvarStatusReasonName.AutoIncrement = false;
                colvarStatusReasonName.IsNullable = true;
                colvarStatusReasonName.IsPrimaryKey = false;
                colvarStatusReasonName.IsForeignKey = false;
                colvarStatusReasonName.IsReadOnly = false;
                
                schema.Columns.Add(colvarStatusReasonName);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ObservationsDB"].AddSchema("vObservationsList",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VObservationsList()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VObservationsList(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VObservationsList(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VObservationsList(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Id")]
        [Bindable(true)]
        public int Id 
	    {
		    get
		    {
			    return GetColumnValue<int>("ID");
		    }
            set 
		    {
			    SetColumnValue("ID", value);
            }
        }
	      
        [XmlAttribute("ImportBatchID")]
        [Bindable(true)]
        public Guid ImportBatchID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("ImportBatchID");
		    }
            set 
		    {
			    SetColumnValue("ImportBatchID", value);
            }
        }
	      
        [XmlAttribute("ValueDate")]
        [Bindable(true)]
        public DateTime ValueDate 
	    {
		    get
		    {
			    return GetColumnValue<DateTime>("ValueDate");
		    }
            set 
		    {
			    SetColumnValue("ValueDate", value);
            }
        }
	      
        [XmlAttribute("RawValue")]
        [Bindable(true)]
        public double? RawValue 
	    {
		    get
		    {
			    return GetColumnValue<double?>("RawValue");
		    }
            set 
		    {
			    SetColumnValue("RawValue", value);
            }
        }
	      
        [XmlAttribute("DataValue")]
        [Bindable(true)]
        public double? DataValue 
	    {
		    get
		    {
			    return GetColumnValue<double?>("DataValue");
		    }
            set 
		    {
			    SetColumnValue("DataValue", value);
            }
        }
	      
        [XmlAttribute("Comment")]
        [Bindable(true)]
        public string Comment 
	    {
		    get
		    {
			    return GetColumnValue<string>("Comment");
		    }
            set 
		    {
			    SetColumnValue("Comment", value);
            }
        }
	      
        [XmlAttribute("CorrelationID")]
        [Bindable(true)]
        public Guid? CorrelationID 
	    {
		    get
		    {
			    return GetColumnValue<Guid?>("CorrelationID");
		    }
            set 
		    {
			    SetColumnValue("CorrelationID", value);
            }
        }
	      
        [XmlAttribute("SensorCode")]
        [Bindable(true)]
        public string SensorCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("SensorCode");
		    }
            set 
		    {
			    SetColumnValue("SensorCode", value);
            }
        }
	      
        [XmlAttribute("SensorName")]
        [Bindable(true)]
        public string SensorName 
	    {
		    get
		    {
			    return GetColumnValue<string>("SensorName");
		    }
            set 
		    {
			    SetColumnValue("SensorName", value);
            }
        }
	      
        [XmlAttribute("PhenomenonCode")]
        [Bindable(true)]
        public string PhenomenonCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("PhenomenonCode");
		    }
            set 
		    {
			    SetColumnValue("PhenomenonCode", value);
            }
        }
	      
        [XmlAttribute("PhenomenonName")]
        [Bindable(true)]
        public string PhenomenonName 
	    {
		    get
		    {
			    return GetColumnValue<string>("PhenomenonName");
		    }
            set 
		    {
			    SetColumnValue("PhenomenonName", value);
            }
        }
	      
        [XmlAttribute("OfferingCode")]
        [Bindable(true)]
        public string OfferingCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("OfferingCode");
		    }
            set 
		    {
			    SetColumnValue("OfferingCode", value);
            }
        }
	      
        [XmlAttribute("OfferingName")]
        [Bindable(true)]
        public string OfferingName 
	    {
		    get
		    {
			    return GetColumnValue<string>("OfferingName");
		    }
            set 
		    {
			    SetColumnValue("OfferingName", value);
            }
        }
	      
        [XmlAttribute("UnitOfMeasureCode")]
        [Bindable(true)]
        public string UnitOfMeasureCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("UnitOfMeasureCode");
		    }
            set 
		    {
			    SetColumnValue("UnitOfMeasureCode", value);
            }
        }
	      
        [XmlAttribute("UnitOfMeasureUnit")]
        [Bindable(true)]
        public string UnitOfMeasureUnit 
	    {
		    get
		    {
			    return GetColumnValue<string>("UnitOfMeasureUnit");
		    }
            set 
		    {
			    SetColumnValue("UnitOfMeasureUnit", value);
            }
        }
	      
        [XmlAttribute("StatusCode")]
        [Bindable(true)]
        public string StatusCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("StatusCode");
		    }
            set 
		    {
			    SetColumnValue("StatusCode", value);
            }
        }
	      
        [XmlAttribute("StatusName")]
        [Bindable(true)]
        public string StatusName 
	    {
		    get
		    {
			    return GetColumnValue<string>("StatusName");
		    }
            set 
		    {
			    SetColumnValue("StatusName", value);
            }
        }
	      
        [XmlAttribute("StatusReasonCode")]
        [Bindable(true)]
        public string StatusReasonCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("StatusReasonCode");
		    }
            set 
		    {
			    SetColumnValue("StatusReasonCode", value);
            }
        }
	      
        [XmlAttribute("StatusReasonName")]
        [Bindable(true)]
        public string StatusReasonName 
	    {
		    get
		    {
			    return GetColumnValue<string>("StatusReasonName");
		    }
            set 
		    {
			    SetColumnValue("StatusReasonName", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Id = @"ID";
            
            public static string ImportBatchID = @"ImportBatchID";
            
            public static string ValueDate = @"ValueDate";
            
            public static string RawValue = @"RawValue";
            
            public static string DataValue = @"DataValue";
            
            public static string Comment = @"Comment";
            
            public static string CorrelationID = @"CorrelationID";
            
            public static string SensorCode = @"SensorCode";
            
            public static string SensorName = @"SensorName";
            
            public static string PhenomenonCode = @"PhenomenonCode";
            
            public static string PhenomenonName = @"PhenomenonName";
            
            public static string OfferingCode = @"OfferingCode";
            
            public static string OfferingName = @"OfferingName";
            
            public static string UnitOfMeasureCode = @"UnitOfMeasureCode";
            
            public static string UnitOfMeasureUnit = @"UnitOfMeasureUnit";
            
            public static string StatusCode = @"StatusCode";
            
            public static string StatusName = @"StatusName";
            
            public static string StatusReasonCode = @"StatusReasonCode";
            
            public static string StatusReasonName = @"StatusReasonName";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
