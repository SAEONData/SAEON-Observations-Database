using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SAEON.Observations.Data{
    /// <summary>
    /// Strongly-typed collection for the VImportBatch class.
    /// </summary>
    [Serializable]
    public partial class VImportBatchCollection : ReadOnlyList<VImportBatch, VImportBatchCollection>
    {        
        public VImportBatchCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the vImportBatch view.
    /// </summary>
    [Serializable]
    public partial class VImportBatch : ReadOnlyRecord<VImportBatch>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("vImportBatch", TableType.View, DataService.GetInstance("ObservationsDB"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
                colvarId.ColumnName = "ID";
                colvarId.DataType = DbType.Guid;
                colvarId.MaxLength = 0;
                colvarId.AutoIncrement = false;
                colvarId.IsNullable = false;
                colvarId.IsPrimaryKey = false;
                colvarId.IsForeignKey = false;
                colvarId.IsReadOnly = false;
                
                schema.Columns.Add(colvarId);
                
                TableSchema.TableColumn colvarCode = new TableSchema.TableColumn(schema);
                colvarCode.ColumnName = "Code";
                colvarCode.DataType = DbType.Int32;
                colvarCode.MaxLength = 0;
                colvarCode.AutoIncrement = false;
                colvarCode.IsNullable = false;
                colvarCode.IsPrimaryKey = false;
                colvarCode.IsForeignKey = false;
                colvarCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarCode);
                
                TableSchema.TableColumn colvarDataSourceID = new TableSchema.TableColumn(schema);
                colvarDataSourceID.ColumnName = "DataSourceID";
                colvarDataSourceID.DataType = DbType.Guid;
                colvarDataSourceID.MaxLength = 0;
                colvarDataSourceID.AutoIncrement = false;
                colvarDataSourceID.IsNullable = false;
                colvarDataSourceID.IsPrimaryKey = false;
                colvarDataSourceID.IsForeignKey = false;
                colvarDataSourceID.IsReadOnly = false;
                
                schema.Columns.Add(colvarDataSourceID);
                
                TableSchema.TableColumn colvarImportDate = new TableSchema.TableColumn(schema);
                colvarImportDate.ColumnName = "ImportDate";
                colvarImportDate.DataType = DbType.DateTime;
                colvarImportDate.MaxLength = 0;
                colvarImportDate.AutoIncrement = false;
                colvarImportDate.IsNullable = false;
                colvarImportDate.IsPrimaryKey = false;
                colvarImportDate.IsForeignKey = false;
                colvarImportDate.IsReadOnly = false;
                
                schema.Columns.Add(colvarImportDate);
                
                TableSchema.TableColumn colvarStatus = new TableSchema.TableColumn(schema);
                colvarStatus.ColumnName = "Status";
                colvarStatus.DataType = DbType.Int32;
                colvarStatus.MaxLength = 0;
                colvarStatus.AutoIncrement = false;
                colvarStatus.IsNullable = false;
                colvarStatus.IsPrimaryKey = false;
                colvarStatus.IsForeignKey = false;
                colvarStatus.IsReadOnly = false;
                
                schema.Columns.Add(colvarStatus);
                
                TableSchema.TableColumn colvarDataSourceName = new TableSchema.TableColumn(schema);
                colvarDataSourceName.ColumnName = "DataSourceName";
                colvarDataSourceName.DataType = DbType.AnsiString;
                colvarDataSourceName.MaxLength = 150;
                colvarDataSourceName.AutoIncrement = false;
                colvarDataSourceName.IsNullable = false;
                colvarDataSourceName.IsPrimaryKey = false;
                colvarDataSourceName.IsForeignKey = false;
                colvarDataSourceName.IsReadOnly = false;
                
                schema.Columns.Add(colvarDataSourceName);
                
                TableSchema.TableColumn colvarUserId = new TableSchema.TableColumn(schema);
                colvarUserId.ColumnName = "UserId";
                colvarUserId.DataType = DbType.Guid;
                colvarUserId.MaxLength = 0;
                colvarUserId.AutoIncrement = false;
                colvarUserId.IsNullable = false;
                colvarUserId.IsPrimaryKey = false;
                colvarUserId.IsForeignKey = false;
                colvarUserId.IsReadOnly = false;
                
                schema.Columns.Add(colvarUserId);
                
                TableSchema.TableColumn colvarUserName = new TableSchema.TableColumn(schema);
                colvarUserName.ColumnName = "UserName";
                colvarUserName.DataType = DbType.String;
                colvarUserName.MaxLength = 256;
                colvarUserName.AutoIncrement = false;
                colvarUserName.IsNullable = false;
                colvarUserName.IsPrimaryKey = false;
                colvarUserName.IsForeignKey = false;
                colvarUserName.IsReadOnly = false;
                
                schema.Columns.Add(colvarUserName);
                
                TableSchema.TableColumn colvarStatusDescription = new TableSchema.TableColumn(schema);
                colvarStatusDescription.ColumnName = "StatusDescription";
                colvarStatusDescription.DataType = DbType.AnsiString;
                colvarStatusDescription.MaxLength = 17;
                colvarStatusDescription.AutoIncrement = false;
                colvarStatusDescription.IsNullable = true;
                colvarStatusDescription.IsPrimaryKey = false;
                colvarStatusDescription.IsForeignKey = false;
                colvarStatusDescription.IsReadOnly = false;
                
                schema.Columns.Add(colvarStatusDescription);
                
                TableSchema.TableColumn colvarFileName = new TableSchema.TableColumn(schema);
                colvarFileName.ColumnName = "FileName";
                colvarFileName.DataType = DbType.AnsiString;
                colvarFileName.MaxLength = 250;
                colvarFileName.AutoIncrement = false;
                colvarFileName.IsNullable = true;
                colvarFileName.IsPrimaryKey = false;
                colvarFileName.IsForeignKey = false;
                colvarFileName.IsReadOnly = false;
                
                schema.Columns.Add(colvarFileName);
                
                TableSchema.TableColumn colvarLogFileName = new TableSchema.TableColumn(schema);
                colvarLogFileName.ColumnName = "LogFileName";
                colvarLogFileName.DataType = DbType.AnsiString;
                colvarLogFileName.MaxLength = 250;
                colvarLogFileName.AutoIncrement = false;
                colvarLogFileName.IsNullable = true;
                colvarLogFileName.IsPrimaryKey = false;
                colvarLogFileName.IsForeignKey = false;
                colvarLogFileName.IsReadOnly = false;
                
                schema.Columns.Add(colvarLogFileName);
                
                TableSchema.TableColumn colvarIssues = new TableSchema.TableColumn(schema);
                colvarIssues.ColumnName = "Issues";
                colvarIssues.DataType = DbType.AnsiString;
                colvarIssues.MaxLength = 1000;
                colvarIssues.AutoIncrement = false;
                colvarIssues.IsNullable = true;
                colvarIssues.IsPrimaryKey = false;
                colvarIssues.IsForeignKey = false;
                colvarIssues.IsReadOnly = false;
                
                schema.Columns.Add(colvarIssues);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ObservationsDB"].AddSchema("vImportBatch",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VImportBatch()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VImportBatch(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VImportBatch(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VImportBatch(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Id")]
        [Bindable(true)]
        public Guid Id 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("ID");
		    }
            set 
		    {
			    SetColumnValue("ID", value);
            }
        }
	      
        [XmlAttribute("Code")]
        [Bindable(true)]
        public int Code 
	    {
		    get
		    {
			    return GetColumnValue<int>("Code");
		    }
            set 
		    {
			    SetColumnValue("Code", value);
            }
        }
	      
        [XmlAttribute("DataSourceID")]
        [Bindable(true)]
        public Guid DataSourceID 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("DataSourceID");
		    }
            set 
		    {
			    SetColumnValue("DataSourceID", value);
            }
        }
	      
        [XmlAttribute("ImportDate")]
        [Bindable(true)]
        public DateTime ImportDate 
	    {
		    get
		    {
			    return GetColumnValue<DateTime>("ImportDate");
		    }
            set 
		    {
			    SetColumnValue("ImportDate", value);
            }
        }
	      
        [XmlAttribute("Status")]
        [Bindable(true)]
        public int Status 
	    {
		    get
		    {
			    return GetColumnValue<int>("Status");
		    }
            set 
		    {
			    SetColumnValue("Status", value);
            }
        }
	      
        [XmlAttribute("DataSourceName")]
        [Bindable(true)]
        public string DataSourceName 
	    {
		    get
		    {
			    return GetColumnValue<string>("DataSourceName");
		    }
            set 
		    {
			    SetColumnValue("DataSourceName", value);
            }
        }
	      
        [XmlAttribute("UserId")]
        [Bindable(true)]
        public Guid UserId 
	    {
		    get
		    {
			    return GetColumnValue<Guid>("UserId");
		    }
            set 
		    {
			    SetColumnValue("UserId", value);
            }
        }
	      
        [XmlAttribute("UserName")]
        [Bindable(true)]
        public string UserName 
	    {
		    get
		    {
			    return GetColumnValue<string>("UserName");
		    }
            set 
		    {
			    SetColumnValue("UserName", value);
            }
        }
	      
        [XmlAttribute("StatusDescription")]
        [Bindable(true)]
        public string StatusDescription 
	    {
		    get
		    {
			    return GetColumnValue<string>("StatusDescription");
		    }
            set 
		    {
			    SetColumnValue("StatusDescription", value);
            }
        }
	      
        [XmlAttribute("FileName")]
        [Bindable(true)]
        public string FileName 
	    {
		    get
		    {
			    return GetColumnValue<string>("FileName");
		    }
            set 
		    {
			    SetColumnValue("FileName", value);
            }
        }
	      
        [XmlAttribute("LogFileName")]
        [Bindable(true)]
        public string LogFileName 
	    {
		    get
		    {
			    return GetColumnValue<string>("LogFileName");
		    }
            set 
		    {
			    SetColumnValue("LogFileName", value);
            }
        }
	      
        [XmlAttribute("Issues")]
        [Bindable(true)]
        public string Issues 
	    {
		    get
		    {
			    return GetColumnValue<string>("Issues");
		    }
            set 
		    {
			    SetColumnValue("Issues", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Id = @"ID";
            
            public static string Code = @"Code";
            
            public static string DataSourceID = @"DataSourceID";
            
            public static string ImportDate = @"ImportDate";
            
            public static string Status = @"Status";
            
            public static string DataSourceName = @"DataSourceName";
            
            public static string UserId = @"UserId";
            
            public static string UserName = @"UserName";
            
            public static string StatusDescription = @"StatusDescription";
            
            public static string FileName = @"FileName";
            
            public static string LogFileName = @"LogFileName";
            
            public static string Issues = @"Issues";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
