

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "SAEON.Observations.Entities\App.config"
//     Connection String Name: "ObservationsDB"
//     Connection String:      "Data Source=.\SAEON;database=ObservationsTest;UID=sa;PWD=cocolanu;"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Developer Edition (64-bit)
// Database Engine Edition: Enterprise

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace SAEON.Observations.Entities
{
    using System.Linq;

    #region Unit of work

    public interface IObservationsContext : System.IDisposable
    {
        System.Data.Entity.DbSet<AspnetApplication> AspnetApplications { get; set; } // aspnet_Applications
        System.Data.Entity.DbSet<AspnetMembership> AspnetMemberships { get; set; } // aspnet_Membership
        System.Data.Entity.DbSet<AspnetPath> AspnetPaths { get; set; } // aspnet_Paths
        System.Data.Entity.DbSet<AspnetPersonalizationAllUser> AspnetPersonalizationAllUsers { get; set; } // aspnet_PersonalizationAllUsers
        System.Data.Entity.DbSet<AspnetPersonalizationPerUser> AspnetPersonalizationPerUsers { get; set; } // aspnet_PersonalizationPerUser
        System.Data.Entity.DbSet<AspnetProfile> AspnetProfiles { get; set; } // aspnet_Profile
        System.Data.Entity.DbSet<AspnetRole> AspnetRoles { get; set; } // aspnet_Roles
        System.Data.Entity.DbSet<AspnetSchemaVersion> AspnetSchemaVersions { get; set; } // aspnet_SchemaVersions
        System.Data.Entity.DbSet<AspnetUser> AspnetUsers { get; set; } // aspnet_Users
        System.Data.Entity.DbSet<AspnetWebEventEvent> AspnetWebEventEvents { get; set; } // aspnet_WebEvent_Events
        System.Data.Entity.DbSet<AuditLog> AuditLogs { get; set; } // AuditLog
        System.Data.Entity.DbSet<DataLog> DataLogs { get; set; } // DataLog
        System.Data.Entity.DbSet<DataSchema> DataSchemas { get; set; } // DataSchema
        System.Data.Entity.DbSet<DataSource> DataSources { get; set; } // DataSource
        System.Data.Entity.DbSet<DataSourceRole> DataSourceRoles { get; set; } // DataSourceRole
        System.Data.Entity.DbSet<DataSourceTransformation> DataSourceTransformations { get; set; } // DataSourceTransformation
        System.Data.Entity.DbSet<DataSourceType> DataSourceTypes { get; set; } // DataSourceType
        System.Data.Entity.DbSet<ImportBatch> ImportBatches { get; set; } // ImportBatch
        System.Data.Entity.DbSet<Instrument> Instruments { get; set; } // Instrument
        System.Data.Entity.DbSet<InstrumentDataSource> InstrumentDataSources { get; set; } // Instrument_DataSource
        System.Data.Entity.DbSet<InstrumentSensor> InstrumentSensors { get; set; } // Instrument_Sensor
        System.Data.Entity.DbSet<Module> Modules { get; set; } // Module
        System.Data.Entity.DbSet<Observation> Observations { get; set; } // Observation
        System.Data.Entity.DbSet<Offering> Offerings { get; set; } // Offering
        System.Data.Entity.DbSet<Organisation> Organisations { get; set; } // Organisation
        System.Data.Entity.DbSet<OrganisationInstrument> OrganisationInstruments { get; set; } // Organisation_Instrument
        System.Data.Entity.DbSet<OrganisationRole> OrganisationRoles { get; set; } // OrganisationRole
        System.Data.Entity.DbSet<OrganisationSite> OrganisationSites { get; set; } // Organisation_Site
        System.Data.Entity.DbSet<OrganisationStation> OrganisationStations { get; set; } // Organisation_Station
        System.Data.Entity.DbSet<Phenomenon> Phenomena { get; set; } // Phenomenon
        System.Data.Entity.DbSet<PhenomenonOffering> PhenomenonOfferings { get; set; } // PhenomenonOffering
        System.Data.Entity.DbSet<PhenomenonUom> PhenomenonUoms { get; set; } // PhenomenonUOM
        System.Data.Entity.DbSet<Programme> Programmes { get; set; } // Programme
        System.Data.Entity.DbSet<Project> Projects { get; set; } // Project
        System.Data.Entity.DbSet<ProjectSite> ProjectSites { get; set; } // ProjectSite
        System.Data.Entity.DbSet<ProjectStation> ProjectStations { get; set; } // Project_Station
        System.Data.Entity.DbSet<RefactorLog> RefactorLogs { get; set; } // __RefactorLog
        System.Data.Entity.DbSet<RoleModule> RoleModules { get; set; } // RoleModule
        System.Data.Entity.DbSet<SchemaColumn> SchemaColumns { get; set; } // SchemaColumn
        System.Data.Entity.DbSet<SchemaColumnType> SchemaColumnTypes { get; set; } // SchemaColumnType
        System.Data.Entity.DbSet<Sensor> Sensors { get; set; } // Sensor
        System.Data.Entity.DbSet<Site> Sites { get; set; } // Site
        System.Data.Entity.DbSet<Station> Stations { get; set; } // Station
        System.Data.Entity.DbSet<StationInstrument> StationInstruments { get; set; } // Station_Instrument
        System.Data.Entity.DbSet<Status> Status { get; set; } // Status
        System.Data.Entity.DbSet<StatusReason> StatusReasons { get; set; } // StatusReason
        System.Data.Entity.DbSet<TransformationType> TransformationTypes { get; set; } // TransformationType
        System.Data.Entity.DbSet<UnitOfMeasure> UnitOfMeasures { get; set; } // UnitOfMeasure
        System.Data.Entity.DbSet<VAuditLog> VAuditLogs { get; set; } // vAuditLog
        System.Data.Entity.DbSet<VDataLog> VDataLogs { get; set; } // vDataLog
        System.Data.Entity.DbSet<VDataQuery> VDataQueries { get; set; } // vDataQuery
        System.Data.Entity.DbSet<VDataSchema> VDataSchemas { get; set; } // vDataSchema
        System.Data.Entity.DbSet<VDataSource> VDataSources { get; set; } // vDataSource
        System.Data.Entity.DbSet<VDataSourceRole> VDataSourceRoles { get; set; } // vDataSourceRole
        System.Data.Entity.DbSet<VDataSourceTransformation> VDataSourceTransformations { get; set; } // vDataSourceTransformation
        System.Data.Entity.DbSet<VImportBatch> VImportBatches { get; set; } // vImportBatch
        System.Data.Entity.DbSet<VInstrumentDataSource> VInstrumentDataSources { get; set; } // vInstrumentDataSource
        System.Data.Entity.DbSet<VInstrumentOrganisation> VInstrumentOrganisations { get; set; } // vInstrumentOrganisation
        System.Data.Entity.DbSet<VInstrumentSensor> VInstrumentSensors { get; set; } // vInstrumentSensor
        System.Data.Entity.DbSet<VInventory> VInventories { get; set; } // vInventory
        System.Data.Entity.DbSet<VModuleRoleModule> VModuleRoleModules { get; set; } // vModuleRoleModule
        System.Data.Entity.DbSet<VObservation> VObservations { get; set; } // vObservation
        System.Data.Entity.DbSet<VObservationRole> VObservationRoles { get; set; } // vObservationRoles
        System.Data.Entity.DbSet<VObservationsList> VObservationsLists { get; set; } // vObservationsList
        System.Data.Entity.DbSet<VOrganisationInstrument> VOrganisationInstruments { get; set; } // vOrganisationInstrument
        System.Data.Entity.DbSet<VOrganisationSite> VOrganisationSites { get; set; } // vOrganisationSite
        System.Data.Entity.DbSet<VOrganisationStation> VOrganisationStations { get; set; } // vOrganisationStation
        System.Data.Entity.DbSet<VProject> VProjects { get; set; } // vProject
        System.Data.Entity.DbSet<VProjectSite> VProjectSites { get; set; } // vProjectSite
        System.Data.Entity.DbSet<VProjectStation> VProjectStations { get; set; } // vProjectStation
        System.Data.Entity.DbSet<VSchemaColumn> VSchemaColumns { get; set; } // vSchemaColumn
        System.Data.Entity.DbSet<VSensor> VSensors { get; set; } // vSensor
        System.Data.Entity.DbSet<VSiteOrganisation> VSiteOrganisations { get; set; } // vSiteOrganisation
        System.Data.Entity.DbSet<VStation> VStations { get; set; } // vStation
        System.Data.Entity.DbSet<VStationInstrument> VStationInstruments { get; set; } // vStationInstrument
        System.Data.Entity.DbSet<VStationOrganisation> VStationOrganisations { get; set; } // vStationOrganisation
        System.Data.Entity.DbSet<VUserInfo> VUserInfoes { get; set; } // vUserInfo

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        // Stored Procedures
        AspnetAnyDataInTablesReturnModel AspnetAnyDataInTables(int? tablesToCheck);
        System.Threading.Tasks.Task<AspnetAnyDataInTablesReturnModel> AspnetAnyDataInTablesAsync(int? tablesToCheck);

        int AspnetApplicationsCreateApplication(string applicationName, out System.Guid? applicationId);
        // AspnetApplicationsCreateApplicationAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetCheckSchemaVersion(string feature, string compatibleSchemaVersion);
        // AspnetCheckSchemaVersionAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetMembershipChangePasswordQuestionAndAnswer(string applicationName, string userName, string newPasswordQuestion, string newPasswordAnswer);
        // AspnetMembershipChangePasswordQuestionAndAnswerAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetMembershipCreateUser(string applicationName, string userName, string password, string passwordSalt, string email, string passwordQuestion, string passwordAnswer, bool? isApproved, System.DateTime? currentTimeUtc, System.DateTime? createDate, int? uniqueEmail, int? passwordFormat, out System.Guid? userId);
        // AspnetMembershipCreateUserAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetMembershipFindUsersByEmail(string applicationName, string emailToMatch, int? pageIndex, int? pageSize);
        // AspnetMembershipFindUsersByEmailAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetMembershipFindUsersByName(string applicationName, string userNameToMatch, int? pageIndex, int? pageSize);
        // AspnetMembershipFindUsersByNameAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetMembershipGetAllUsers(string applicationName, int? pageIndex, int? pageSize);
        // AspnetMembershipGetAllUsersAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetMembershipGetNumberOfUsersOnline(string applicationName, int? minutesSinceLastInActive, System.DateTime? currentTimeUtc);
        // AspnetMembershipGetNumberOfUsersOnlineAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<AspnetMembershipGetPasswordReturnModel> AspnetMembershipGetPassword(string applicationName, string userName, int? maxInvalidPasswordAttempts, int? passwordAttemptWindow, System.DateTime? currentTimeUtc, string passwordAnswer);
        System.Collections.Generic.List<AspnetMembershipGetPasswordReturnModel> AspnetMembershipGetPassword(string applicationName, string userName, int? maxInvalidPasswordAttempts, int? passwordAttemptWindow, System.DateTime? currentTimeUtc, string passwordAnswer, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetMembershipGetPasswordReturnModel>> AspnetMembershipGetPasswordAsync(string applicationName, string userName, int? maxInvalidPasswordAttempts, int? passwordAttemptWindow, System.DateTime? currentTimeUtc, string passwordAnswer);

        System.Collections.Generic.List<AspnetMembershipGetPasswordWithFormatReturnModel> AspnetMembershipGetPasswordWithFormat(string applicationName, string userName, bool? updateLastLoginActivityDate, System.DateTime? currentTimeUtc);
        System.Collections.Generic.List<AspnetMembershipGetPasswordWithFormatReturnModel> AspnetMembershipGetPasswordWithFormat(string applicationName, string userName, bool? updateLastLoginActivityDate, System.DateTime? currentTimeUtc, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetMembershipGetPasswordWithFormatReturnModel>> AspnetMembershipGetPasswordWithFormatAsync(string applicationName, string userName, bool? updateLastLoginActivityDate, System.DateTime? currentTimeUtc);

        AspnetMembershipGetUserByEmailReturnModel AspnetMembershipGetUserByEmail(string applicationName, string email);
        System.Threading.Tasks.Task<AspnetMembershipGetUserByEmailReturnModel> AspnetMembershipGetUserByEmailAsync(string applicationName, string email);

        AspnetMembershipGetUserByNameReturnModel AspnetMembershipGetUserByName(string applicationName, string userName, System.DateTime? currentTimeUtc, bool? updateLastActivity);
        System.Threading.Tasks.Task<AspnetMembershipGetUserByNameReturnModel> AspnetMembershipGetUserByNameAsync(string applicationName, string userName, System.DateTime? currentTimeUtc, bool? updateLastActivity);

        System.Collections.Generic.List<AspnetMembershipGetUserByUserIdReturnModel> AspnetMembershipGetUserByUserId(System.Guid? userId, System.DateTime? currentTimeUtc, bool? updateLastActivity);
        System.Collections.Generic.List<AspnetMembershipGetUserByUserIdReturnModel> AspnetMembershipGetUserByUserId(System.Guid? userId, System.DateTime? currentTimeUtc, bool? updateLastActivity, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetMembershipGetUserByUserIdReturnModel>> AspnetMembershipGetUserByUserIdAsync(System.Guid? userId, System.DateTime? currentTimeUtc, bool? updateLastActivity);

        int AspnetMembershipResetPassword(string applicationName, string userName, string newPassword, int? maxInvalidPasswordAttempts, int? passwordAttemptWindow, string passwordSalt, System.DateTime? currentTimeUtc, int? passwordFormat, string passwordAnswer);
        // AspnetMembershipResetPasswordAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetMembershipSetPassword(string applicationName, string userName, string newPassword, string passwordSalt, System.DateTime? currentTimeUtc, int? passwordFormat);
        // AspnetMembershipSetPasswordAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetMembershipUnlockUser(string applicationName, string userName);
        // AspnetMembershipUnlockUserAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetMembershipUpdateUser(string applicationName, string userName, string email, string comment, bool? isApproved, System.DateTime? lastLoginDate, System.DateTime? lastActivityDate, int? uniqueEmail, System.DateTime? currentTimeUtc);
        // AspnetMembershipUpdateUserAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetMembershipUpdateUserInfo(string applicationName, string userName, bool? isPasswordCorrect, bool? updateLastLoginActivityDate, int? maxInvalidPasswordAttempts, int? passwordAttemptWindow, System.DateTime? currentTimeUtc, System.DateTime? lastLoginDate, System.DateTime? lastActivityDate);
        // AspnetMembershipUpdateUserInfoAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetPathsCreatePath(System.Guid? applicationId, string path, out System.Guid? pathId);
        // AspnetPathsCreatePathAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetPersonalizationGetApplicationId(string applicationName, out System.Guid? applicationId);
        // AspnetPersonalizationGetApplicationIdAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetPersonalizationAdministrationDeleteAllState(bool? allUsersScope, string applicationName, out int? count);
        // AspnetPersonalizationAdministrationDeleteAllStateAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetPersonalizationAdministrationFindState(bool? allUsersScope, string applicationName, int? pageIndex, int? pageSize, string path, string userName, System.DateTime? inactiveSinceDate);
        // AspnetPersonalizationAdministrationFindStateAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetPersonalizationAdministrationGetCountOfState(out int? count, bool? allUsersScope, string applicationName, string path, string userName, System.DateTime? inactiveSinceDate);
        // AspnetPersonalizationAdministrationGetCountOfStateAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetPersonalizationAdministrationResetSharedState(out int? count, string applicationName, string path);
        // AspnetPersonalizationAdministrationResetSharedStateAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetPersonalizationAdministrationResetUserState(out int? count, string applicationName, System.DateTime? inactiveSinceDate, string userName, string path);
        // AspnetPersonalizationAdministrationResetUserStateAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<AspnetPersonalizationAllUsersGetPageSettingsReturnModel> AspnetPersonalizationAllUsersGetPageSettings(string applicationName, string path);
        System.Collections.Generic.List<AspnetPersonalizationAllUsersGetPageSettingsReturnModel> AspnetPersonalizationAllUsersGetPageSettings(string applicationName, string path, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetPersonalizationAllUsersGetPageSettingsReturnModel>> AspnetPersonalizationAllUsersGetPageSettingsAsync(string applicationName, string path);

        int AspnetPersonalizationAllUsersResetPageSettings(string applicationName, string path);
        // AspnetPersonalizationAllUsersResetPageSettingsAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetPersonalizationAllUsersSetPageSettings(string applicationName, string path, byte[] pageSettings, System.DateTime? currentTimeUtc);
        // AspnetPersonalizationAllUsersSetPageSettingsAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<AspnetPersonalizationPerUserGetPageSettingsReturnModel> AspnetPersonalizationPerUserGetPageSettings(string applicationName, string userName, string path, System.DateTime? currentTimeUtc);
        System.Collections.Generic.List<AspnetPersonalizationPerUserGetPageSettingsReturnModel> AspnetPersonalizationPerUserGetPageSettings(string applicationName, string userName, string path, System.DateTime? currentTimeUtc, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetPersonalizationPerUserGetPageSettingsReturnModel>> AspnetPersonalizationPerUserGetPageSettingsAsync(string applicationName, string userName, string path, System.DateTime? currentTimeUtc);

        int AspnetPersonalizationPerUserResetPageSettings(string applicationName, string userName, string path, System.DateTime? currentTimeUtc);
        // AspnetPersonalizationPerUserResetPageSettingsAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetPersonalizationPerUserSetPageSettings(string applicationName, string userName, string path, byte[] pageSettings, System.DateTime? currentTimeUtc);
        // AspnetPersonalizationPerUserSetPageSettingsAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        AspnetProfileDeleteInactiveProfilesReturnModel AspnetProfileDeleteInactiveProfiles(string applicationName, int? profileAuthOptions, System.DateTime? inactiveSinceDate);
        System.Threading.Tasks.Task<AspnetProfileDeleteInactiveProfilesReturnModel> AspnetProfileDeleteInactiveProfilesAsync(string applicationName, int? profileAuthOptions, System.DateTime? inactiveSinceDate);

        System.Collections.Generic.List<AspnetProfileDeleteProfilesReturnModel> AspnetProfileDeleteProfiles(string applicationName, string userNames);
        System.Collections.Generic.List<AspnetProfileDeleteProfilesReturnModel> AspnetProfileDeleteProfiles(string applicationName, string userNames, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetProfileDeleteProfilesReturnModel>> AspnetProfileDeleteProfilesAsync(string applicationName, string userNames);

        AspnetProfileGetNumberOfInactiveProfilesReturnModel AspnetProfileGetNumberOfInactiveProfiles(string applicationName, int? profileAuthOptions, System.DateTime? inactiveSinceDate);
        System.Threading.Tasks.Task<AspnetProfileGetNumberOfInactiveProfilesReturnModel> AspnetProfileGetNumberOfInactiveProfilesAsync(string applicationName, int? profileAuthOptions, System.DateTime? inactiveSinceDate);

        int AspnetProfileGetProfiles(string applicationName, int? profileAuthOptions, int? pageIndex, int? pageSize, string userNameToMatch, System.DateTime? inactiveSinceDate);
        // AspnetProfileGetProfilesAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<AspnetProfileGetPropertiesReturnModel> AspnetProfileGetProperties(string applicationName, string userName, System.DateTime? currentTimeUtc);
        System.Collections.Generic.List<AspnetProfileGetPropertiesReturnModel> AspnetProfileGetProperties(string applicationName, string userName, System.DateTime? currentTimeUtc, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetProfileGetPropertiesReturnModel>> AspnetProfileGetPropertiesAsync(string applicationName, string userName, System.DateTime? currentTimeUtc);

        int AspnetProfileSetProperties(string applicationName, string propertyNames, string propertyValuesString, byte[] propertyValuesBinary, string userName, bool? isUserAnonymous, System.DateTime? currentTimeUtc);
        // AspnetProfileSetPropertiesAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetRegisterSchemaVersion(string feature, string compatibleSchemaVersion, bool? isCurrentVersion, bool? removeIncompatibleSchema);
        // AspnetRegisterSchemaVersionAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetRolesCreateRole(string applicationName, string roleName);
        // AspnetRolesCreateRoleAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetRolesDeleteRole(string applicationName, string roleName, bool? deleteOnlyIfRoleIsEmpty);
        // AspnetRolesDeleteRoleAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<AspnetRolesGetAllRolesReturnModel> AspnetRolesGetAllRoles(string applicationName);
        System.Collections.Generic.List<AspnetRolesGetAllRolesReturnModel> AspnetRolesGetAllRoles(string applicationName, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetRolesGetAllRolesReturnModel>> AspnetRolesGetAllRolesAsync(string applicationName);

        int AspnetRolesRoleExists(string applicationName, string roleName);
        // AspnetRolesRoleExistsAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetSetupRemoveAllRoleMembers(string name);
        // AspnetSetupRemoveAllRoleMembersAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetSetupRestorePermissions(string name);
        // AspnetSetupRestorePermissionsAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetUnRegisterSchemaVersion(string feature, string compatibleSchemaVersion);
        // AspnetUnRegisterSchemaVersionAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetUsersCreateUser(System.Guid? applicationId, string userName, bool? isUserAnonymous, System.DateTime? lastActivityDate, out System.Guid? userId);
        // AspnetUsersCreateUserAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetUsersDeleteUser(string applicationName, string userName, int? tablesToDeleteFrom, out int? numTablesDeletedFrom);
        // AspnetUsersDeleteUserAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        AspnetUsersInRolesAddUsersToRolesReturnModel AspnetUsersInRolesAddUsersToRoles(string applicationName, string userNames, string roleNames, System.DateTime? currentTimeUtc);
        System.Threading.Tasks.Task<AspnetUsersInRolesAddUsersToRolesReturnModel> AspnetUsersInRolesAddUsersToRolesAsync(string applicationName, string userNames, string roleNames, System.DateTime? currentTimeUtc);

        System.Collections.Generic.List<AspnetUsersInRolesFindUsersInRoleReturnModel> AspnetUsersInRolesFindUsersInRole(string applicationName, string roleName, string userNameToMatch);
        System.Collections.Generic.List<AspnetUsersInRolesFindUsersInRoleReturnModel> AspnetUsersInRolesFindUsersInRole(string applicationName, string roleName, string userNameToMatch, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetUsersInRolesFindUsersInRoleReturnModel>> AspnetUsersInRolesFindUsersInRoleAsync(string applicationName, string roleName, string userNameToMatch);

        System.Collections.Generic.List<AspnetUsersInRolesGetRolesForUserReturnModel> AspnetUsersInRolesGetRolesForUser(string applicationName, string userName);
        System.Collections.Generic.List<AspnetUsersInRolesGetRolesForUserReturnModel> AspnetUsersInRolesGetRolesForUser(string applicationName, string userName, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetUsersInRolesGetRolesForUserReturnModel>> AspnetUsersInRolesGetRolesForUserAsync(string applicationName, string userName);

        System.Collections.Generic.List<AspnetUsersInRolesGetUsersInRolesReturnModel> AspnetUsersInRolesGetUsersInRoles(string applicationName, string roleName);
        System.Collections.Generic.List<AspnetUsersInRolesGetUsersInRolesReturnModel> AspnetUsersInRolesGetUsersInRoles(string applicationName, string roleName, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetUsersInRolesGetUsersInRolesReturnModel>> AspnetUsersInRolesGetUsersInRolesAsync(string applicationName, string roleName);

        int AspnetUsersInRolesIsUserInRole(string applicationName, string userName, string roleName);
        // AspnetUsersInRolesIsUserInRoleAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        AspnetUsersInRolesRemoveUsersFromRolesReturnModel AspnetUsersInRolesRemoveUsersFromRoles(string applicationName, string userNames, string roleNames);
        System.Threading.Tasks.Task<AspnetUsersInRolesRemoveUsersFromRolesReturnModel> AspnetUsersInRolesRemoveUsersFromRolesAsync(string applicationName, string userNames, string roleNames);

        int AspnetWebEventLogEvent(string eventId, System.DateTime? eventTimeUtc, System.DateTime? eventTime, string eventType, decimal? eventSequence, decimal? eventOccurrence, int? eventCode, int? eventDetailCode, string message, string applicationPath, string applicationVirtualPath, string machineName, string requestUrl, string exceptionType, string details);
        // AspnetWebEventLogEventAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int ExecuteView(string view, bool? schema, bool? export, string sortColumn, string sortOrder, int? pageNumber, int? pageSize, string filter);
        // ExecuteViewAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int ProgressStatusRaw();
        // ProgressStatusRawAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class ObservationsContext : System.Data.Entity.DbContext, IObservationsContext
    {
        public System.Data.Entity.DbSet<AspnetApplication> AspnetApplications { get; set; } // aspnet_Applications
        public System.Data.Entity.DbSet<AspnetMembership> AspnetMemberships { get; set; } // aspnet_Membership
        public System.Data.Entity.DbSet<AspnetPath> AspnetPaths { get; set; } // aspnet_Paths
        public System.Data.Entity.DbSet<AspnetPersonalizationAllUser> AspnetPersonalizationAllUsers { get; set; } // aspnet_PersonalizationAllUsers
        public System.Data.Entity.DbSet<AspnetPersonalizationPerUser> AspnetPersonalizationPerUsers { get; set; } // aspnet_PersonalizationPerUser
        public System.Data.Entity.DbSet<AspnetProfile> AspnetProfiles { get; set; } // aspnet_Profile
        public System.Data.Entity.DbSet<AspnetRole> AspnetRoles { get; set; } // aspnet_Roles
        public System.Data.Entity.DbSet<AspnetSchemaVersion> AspnetSchemaVersions { get; set; } // aspnet_SchemaVersions
        public System.Data.Entity.DbSet<AspnetUser> AspnetUsers { get; set; } // aspnet_Users
        public System.Data.Entity.DbSet<AspnetWebEventEvent> AspnetWebEventEvents { get; set; } // aspnet_WebEvent_Events
        public System.Data.Entity.DbSet<AuditLog> AuditLogs { get; set; } // AuditLog
        public System.Data.Entity.DbSet<DataLog> DataLogs { get; set; } // DataLog
        public System.Data.Entity.DbSet<DataSchema> DataSchemas { get; set; } // DataSchema
        public System.Data.Entity.DbSet<DataSource> DataSources { get; set; } // DataSource
        public System.Data.Entity.DbSet<DataSourceRole> DataSourceRoles { get; set; } // DataSourceRole
        public System.Data.Entity.DbSet<DataSourceTransformation> DataSourceTransformations { get; set; } // DataSourceTransformation
        public System.Data.Entity.DbSet<DataSourceType> DataSourceTypes { get; set; } // DataSourceType
        public System.Data.Entity.DbSet<ImportBatch> ImportBatches { get; set; } // ImportBatch
        public System.Data.Entity.DbSet<Instrument> Instruments { get; set; } // Instrument
        public System.Data.Entity.DbSet<InstrumentDataSource> InstrumentDataSources { get; set; } // Instrument_DataSource
        public System.Data.Entity.DbSet<InstrumentSensor> InstrumentSensors { get; set; } // Instrument_Sensor
        public System.Data.Entity.DbSet<Module> Modules { get; set; } // Module
        public System.Data.Entity.DbSet<Observation> Observations { get; set; } // Observation
        public System.Data.Entity.DbSet<Offering> Offerings { get; set; } // Offering
        public System.Data.Entity.DbSet<Organisation> Organisations { get; set; } // Organisation
        public System.Data.Entity.DbSet<OrganisationInstrument> OrganisationInstruments { get; set; } // Organisation_Instrument
        public System.Data.Entity.DbSet<OrganisationRole> OrganisationRoles { get; set; } // OrganisationRole
        public System.Data.Entity.DbSet<OrganisationSite> OrganisationSites { get; set; } // Organisation_Site
        public System.Data.Entity.DbSet<OrganisationStation> OrganisationStations { get; set; } // Organisation_Station
        public System.Data.Entity.DbSet<Phenomenon> Phenomena { get; set; } // Phenomenon
        public System.Data.Entity.DbSet<PhenomenonOffering> PhenomenonOfferings { get; set; } // PhenomenonOffering
        public System.Data.Entity.DbSet<PhenomenonUom> PhenomenonUoms { get; set; } // PhenomenonUOM
        public System.Data.Entity.DbSet<Programme> Programmes { get; set; } // Programme
        public System.Data.Entity.DbSet<Project> Projects { get; set; } // Project
        public System.Data.Entity.DbSet<ProjectSite> ProjectSites { get; set; } // ProjectSite
        public System.Data.Entity.DbSet<ProjectStation> ProjectStations { get; set; } // Project_Station
        public System.Data.Entity.DbSet<RefactorLog> RefactorLogs { get; set; } // __RefactorLog
        public System.Data.Entity.DbSet<RoleModule> RoleModules { get; set; } // RoleModule
        public System.Data.Entity.DbSet<SchemaColumn> SchemaColumns { get; set; } // SchemaColumn
        public System.Data.Entity.DbSet<SchemaColumnType> SchemaColumnTypes { get; set; } // SchemaColumnType
        public System.Data.Entity.DbSet<Sensor> Sensors { get; set; } // Sensor
        public System.Data.Entity.DbSet<Site> Sites { get; set; } // Site
        public System.Data.Entity.DbSet<Station> Stations { get; set; } // Station
        public System.Data.Entity.DbSet<StationInstrument> StationInstruments { get; set; } // Station_Instrument
        public System.Data.Entity.DbSet<Status> Status { get; set; } // Status
        public System.Data.Entity.DbSet<StatusReason> StatusReasons { get; set; } // StatusReason
        public System.Data.Entity.DbSet<TransformationType> TransformationTypes { get; set; } // TransformationType
        public System.Data.Entity.DbSet<UnitOfMeasure> UnitOfMeasures { get; set; } // UnitOfMeasure
        public System.Data.Entity.DbSet<VAuditLog> VAuditLogs { get; set; } // vAuditLog
        public System.Data.Entity.DbSet<VDataLog> VDataLogs { get; set; } // vDataLog
        public System.Data.Entity.DbSet<VDataQuery> VDataQueries { get; set; } // vDataQuery
        public System.Data.Entity.DbSet<VDataSchema> VDataSchemas { get; set; } // vDataSchema
        public System.Data.Entity.DbSet<VDataSource> VDataSources { get; set; } // vDataSource
        public System.Data.Entity.DbSet<VDataSourceRole> VDataSourceRoles { get; set; } // vDataSourceRole
        public System.Data.Entity.DbSet<VDataSourceTransformation> VDataSourceTransformations { get; set; } // vDataSourceTransformation
        public System.Data.Entity.DbSet<VImportBatch> VImportBatches { get; set; } // vImportBatch
        public System.Data.Entity.DbSet<VInstrumentDataSource> VInstrumentDataSources { get; set; } // vInstrumentDataSource
        public System.Data.Entity.DbSet<VInstrumentOrganisation> VInstrumentOrganisations { get; set; } // vInstrumentOrganisation
        public System.Data.Entity.DbSet<VInstrumentSensor> VInstrumentSensors { get; set; } // vInstrumentSensor
        public System.Data.Entity.DbSet<VInventory> VInventories { get; set; } // vInventory
        public System.Data.Entity.DbSet<VModuleRoleModule> VModuleRoleModules { get; set; } // vModuleRoleModule
        public System.Data.Entity.DbSet<VObservation> VObservations { get; set; } // vObservation
        public System.Data.Entity.DbSet<VObservationRole> VObservationRoles { get; set; } // vObservationRoles
        public System.Data.Entity.DbSet<VObservationsList> VObservationsLists { get; set; } // vObservationsList
        public System.Data.Entity.DbSet<VOrganisationInstrument> VOrganisationInstruments { get; set; } // vOrganisationInstrument
        public System.Data.Entity.DbSet<VOrganisationSite> VOrganisationSites { get; set; } // vOrganisationSite
        public System.Data.Entity.DbSet<VOrganisationStation> VOrganisationStations { get; set; } // vOrganisationStation
        public System.Data.Entity.DbSet<VProject> VProjects { get; set; } // vProject
        public System.Data.Entity.DbSet<VProjectSite> VProjectSites { get; set; } // vProjectSite
        public System.Data.Entity.DbSet<VProjectStation> VProjectStations { get; set; } // vProjectStation
        public System.Data.Entity.DbSet<VSchemaColumn> VSchemaColumns { get; set; } // vSchemaColumn
        public System.Data.Entity.DbSet<VSensor> VSensors { get; set; } // vSensor
        public System.Data.Entity.DbSet<VSiteOrganisation> VSiteOrganisations { get; set; } // vSiteOrganisation
        public System.Data.Entity.DbSet<VStation> VStations { get; set; } // vStation
        public System.Data.Entity.DbSet<VStationInstrument> VStationInstruments { get; set; } // vStationInstrument
        public System.Data.Entity.DbSet<VStationOrganisation> VStationOrganisations { get; set; } // vStationOrganisation
        public System.Data.Entity.DbSet<VUserInfo> VUserInfoes { get; set; } // vUserInfo

        static ObservationsContext()
        {
            System.Data.Entity.Database.SetInitializer<ObservationsContext>(null);
        }

        public ObservationsContext()
            : base("Name=ObservationsDB")
        {
        }

        public ObservationsContext(string connectionString)
            : base(connectionString)
        {
        }

        public ObservationsContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public ObservationsContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public ObservationsContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AspnetApplicationConfiguration());
            modelBuilder.Configurations.Add(new AspnetMembershipConfiguration());
            modelBuilder.Configurations.Add(new AspnetPathConfiguration());
            modelBuilder.Configurations.Add(new AspnetPersonalizationAllUserConfiguration());
            modelBuilder.Configurations.Add(new AspnetPersonalizationPerUserConfiguration());
            modelBuilder.Configurations.Add(new AspnetProfileConfiguration());
            modelBuilder.Configurations.Add(new AspnetRoleConfiguration());
            modelBuilder.Configurations.Add(new AspnetSchemaVersionConfiguration());
            modelBuilder.Configurations.Add(new AspnetUserConfiguration());
            modelBuilder.Configurations.Add(new AspnetWebEventEventConfiguration());
            modelBuilder.Configurations.Add(new AuditLogConfiguration());
            modelBuilder.Configurations.Add(new DataLogConfiguration());
            modelBuilder.Configurations.Add(new DataSchemaConfiguration());
            modelBuilder.Configurations.Add(new DataSourceConfiguration());
            modelBuilder.Configurations.Add(new DataSourceRoleConfiguration());
            modelBuilder.Configurations.Add(new DataSourceTransformationConfiguration());
            modelBuilder.Configurations.Add(new DataSourceTypeConfiguration());
            modelBuilder.Configurations.Add(new ImportBatchConfiguration());
            modelBuilder.Configurations.Add(new InstrumentConfiguration());
            modelBuilder.Configurations.Add(new InstrumentDataSourceConfiguration());
            modelBuilder.Configurations.Add(new InstrumentSensorConfiguration());
            modelBuilder.Configurations.Add(new ModuleConfiguration());
            modelBuilder.Configurations.Add(new ObservationConfiguration());
            modelBuilder.Configurations.Add(new OfferingConfiguration());
            modelBuilder.Configurations.Add(new OrganisationConfiguration());
            modelBuilder.Configurations.Add(new OrganisationInstrumentConfiguration());
            modelBuilder.Configurations.Add(new OrganisationRoleConfiguration());
            modelBuilder.Configurations.Add(new OrganisationSiteConfiguration());
            modelBuilder.Configurations.Add(new OrganisationStationConfiguration());
            modelBuilder.Configurations.Add(new PhenomenonConfiguration());
            modelBuilder.Configurations.Add(new PhenomenonOfferingConfiguration());
            modelBuilder.Configurations.Add(new PhenomenonUomConfiguration());
            modelBuilder.Configurations.Add(new ProgrammeConfiguration());
            modelBuilder.Configurations.Add(new ProjectConfiguration());
            modelBuilder.Configurations.Add(new ProjectSiteConfiguration());
            modelBuilder.Configurations.Add(new ProjectStationConfiguration());
            modelBuilder.Configurations.Add(new RefactorLogConfiguration());
            modelBuilder.Configurations.Add(new RoleModuleConfiguration());
            modelBuilder.Configurations.Add(new SchemaColumnConfiguration());
            modelBuilder.Configurations.Add(new SchemaColumnTypeConfiguration());
            modelBuilder.Configurations.Add(new SensorConfiguration());
            modelBuilder.Configurations.Add(new SiteConfiguration());
            modelBuilder.Configurations.Add(new StationConfiguration());
            modelBuilder.Configurations.Add(new StationInstrumentConfiguration());
            modelBuilder.Configurations.Add(new StatusConfiguration());
            modelBuilder.Configurations.Add(new StatusReasonConfiguration());
            modelBuilder.Configurations.Add(new TransformationTypeConfiguration());
            modelBuilder.Configurations.Add(new UnitOfMeasureConfiguration());
            modelBuilder.Configurations.Add(new VAuditLogConfiguration());
            modelBuilder.Configurations.Add(new VDataLogConfiguration());
            modelBuilder.Configurations.Add(new VDataQueryConfiguration());
            modelBuilder.Configurations.Add(new VDataSchemaConfiguration());
            modelBuilder.Configurations.Add(new VDataSourceConfiguration());
            modelBuilder.Configurations.Add(new VDataSourceRoleConfiguration());
            modelBuilder.Configurations.Add(new VDataSourceTransformationConfiguration());
            modelBuilder.Configurations.Add(new VImportBatchConfiguration());
            modelBuilder.Configurations.Add(new VInstrumentDataSourceConfiguration());
            modelBuilder.Configurations.Add(new VInstrumentOrganisationConfiguration());
            modelBuilder.Configurations.Add(new VInstrumentSensorConfiguration());
            modelBuilder.Configurations.Add(new VInventoryConfiguration());
            modelBuilder.Configurations.Add(new VModuleRoleModuleConfiguration());
            modelBuilder.Configurations.Add(new VObservationConfiguration());
            modelBuilder.Configurations.Add(new VObservationRoleConfiguration());
            modelBuilder.Configurations.Add(new VObservationsListConfiguration());
            modelBuilder.Configurations.Add(new VOrganisationInstrumentConfiguration());
            modelBuilder.Configurations.Add(new VOrganisationSiteConfiguration());
            modelBuilder.Configurations.Add(new VOrganisationStationConfiguration());
            modelBuilder.Configurations.Add(new VProjectConfiguration());
            modelBuilder.Configurations.Add(new VProjectSiteConfiguration());
            modelBuilder.Configurations.Add(new VProjectStationConfiguration());
            modelBuilder.Configurations.Add(new VSchemaColumnConfiguration());
            modelBuilder.Configurations.Add(new VSensorConfiguration());
            modelBuilder.Configurations.Add(new VSiteOrganisationConfiguration());
            modelBuilder.Configurations.Add(new VStationConfiguration());
            modelBuilder.Configurations.Add(new VStationInstrumentConfiguration());
            modelBuilder.Configurations.Add(new VStationOrganisationConfiguration());
            modelBuilder.Configurations.Add(new VUserInfoConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AspnetApplicationConfiguration(schema));
            modelBuilder.Configurations.Add(new AspnetMembershipConfiguration(schema));
            modelBuilder.Configurations.Add(new AspnetPathConfiguration(schema));
            modelBuilder.Configurations.Add(new AspnetPersonalizationAllUserConfiguration(schema));
            modelBuilder.Configurations.Add(new AspnetPersonalizationPerUserConfiguration(schema));
            modelBuilder.Configurations.Add(new AspnetProfileConfiguration(schema));
            modelBuilder.Configurations.Add(new AspnetRoleConfiguration(schema));
            modelBuilder.Configurations.Add(new AspnetSchemaVersionConfiguration(schema));
            modelBuilder.Configurations.Add(new AspnetUserConfiguration(schema));
            modelBuilder.Configurations.Add(new AspnetWebEventEventConfiguration(schema));
            modelBuilder.Configurations.Add(new AuditLogConfiguration(schema));
            modelBuilder.Configurations.Add(new DataLogConfiguration(schema));
            modelBuilder.Configurations.Add(new DataSchemaConfiguration(schema));
            modelBuilder.Configurations.Add(new DataSourceConfiguration(schema));
            modelBuilder.Configurations.Add(new DataSourceRoleConfiguration(schema));
            modelBuilder.Configurations.Add(new DataSourceTransformationConfiguration(schema));
            modelBuilder.Configurations.Add(new DataSourceTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ImportBatchConfiguration(schema));
            modelBuilder.Configurations.Add(new InstrumentConfiguration(schema));
            modelBuilder.Configurations.Add(new InstrumentDataSourceConfiguration(schema));
            modelBuilder.Configurations.Add(new InstrumentSensorConfiguration(schema));
            modelBuilder.Configurations.Add(new ModuleConfiguration(schema));
            modelBuilder.Configurations.Add(new ObservationConfiguration(schema));
            modelBuilder.Configurations.Add(new OfferingConfiguration(schema));
            modelBuilder.Configurations.Add(new OrganisationConfiguration(schema));
            modelBuilder.Configurations.Add(new OrganisationInstrumentConfiguration(schema));
            modelBuilder.Configurations.Add(new OrganisationRoleConfiguration(schema));
            modelBuilder.Configurations.Add(new OrganisationSiteConfiguration(schema));
            modelBuilder.Configurations.Add(new OrganisationStationConfiguration(schema));
            modelBuilder.Configurations.Add(new PhenomenonConfiguration(schema));
            modelBuilder.Configurations.Add(new PhenomenonOfferingConfiguration(schema));
            modelBuilder.Configurations.Add(new PhenomenonUomConfiguration(schema));
            modelBuilder.Configurations.Add(new ProgrammeConfiguration(schema));
            modelBuilder.Configurations.Add(new ProjectConfiguration(schema));
            modelBuilder.Configurations.Add(new ProjectSiteConfiguration(schema));
            modelBuilder.Configurations.Add(new ProjectStationConfiguration(schema));
            modelBuilder.Configurations.Add(new RefactorLogConfiguration(schema));
            modelBuilder.Configurations.Add(new RoleModuleConfiguration(schema));
            modelBuilder.Configurations.Add(new SchemaColumnConfiguration(schema));
            modelBuilder.Configurations.Add(new SchemaColumnTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new SensorConfiguration(schema));
            modelBuilder.Configurations.Add(new SiteConfiguration(schema));
            modelBuilder.Configurations.Add(new StationConfiguration(schema));
            modelBuilder.Configurations.Add(new StationInstrumentConfiguration(schema));
            modelBuilder.Configurations.Add(new StatusConfiguration(schema));
            modelBuilder.Configurations.Add(new StatusReasonConfiguration(schema));
            modelBuilder.Configurations.Add(new TransformationTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new UnitOfMeasureConfiguration(schema));
            modelBuilder.Configurations.Add(new VAuditLogConfiguration(schema));
            modelBuilder.Configurations.Add(new VDataLogConfiguration(schema));
            modelBuilder.Configurations.Add(new VDataQueryConfiguration(schema));
            modelBuilder.Configurations.Add(new VDataSchemaConfiguration(schema));
            modelBuilder.Configurations.Add(new VDataSourceConfiguration(schema));
            modelBuilder.Configurations.Add(new VDataSourceRoleConfiguration(schema));
            modelBuilder.Configurations.Add(new VDataSourceTransformationConfiguration(schema));
            modelBuilder.Configurations.Add(new VImportBatchConfiguration(schema));
            modelBuilder.Configurations.Add(new VInstrumentDataSourceConfiguration(schema));
            modelBuilder.Configurations.Add(new VInstrumentOrganisationConfiguration(schema));
            modelBuilder.Configurations.Add(new VInstrumentSensorConfiguration(schema));
            modelBuilder.Configurations.Add(new VInventoryConfiguration(schema));
            modelBuilder.Configurations.Add(new VModuleRoleModuleConfiguration(schema));
            modelBuilder.Configurations.Add(new VObservationConfiguration(schema));
            modelBuilder.Configurations.Add(new VObservationRoleConfiguration(schema));
            modelBuilder.Configurations.Add(new VObservationsListConfiguration(schema));
            modelBuilder.Configurations.Add(new VOrganisationInstrumentConfiguration(schema));
            modelBuilder.Configurations.Add(new VOrganisationSiteConfiguration(schema));
            modelBuilder.Configurations.Add(new VOrganisationStationConfiguration(schema));
            modelBuilder.Configurations.Add(new VProjectConfiguration(schema));
            modelBuilder.Configurations.Add(new VProjectSiteConfiguration(schema));
            modelBuilder.Configurations.Add(new VProjectStationConfiguration(schema));
            modelBuilder.Configurations.Add(new VSchemaColumnConfiguration(schema));
            modelBuilder.Configurations.Add(new VSensorConfiguration(schema));
            modelBuilder.Configurations.Add(new VSiteOrganisationConfiguration(schema));
            modelBuilder.Configurations.Add(new VStationConfiguration(schema));
            modelBuilder.Configurations.Add(new VStationInstrumentConfiguration(schema));
            modelBuilder.Configurations.Add(new VStationOrganisationConfiguration(schema));
            modelBuilder.Configurations.Add(new VUserInfoConfiguration(schema));
            return modelBuilder;
        }

        // Stored Procedures
        public AspnetAnyDataInTablesReturnModel AspnetAnyDataInTables(int? tablesToCheck)
        {
            var tablesToCheckParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TablesToCheck", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tablesToCheck.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tablesToCheck.HasValue)
                tablesToCheckParam.Value = System.DBNull.Value;


            var procResultData = new AspnetAnyDataInTablesReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[aspnet_AnyDataInTables]";
            cmd.Parameters.Add(tablesToCheckParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel2>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet3 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel3>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet4 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel4>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet5 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel5>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet6 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel6>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet7 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel7>(reader).ToList();
                reader.Close();

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<AspnetAnyDataInTablesReturnModel> AspnetAnyDataInTablesAsync(int? tablesToCheck)
        {
            var tablesToCheckParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TablesToCheck", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tablesToCheck.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tablesToCheck.HasValue)
                tablesToCheckParam.Value = System.DBNull.Value;


            var procResultData = new AspnetAnyDataInTablesReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[aspnet_AnyDataInTables]";
            cmd.Parameters.Add(tablesToCheckParam);

            try
            {
                await Database.Connection.OpenAsync().ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel2>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet3 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel3>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet4 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel4>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet5 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel5>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet6 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel6>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet7 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel7>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public int AspnetApplicationsCreateApplication(string applicationName, out System.Guid? applicationId)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var applicationIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationId", SqlDbType = System.Data.SqlDbType.UniqueIdentifier, Direction = System.Data.ParameterDirection.Output };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Applications_CreateApplication] @ApplicationName, @ApplicationId OUTPUT", applicationNameParam, applicationIdParam, procResultParam);
            if (IsSqlParameterNull(applicationIdParam))
                applicationId = null;
            else
                applicationId = (System.Guid) applicationIdParam.Value;

            return (int) procResultParam.Value;
        }

        public int AspnetCheckSchemaVersion(string feature, string compatibleSchemaVersion)
        {
            var featureParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Feature", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = feature, Size = 128 };
            if (featureParam.Value == null)
                featureParam.Value = System.DBNull.Value;

            var compatibleSchemaVersionParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CompatibleSchemaVersion", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = compatibleSchemaVersion, Size = 128 };
            if (compatibleSchemaVersionParam.Value == null)
                compatibleSchemaVersionParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_CheckSchemaVersion] @Feature, @CompatibleSchemaVersion", featureParam, compatibleSchemaVersionParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int AspnetMembershipChangePasswordQuestionAndAnswer(string applicationName, string userName, string newPasswordQuestion, string newPasswordAnswer)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var userNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = System.DBNull.Value;

            var newPasswordQuestionParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@NewPasswordQuestion", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = newPasswordQuestion, Size = 256 };
            if (newPasswordQuestionParam.Value == null)
                newPasswordQuestionParam.Value = System.DBNull.Value;

            var newPasswordAnswerParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@NewPasswordAnswer", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = newPasswordAnswer, Size = 128 };
            if (newPasswordAnswerParam.Value == null)
                newPasswordAnswerParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Membership_ChangePasswordQuestionAndAnswer] @ApplicationName, @UserName, @NewPasswordQuestion, @NewPasswordAnswer", applicationNameParam, userNameParam, newPasswordQuestionParam, newPasswordAnswerParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int AspnetMembershipCreateUser(string applicationName, string userName, string password, string passwordSalt, string email, string passwordQuestion, string passwordAnswer, bool? isApproved, System.DateTime? currentTimeUtc, System.DateTime? createDate, int? uniqueEmail, int? passwordFormat, out System.Guid? userId)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var userNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = System.DBNull.Value;

            var passwordParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Password", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = password, Size = 128 };
            if (passwordParam.Value == null)
                passwordParam.Value = System.DBNull.Value;

            var passwordSaltParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PasswordSalt", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = passwordSalt, Size = 128 };
            if (passwordSaltParam.Value == null)
                passwordSaltParam.Value = System.DBNull.Value;

            var emailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Email", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = email, Size = 256 };
            if (emailParam.Value == null)
                emailParam.Value = System.DBNull.Value;

            var passwordQuestionParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PasswordQuestion", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = passwordQuestion, Size = 256 };
            if (passwordQuestionParam.Value == null)
                passwordQuestionParam.Value = System.DBNull.Value;

            var passwordAnswerParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PasswordAnswer", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = passwordAnswer, Size = 128 };
            if (passwordAnswerParam.Value == null)
                passwordAnswerParam.Value = System.DBNull.Value;

            var isApprovedParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsApproved", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isApproved.GetValueOrDefault() };
            if (!isApproved.HasValue)
                isApprovedParam.Value = System.DBNull.Value;

            var currentTimeUtcParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = currentTimeUtc.GetValueOrDefault() };
            if (!currentTimeUtc.HasValue)
                currentTimeUtcParam.Value = System.DBNull.Value;

            var createDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CreateDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = createDate.GetValueOrDefault() };
            if (!createDate.HasValue)
                createDateParam.Value = System.DBNull.Value;

            var uniqueEmailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UniqueEmail", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = uniqueEmail.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!uniqueEmail.HasValue)
                uniqueEmailParam.Value = System.DBNull.Value;

            var passwordFormatParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PasswordFormat", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = passwordFormat.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!passwordFormat.HasValue)
                passwordFormatParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserId", SqlDbType = System.Data.SqlDbType.UniqueIdentifier, Direction = System.Data.ParameterDirection.Output };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Membership_CreateUser] @ApplicationName, @UserName, @Password, @PasswordSalt, @Email, @PasswordQuestion, @PasswordAnswer, @IsApproved, @CurrentTimeUtc, @CreateDate, @UniqueEmail, @PasswordFormat, @UserId OUTPUT", applicationNameParam, userNameParam, passwordParam, passwordSaltParam, emailParam, passwordQuestionParam, passwordAnswerParam, isApprovedParam, currentTimeUtcParam, createDateParam, uniqueEmailParam, passwordFormatParam, userIdParam, procResultParam);
            if (IsSqlParameterNull(userIdParam))
                userId = null;
            else
                userId = (System.Guid) userIdParam.Value;

            return (int) procResultParam.Value;
        }

        public int AspnetMembershipFindUsersByEmail(string applicationName, string emailToMatch, int? pageIndex, int? pageSize)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var emailToMatchParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailToMatch", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = emailToMatch, Size = 256 };
            if (emailToMatchParam.Value == null)
                emailToMatchParam.Value = System.DBNull.Value;

            var pageIndexParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageIndex", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageIndex.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageIndex.HasValue)
                pageIndexParam.Value = System.DBNull.Value;

            var pageSizeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageSize", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageSize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageSize.HasValue)
                pageSizeParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Membership_FindUsersByEmail] @ApplicationName, @EmailToMatch, @PageIndex, @PageSize", applicationNameParam, emailToMatchParam, pageIndexParam, pageSizeParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int AspnetMembershipFindUsersByName(string applicationName, string userNameToMatch, int? pageIndex, int? pageSize)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var userNameToMatchParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserNameToMatch", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userNameToMatch, Size = 256 };
            if (userNameToMatchParam.Value == null)
                userNameToMatchParam.Value = System.DBNull.Value;

            var pageIndexParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageIndex", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageIndex.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageIndex.HasValue)
                pageIndexParam.Value = System.DBNull.Value;

            var pageSizeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageSize", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageSize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageSize.HasValue)
                pageSizeParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Membership_FindUsersByName] @ApplicationName, @UserNameToMatch, @PageIndex, @PageSize", applicationNameParam, userNameToMatchParam, pageIndexParam, pageSizeParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int AspnetMembershipGetAllUsers(string applicationName, int? pageIndex, int? pageSize)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var pageIndexParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageIndex", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageIndex.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageIndex.HasValue)
                pageIndexParam.Value = System.DBNull.Value;

            var pageSizeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageSize", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageSize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageSize.HasValue)
                pageSizeParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Membership_GetAllUsers] @ApplicationName, @PageIndex, @PageSize", applicationNameParam, pageIndexParam, pageSizeParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int AspnetMembershipGetNumberOfUsersOnline(string applicationName, int? minutesSinceLastInActive, System.DateTime? currentTimeUtc)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var minutesSinceLastInActiveParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MinutesSinceLastInActive", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = minutesSinceLastInActive.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!minutesSinceLastInActive.HasValue)
                minutesSinceLastInActiveParam.Value = System.DBNull.Value;

            var currentTimeUtcParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = currentTimeUtc.GetValueOrDefault() };
            if (!currentTimeUtc.HasValue)
                currentTimeUtcParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Membership_GetNumberOfUsersOnline] @ApplicationName, @MinutesSinceLastInActive, @CurrentTimeUtc", applicationNameParam, minutesSinceLastInActiveParam, currentTimeUtcParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<AspnetMembershipGetPasswordReturnModel> AspnetMembershipGetPassword(string applicationName, string userName, int? maxInvalidPasswordAttempts, int? passwordAttemptWindow, System.DateTime? currentTimeUtc, string passwordAnswer)
        {
            int procResult;
            return AspnetMembershipGetPassword(applicationName, userName, maxInvalidPasswordAttempts, passwordAttemptWindow, currentTimeUtc, passwordAnswer, out procResult);
        }

        public System.Collections.Generic.List<AspnetMembershipGetPasswordReturnModel> AspnetMembershipGetPassword(string applicationName, string userName, int? maxInvalidPasswordAttempts, int? passwordAttemptWindow, System.DateTime? currentTimeUtc, string passwordAnswer, out int procResult)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var userNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = System.DBNull.Value;

            var maxInvalidPasswordAttemptsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MaxInvalidPasswordAttempts", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = maxInvalidPasswordAttempts.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maxInvalidPasswordAttempts.HasValue)
                maxInvalidPasswordAttemptsParam.Value = System.DBNull.Value;

            var passwordAttemptWindowParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PasswordAttemptWindow", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = passwordAttemptWindow.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!passwordAttemptWindow.HasValue)
                passwordAttemptWindowParam.Value = System.DBNull.Value;

            var currentTimeUtcParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = currentTimeUtc.GetValueOrDefault() };
            if (!currentTimeUtc.HasValue)
                currentTimeUtcParam.Value = System.DBNull.Value;

            var passwordAnswerParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PasswordAnswer", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = passwordAnswer, Size = 128 };
            if (passwordAnswerParam.Value == null)
                passwordAnswerParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<AspnetMembershipGetPasswordReturnModel>("EXEC @procResult = [dbo].[aspnet_Membership_GetPassword] @ApplicationName, @UserName, @MaxInvalidPasswordAttempts, @PasswordAttemptWindow, @CurrentTimeUtc, @PasswordAnswer", applicationNameParam, userNameParam, maxInvalidPasswordAttemptsParam, passwordAttemptWindowParam, currentTimeUtcParam, passwordAnswerParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetMembershipGetPasswordReturnModel>> AspnetMembershipGetPasswordAsync(string applicationName, string userName, int? maxInvalidPasswordAttempts, int? passwordAttemptWindow, System.DateTime? currentTimeUtc, string passwordAnswer)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var userNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = System.DBNull.Value;

            var maxInvalidPasswordAttemptsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MaxInvalidPasswordAttempts", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = maxInvalidPasswordAttempts.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maxInvalidPasswordAttempts.HasValue)
                maxInvalidPasswordAttemptsParam.Value = System.DBNull.Value;

            var passwordAttemptWindowParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PasswordAttemptWindow", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = passwordAttemptWindow.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!passwordAttemptWindow.HasValue)
                passwordAttemptWindowParam.Value = System.DBNull.Value;

            var currentTimeUtcParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = currentTimeUtc.GetValueOrDefault() };
            if (!currentTimeUtc.HasValue)
                currentTimeUtcParam.Value = System.DBNull.Value;

            var passwordAnswerParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PasswordAnswer", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = passwordAnswer, Size = 128 };
            if (passwordAnswerParam.Value == null)
                passwordAnswerParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<AspnetMembershipGetPasswordReturnModel>("EXEC [dbo].[aspnet_Membership_GetPassword] @ApplicationName, @UserName, @MaxInvalidPasswordAttempts, @PasswordAttemptWindow, @CurrentTimeUtc, @PasswordAnswer", applicationNameParam, userNameParam, maxInvalidPasswordAttemptsParam, passwordAttemptWindowParam, currentTimeUtcParam, passwordAnswerParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<AspnetMembershipGetPasswordWithFormatReturnModel> AspnetMembershipGetPasswordWithFormat(string applicationName, string userName, bool? updateLastLoginActivityDate, System.DateTime? currentTimeUtc)
        {
            int procResult;
            return AspnetMembershipGetPasswordWithFormat(applicationName, userName, updateLastLoginActivityDate, currentTimeUtc, out procResult);
        }

        public System.Collections.Generic.List<AspnetMembershipGetPasswordWithFormatReturnModel> AspnetMembershipGetPasswordWithFormat(string applicationName, string userName, bool? updateLastLoginActivityDate, System.DateTime? currentTimeUtc, out int procResult)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var userNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = System.DBNull.Value;

            var updateLastLoginActivityDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UpdateLastLoginActivityDate", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = updateLastLoginActivityDate.GetValueOrDefault() };
            if (!updateLastLoginActivityDate.HasValue)
                updateLastLoginActivityDateParam.Value = System.DBNull.Value;

            var currentTimeUtcParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = currentTimeUtc.GetValueOrDefault() };
            if (!currentTimeUtc.HasValue)
                currentTimeUtcParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<AspnetMembershipGetPasswordWithFormatReturnModel>("EXEC @procResult = [dbo].[aspnet_Membership_GetPasswordWithFormat] @ApplicationName, @UserName, @UpdateLastLoginActivityDate, @CurrentTimeUtc", applicationNameParam, userNameParam, updateLastLoginActivityDateParam, currentTimeUtcParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetMembershipGetPasswordWithFormatReturnModel>> AspnetMembershipGetPasswordWithFormatAsync(string applicationName, string userName, bool? updateLastLoginActivityDate, System.DateTime? currentTimeUtc)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var userNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = System.DBNull.Value;

            var updateLastLoginActivityDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UpdateLastLoginActivityDate", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = updateLastLoginActivityDate.GetValueOrDefault() };
            if (!updateLastLoginActivityDate.HasValue)
                updateLastLoginActivityDateParam.Value = System.DBNull.Value;

            var currentTimeUtcParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = currentTimeUtc.GetValueOrDefault() };
            if (!currentTimeUtc.HasValue)
                currentTimeUtcParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<AspnetMembershipGetPasswordWithFormatReturnModel>("EXEC [dbo].[aspnet_Membership_GetPasswordWithFormat] @ApplicationName, @UserName, @UpdateLastLoginActivityDate, @CurrentTimeUtc", applicationNameParam, userNameParam, updateLastLoginActivityDateParam, currentTimeUtcParam).ToListAsync();

            return procResultData;
        }

        public AspnetMembershipGetUserByEmailReturnModel AspnetMembershipGetUserByEmail(string applicationName, string email)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var emailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Email", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = email, Size = 256 };
            if (emailParam.Value == null)
                emailParam.Value = System.DBNull.Value;


            var procResultData = new AspnetMembershipGetUserByEmailReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[aspnet_Membership_GetUserByEmail]";
            cmd.Parameters.Add(applicationNameParam);
            cmd.Parameters.Add(emailParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<AspnetMembershipGetUserByEmailReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<AspnetMembershipGetUserByEmailReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<AspnetMembershipGetUserByEmailReturnModel> AspnetMembershipGetUserByEmailAsync(string applicationName, string email)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var emailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Email", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = email, Size = 256 };
            if (emailParam.Value == null)
                emailParam.Value = System.DBNull.Value;


            var procResultData = new AspnetMembershipGetUserByEmailReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[aspnet_Membership_GetUserByEmail]";
            cmd.Parameters.Add(applicationNameParam);
            cmd.Parameters.Add(emailParam);

            try
            {
                await Database.Connection.OpenAsync().ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<AspnetMembershipGetUserByEmailReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<AspnetMembershipGetUserByEmailReturnModel.ResultSetModel2>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public AspnetMembershipGetUserByNameReturnModel AspnetMembershipGetUserByName(string applicationName, string userName, System.DateTime? currentTimeUtc, bool? updateLastActivity)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var userNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = System.DBNull.Value;

            var currentTimeUtcParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = currentTimeUtc.GetValueOrDefault() };
            if (!currentTimeUtc.HasValue)
                currentTimeUtcParam.Value = System.DBNull.Value;

            var updateLastActivityParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UpdateLastActivity", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = updateLastActivity.GetValueOrDefault() };
            if (!updateLastActivity.HasValue)
                updateLastActivityParam.Value = System.DBNull.Value;


            var procResultData = new AspnetMembershipGetUserByNameReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[aspnet_Membership_GetUserByName]";
            cmd.Parameters.Add(applicationNameParam);
            cmd.Parameters.Add(userNameParam);
            cmd.Parameters.Add(currentTimeUtcParam);
            cmd.Parameters.Add(updateLastActivityParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<AspnetMembershipGetUserByNameReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<AspnetMembershipGetUserByNameReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<AspnetMembershipGetUserByNameReturnModel> AspnetMembershipGetUserByNameAsync(string applicationName, string userName, System.DateTime? currentTimeUtc, bool? updateLastActivity)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var userNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = System.DBNull.Value;

            var currentTimeUtcParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = currentTimeUtc.GetValueOrDefault() };
            if (!currentTimeUtc.HasValue)
                currentTimeUtcParam.Value = System.DBNull.Value;

            var updateLastActivityParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UpdateLastActivity", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = updateLastActivity.GetValueOrDefault() };
            if (!updateLastActivity.HasValue)
                updateLastActivityParam.Value = System.DBNull.Value;


            var procResultData = new AspnetMembershipGetUserByNameReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[aspnet_Membership_GetUserByName]";
            cmd.Parameters.Add(applicationNameParam);
            cmd.Parameters.Add(userNameParam);
            cmd.Parameters.Add(currentTimeUtcParam);
            cmd.Parameters.Add(updateLastActivityParam);

            try
            {
                await Database.Connection.OpenAsync().ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<AspnetMembershipGetUserByNameReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<AspnetMembershipGetUserByNameReturnModel.ResultSetModel2>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public System.Collections.Generic.List<AspnetMembershipGetUserByUserIdReturnModel> AspnetMembershipGetUserByUserId(System.Guid? userId, System.DateTime? currentTimeUtc, bool? updateLastActivity)
        {
            int procResult;
            return AspnetMembershipGetUserByUserId(userId, currentTimeUtc, updateLastActivity, out procResult);
        }

        public System.Collections.Generic.List<AspnetMembershipGetUserByUserIdReturnModel> AspnetMembershipGetUserByUserId(System.Guid? userId, System.DateTime? currentTimeUtc, bool? updateLastActivity, out int procResult)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserId", SqlDbType = System.Data.SqlDbType.UniqueIdentifier, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault() };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var currentTimeUtcParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = currentTimeUtc.GetValueOrDefault() };
            if (!currentTimeUtc.HasValue)
                currentTimeUtcParam.Value = System.DBNull.Value;

            var updateLastActivityParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UpdateLastActivity", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = updateLastActivity.GetValueOrDefault() };
            if (!updateLastActivity.HasValue)
                updateLastActivityParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<AspnetMembershipGetUserByUserIdReturnModel>("EXEC @procResult = [dbo].[aspnet_Membership_GetUserByUserId] @UserId, @CurrentTimeUtc, @UpdateLastActivity", userIdParam, currentTimeUtcParam, updateLastActivityParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetMembershipGetUserByUserIdReturnModel>> AspnetMembershipGetUserByUserIdAsync(System.Guid? userId, System.DateTime? currentTimeUtc, bool? updateLastActivity)
        {
            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserId", SqlDbType = System.Data.SqlDbType.UniqueIdentifier, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault() };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var currentTimeUtcParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = currentTimeUtc.GetValueOrDefault() };
            if (!currentTimeUtc.HasValue)
                currentTimeUtcParam.Value = System.DBNull.Value;

            var updateLastActivityParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UpdateLastActivity", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = updateLastActivity.GetValueOrDefault() };
            if (!updateLastActivity.HasValue)
                updateLastActivityParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<AspnetMembershipGetUserByUserIdReturnModel>("EXEC [dbo].[aspnet_Membership_GetUserByUserId] @UserId, @CurrentTimeUtc, @UpdateLastActivity", userIdParam, currentTimeUtcParam, updateLastActivityParam).ToListAsync();

            return procResultData;
        }

        public int AspnetMembershipResetPassword(string applicationName, string userName, string newPassword, int? maxInvalidPasswordAttempts, int? passwordAttemptWindow, string passwordSalt, System.DateTime? currentTimeUtc, int? passwordFormat, string passwordAnswer)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var userNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = System.DBNull.Value;

            var newPasswordParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@NewPassword", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = newPassword, Size = 128 };
            if (newPasswordParam.Value == null)
                newPasswordParam.Value = System.DBNull.Value;

            var maxInvalidPasswordAttemptsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MaxInvalidPasswordAttempts", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = maxInvalidPasswordAttempts.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maxInvalidPasswordAttempts.HasValue)
                maxInvalidPasswordAttemptsParam.Value = System.DBNull.Value;

            var passwordAttemptWindowParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PasswordAttemptWindow", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = passwordAttemptWindow.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!passwordAttemptWindow.HasValue)
                passwordAttemptWindowParam.Value = System.DBNull.Value;

            var passwordSaltParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PasswordSalt", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = passwordSalt, Size = 128 };
            if (passwordSaltParam.Value == null)
                passwordSaltParam.Value = System.DBNull.Value;

            var currentTimeUtcParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = currentTimeUtc.GetValueOrDefault() };
            if (!currentTimeUtc.HasValue)
                currentTimeUtcParam.Value = System.DBNull.Value;

            var passwordFormatParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PasswordFormat", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = passwordFormat.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!passwordFormat.HasValue)
                passwordFormatParam.Value = System.DBNull.Value;

            var passwordAnswerParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PasswordAnswer", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = passwordAnswer, Size = 128 };
            if (passwordAnswerParam.Value == null)
                passwordAnswerParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Membership_ResetPassword] @ApplicationName, @UserName, @NewPassword, @MaxInvalidPasswordAttempts, @PasswordAttemptWindow, @PasswordSalt, @CurrentTimeUtc, @PasswordFormat, @PasswordAnswer", applicationNameParam, userNameParam, newPasswordParam, maxInvalidPasswordAttemptsParam, passwordAttemptWindowParam, passwordSaltParam, currentTimeUtcParam, passwordFormatParam, passwordAnswerParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int AspnetMembershipSetPassword(string applicationName, string userName, string newPassword, string passwordSalt, System.DateTime? currentTimeUtc, int? passwordFormat)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var userNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = System.DBNull.Value;

            var newPasswordParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@NewPassword", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = newPassword, Size = 128 };
            if (newPasswordParam.Value == null)
                newPasswordParam.Value = System.DBNull.Value;

            var passwordSaltParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PasswordSalt", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = passwordSalt, Size = 128 };
            if (passwordSaltParam.Value == null)
                passwordSaltParam.Value = System.DBNull.Value;

            var currentTimeUtcParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = currentTimeUtc.GetValueOrDefault() };
            if (!currentTimeUtc.HasValue)
                currentTimeUtcParam.Value = System.DBNull.Value;

            var passwordFormatParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PasswordFormat", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = passwordFormat.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!passwordFormat.HasValue)
                passwordFormatParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Membership_SetPassword] @ApplicationName, @UserName, @NewPassword, @PasswordSalt, @CurrentTimeUtc, @PasswordFormat", applicationNameParam, userNameParam, newPasswordParam, passwordSaltParam, currentTimeUtcParam, passwordFormatParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int AspnetMembershipUnlockUser(string applicationName, string userName)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var userNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Membership_UnlockUser] @ApplicationName, @UserName", applicationNameParam, userNameParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int AspnetMembershipUpdateUser(string applicationName, string userName, string email, string comment, bool? isApproved, System.DateTime? lastLoginDate, System.DateTime? lastActivityDate, int? uniqueEmail, System.DateTime? currentTimeUtc)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var userNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = System.DBNull.Value;

            var emailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Email", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = email, Size = 256 };
            if (emailParam.Value == null)
                emailParam.Value = System.DBNull.Value;

            var commentParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Comment", SqlDbType = System.Data.SqlDbType.NText, Direction = System.Data.ParameterDirection.Input, Value = comment, Size = 1073741823 };
            if (commentParam.Value == null)
                commentParam.Value = System.DBNull.Value;

            var isApprovedParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsApproved", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isApproved.GetValueOrDefault() };
            if (!isApproved.HasValue)
                isApprovedParam.Value = System.DBNull.Value;

            var lastLoginDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LastLoginDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = lastLoginDate.GetValueOrDefault() };
            if (!lastLoginDate.HasValue)
                lastLoginDateParam.Value = System.DBNull.Value;

            var lastActivityDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LastActivityDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = lastActivityDate.GetValueOrDefault() };
            if (!lastActivityDate.HasValue)
                lastActivityDateParam.Value = System.DBNull.Value;

            var uniqueEmailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UniqueEmail", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = uniqueEmail.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!uniqueEmail.HasValue)
                uniqueEmailParam.Value = System.DBNull.Value;

            var currentTimeUtcParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = currentTimeUtc.GetValueOrDefault() };
            if (!currentTimeUtc.HasValue)
                currentTimeUtcParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Membership_UpdateUser] @ApplicationName, @UserName, @Email, @Comment, @IsApproved, @LastLoginDate, @LastActivityDate, @UniqueEmail, @CurrentTimeUtc", applicationNameParam, userNameParam, emailParam, commentParam, isApprovedParam, lastLoginDateParam, lastActivityDateParam, uniqueEmailParam, currentTimeUtcParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int AspnetMembershipUpdateUserInfo(string applicationName, string userName, bool? isPasswordCorrect, bool? updateLastLoginActivityDate, int? maxInvalidPasswordAttempts, int? passwordAttemptWindow, System.DateTime? currentTimeUtc, System.DateTime? lastLoginDate, System.DateTime? lastActivityDate)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var userNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = System.DBNull.Value;

            var isPasswordCorrectParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsPasswordCorrect", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isPasswordCorrect.GetValueOrDefault() };
            if (!isPasswordCorrect.HasValue)
                isPasswordCorrectParam.Value = System.DBNull.Value;

            var updateLastLoginActivityDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UpdateLastLoginActivityDate", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = updateLastLoginActivityDate.GetValueOrDefault() };
            if (!updateLastLoginActivityDate.HasValue)
                updateLastLoginActivityDateParam.Value = System.DBNull.Value;

            var maxInvalidPasswordAttemptsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MaxInvalidPasswordAttempts", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = maxInvalidPasswordAttempts.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maxInvalidPasswordAttempts.HasValue)
                maxInvalidPasswordAttemptsParam.Value = System.DBNull.Value;

            var passwordAttemptWindowParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PasswordAttemptWindow", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = passwordAttemptWindow.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!passwordAttemptWindow.HasValue)
                passwordAttemptWindowParam.Value = System.DBNull.Value;

            var currentTimeUtcParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = currentTimeUtc.GetValueOrDefault() };
            if (!currentTimeUtc.HasValue)
                currentTimeUtcParam.Value = System.DBNull.Value;

            var lastLoginDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LastLoginDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = lastLoginDate.GetValueOrDefault() };
            if (!lastLoginDate.HasValue)
                lastLoginDateParam.Value = System.DBNull.Value;

            var lastActivityDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LastActivityDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = lastActivityDate.GetValueOrDefault() };
            if (!lastActivityDate.HasValue)
                lastActivityDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Membership_UpdateUserInfo] @ApplicationName, @UserName, @IsPasswordCorrect, @UpdateLastLoginActivityDate, @MaxInvalidPasswordAttempts, @PasswordAttemptWindow, @CurrentTimeUtc, @LastLoginDate, @LastActivityDate", applicationNameParam, userNameParam, isPasswordCorrectParam, updateLastLoginActivityDateParam, maxInvalidPasswordAttemptsParam, passwordAttemptWindowParam, currentTimeUtcParam, lastLoginDateParam, lastActivityDateParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int AspnetPathsCreatePath(System.Guid? applicationId, string path, out System.Guid? pathId)
        {
            var applicationIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationId", SqlDbType = System.Data.SqlDbType.UniqueIdentifier, Direction = System.Data.ParameterDirection.Input, Value = applicationId.GetValueOrDefault() };
            if (!applicationId.HasValue)
                applicationIdParam.Value = System.DBNull.Value;

            var pathParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Path", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = path, Size = 256 };
            if (pathParam.Value == null)
                pathParam.Value = System.DBNull.Value;

            var pathIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PathId", SqlDbType = System.Data.SqlDbType.UniqueIdentifier, Direction = System.Data.ParameterDirection.Output };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Paths_CreatePath] @ApplicationId, @Path, @PathId OUTPUT", applicationIdParam, pathParam, pathIdParam, procResultParam);
            if (IsSqlParameterNull(pathIdParam))
                pathId = null;
            else
                pathId = (System.Guid) pathIdParam.Value;

            return (int) procResultParam.Value;
        }

        public int AspnetPersonalizationGetApplicationId(string applicationName, out System.Guid? applicationId)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var applicationIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationId", SqlDbType = System.Data.SqlDbType.UniqueIdentifier, Direction = System.Data.ParameterDirection.Output };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Personalization_GetApplicationId] @ApplicationName, @ApplicationId OUTPUT", applicationNameParam, applicationIdParam, procResultParam);
            if (IsSqlParameterNull(applicationIdParam))
                applicationId = null;
            else
                applicationId = (System.Guid) applicationIdParam.Value;

            return (int) procResultParam.Value;
        }

        public int AspnetPersonalizationAdministrationDeleteAllState(bool? allUsersScope, string applicationName, out int? count)
        {
            var allUsersScopeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AllUsersScope", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = allUsersScope.GetValueOrDefault() };
            if (!allUsersScope.HasValue)
                allUsersScopeParam.Value = System.DBNull.Value;

            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var countParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Count", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_PersonalizationAdministration_DeleteAllState] @AllUsersScope, @ApplicationName, @Count OUTPUT", allUsersScopeParam, applicationNameParam, countParam, procResultParam);
            if (IsSqlParameterNull(countParam))
                count = null;
            else
                count = (int) countParam.Value;

            return (int) procResultParam.Value;
        }

        public int AspnetPersonalizationAdministrationFindState(bool? allUsersScope, string applicationName, int? pageIndex, int? pageSize, string path, string userName, System.DateTime? inactiveSinceDate)
        {
            var allUsersScopeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AllUsersScope", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = allUsersScope.GetValueOrDefault() };
            if (!allUsersScope.HasValue)
                allUsersScopeParam.Value = System.DBNull.Value;

            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var pageIndexParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageIndex", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageIndex.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageIndex.HasValue)
                pageIndexParam.Value = System.DBNull.Value;

            var pageSizeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageSize", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageSize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageSize.HasValue)
                pageSizeParam.Value = System.DBNull.Value;

            var pathParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Path", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = path, Size = 256 };
            if (pathParam.Value == null)
                pathParam.Value = System.DBNull.Value;

            var userNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = System.DBNull.Value;

            var inactiveSinceDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@InactiveSinceDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = inactiveSinceDate.GetValueOrDefault() };
            if (!inactiveSinceDate.HasValue)
                inactiveSinceDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_PersonalizationAdministration_FindState] @AllUsersScope, @ApplicationName, @PageIndex, @PageSize, @Path, @UserName, @InactiveSinceDate", allUsersScopeParam, applicationNameParam, pageIndexParam, pageSizeParam, pathParam, userNameParam, inactiveSinceDateParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int AspnetPersonalizationAdministrationGetCountOfState(out int? count, bool? allUsersScope, string applicationName, string path, string userName, System.DateTime? inactiveSinceDate)
        {
            var countParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Count", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var allUsersScopeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AllUsersScope", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = allUsersScope.GetValueOrDefault() };
            if (!allUsersScope.HasValue)
                allUsersScopeParam.Value = System.DBNull.Value;

            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var pathParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Path", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = path, Size = 256 };
            if (pathParam.Value == null)
                pathParam.Value = System.DBNull.Value;

            var userNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = System.DBNull.Value;

            var inactiveSinceDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@InactiveSinceDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = inactiveSinceDate.GetValueOrDefault() };
            if (!inactiveSinceDate.HasValue)
                inactiveSinceDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_PersonalizationAdministration_GetCountOfState] @Count OUTPUT, @AllUsersScope, @ApplicationName, @Path, @UserName, @InactiveSinceDate", countParam, allUsersScopeParam, applicationNameParam, pathParam, userNameParam, inactiveSinceDateParam, procResultParam);
            if (IsSqlParameterNull(countParam))
                count = null;
            else
                count = (int) countParam.Value;

            return (int) procResultParam.Value;
        }

        public int AspnetPersonalizationAdministrationResetSharedState(out int? count, string applicationName, string path)
        {
            var countParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Count", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var pathParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Path", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = path, Size = 256 };
            if (pathParam.Value == null)
                pathParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_PersonalizationAdministration_ResetSharedState] @Count OUTPUT, @ApplicationName, @Path", countParam, applicationNameParam, pathParam, procResultParam);
            if (IsSqlParameterNull(countParam))
                count = null;
            else
                count = (int) countParam.Value;

            return (int) procResultParam.Value;
        }

        public int AspnetPersonalizationAdministrationResetUserState(out int? count, string applicationName, System.DateTime? inactiveSinceDate, string userName, string path)
        {
            var countParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Count", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var inactiveSinceDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@InactiveSinceDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = inactiveSinceDate.GetValueOrDefault() };
            if (!inactiveSinceDate.HasValue)
                inactiveSinceDateParam.Value = System.DBNull.Value;

            var userNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = System.DBNull.Value;

            var pathParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Path", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = path, Size = 256 };
            if (pathParam.Value == null)
                pathParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_PersonalizationAdministration_ResetUserState] @Count OUTPUT, @ApplicationName, @InactiveSinceDate, @UserName, @Path", countParam, applicationNameParam, inactiveSinceDateParam, userNameParam, pathParam, procResultParam);
            if (IsSqlParameterNull(countParam))
                count = null;
            else
                count = (int) countParam.Value;

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<AspnetPersonalizationAllUsersGetPageSettingsReturnModel> AspnetPersonalizationAllUsersGetPageSettings(string applicationName, string path)
        {
            int procResult;
            return AspnetPersonalizationAllUsersGetPageSettings(applicationName, path, out procResult);
        }

        public System.Collections.Generic.List<AspnetPersonalizationAllUsersGetPageSettingsReturnModel> AspnetPersonalizationAllUsersGetPageSettings(string applicationName, string path, out int procResult)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var pathParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Path", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = path, Size = 256 };
            if (pathParam.Value == null)
                pathParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<AspnetPersonalizationAllUsersGetPageSettingsReturnModel>("EXEC @procResult = [dbo].[aspnet_PersonalizationAllUsers_GetPageSettings] @ApplicationName, @Path", applicationNameParam, pathParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetPersonalizationAllUsersGetPageSettingsReturnModel>> AspnetPersonalizationAllUsersGetPageSettingsAsync(string applicationName, string path)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var pathParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Path", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = path, Size = 256 };
            if (pathParam.Value == null)
                pathParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<AspnetPersonalizationAllUsersGetPageSettingsReturnModel>("EXEC [dbo].[aspnet_PersonalizationAllUsers_GetPageSettings] @ApplicationName, @Path", applicationNameParam, pathParam).ToListAsync();

            return procResultData;
        }

        public int AspnetPersonalizationAllUsersResetPageSettings(string applicationName, string path)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var pathParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Path", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = path, Size = 256 };
            if (pathParam.Value == null)
                pathParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_PersonalizationAllUsers_ResetPageSettings] @ApplicationName, @Path", applicationNameParam, pathParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int AspnetPersonalizationAllUsersSetPageSettings(string applicationName, string path, byte[] pageSettings, System.DateTime? currentTimeUtc)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var pathParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Path", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = path, Size = 256 };
            if (pathParam.Value == null)
                pathParam.Value = System.DBNull.Value;

            var pageSettingsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageSettings", SqlDbType = System.Data.SqlDbType.Image, Direction = System.Data.ParameterDirection.Input, Value = pageSettings, Size = 2147483647 };
            if (pageSettingsParam.Value == null)
                pageSettingsParam.Value = System.DBNull.Value;

            var currentTimeUtcParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = currentTimeUtc.GetValueOrDefault() };
            if (!currentTimeUtc.HasValue)
                currentTimeUtcParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_PersonalizationAllUsers_SetPageSettings] @ApplicationName, @Path, @PageSettings, @CurrentTimeUtc", applicationNameParam, pathParam, pageSettingsParam, currentTimeUtcParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<AspnetPersonalizationPerUserGetPageSettingsReturnModel> AspnetPersonalizationPerUserGetPageSettings(string applicationName, string userName, string path, System.DateTime? currentTimeUtc)
        {
            int procResult;
            return AspnetPersonalizationPerUserGetPageSettings(applicationName, userName, path, currentTimeUtc, out procResult);
        }

        public System.Collections.Generic.List<AspnetPersonalizationPerUserGetPageSettingsReturnModel> AspnetPersonalizationPerUserGetPageSettings(string applicationName, string userName, string path, System.DateTime? currentTimeUtc, out int procResult)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var userNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = System.DBNull.Value;

            var pathParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Path", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = path, Size = 256 };
            if (pathParam.Value == null)
                pathParam.Value = System.DBNull.Value;

            var currentTimeUtcParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = currentTimeUtc.GetValueOrDefault() };
            if (!currentTimeUtc.HasValue)
                currentTimeUtcParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<AspnetPersonalizationPerUserGetPageSettingsReturnModel>("EXEC @procResult = [dbo].[aspnet_PersonalizationPerUser_GetPageSettings] @ApplicationName, @UserName, @Path, @CurrentTimeUtc", applicationNameParam, userNameParam, pathParam, currentTimeUtcParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetPersonalizationPerUserGetPageSettingsReturnModel>> AspnetPersonalizationPerUserGetPageSettingsAsync(string applicationName, string userName, string path, System.DateTime? currentTimeUtc)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var userNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = System.DBNull.Value;

            var pathParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Path", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = path, Size = 256 };
            if (pathParam.Value == null)
                pathParam.Value = System.DBNull.Value;

            var currentTimeUtcParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = currentTimeUtc.GetValueOrDefault() };
            if (!currentTimeUtc.HasValue)
                currentTimeUtcParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<AspnetPersonalizationPerUserGetPageSettingsReturnModel>("EXEC [dbo].[aspnet_PersonalizationPerUser_GetPageSettings] @ApplicationName, @UserName, @Path, @CurrentTimeUtc", applicationNameParam, userNameParam, pathParam, currentTimeUtcParam).ToListAsync();

            return procResultData;
        }

        public int AspnetPersonalizationPerUserResetPageSettings(string applicationName, string userName, string path, System.DateTime? currentTimeUtc)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var userNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = System.DBNull.Value;

            var pathParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Path", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = path, Size = 256 };
            if (pathParam.Value == null)
                pathParam.Value = System.DBNull.Value;

            var currentTimeUtcParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = currentTimeUtc.GetValueOrDefault() };
            if (!currentTimeUtc.HasValue)
                currentTimeUtcParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_PersonalizationPerUser_ResetPageSettings] @ApplicationName, @UserName, @Path, @CurrentTimeUtc", applicationNameParam, userNameParam, pathParam, currentTimeUtcParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int AspnetPersonalizationPerUserSetPageSettings(string applicationName, string userName, string path, byte[] pageSettings, System.DateTime? currentTimeUtc)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var userNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = System.DBNull.Value;

            var pathParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Path", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = path, Size = 256 };
            if (pathParam.Value == null)
                pathParam.Value = System.DBNull.Value;

            var pageSettingsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageSettings", SqlDbType = System.Data.SqlDbType.Image, Direction = System.Data.ParameterDirection.Input, Value = pageSettings, Size = 2147483647 };
            if (pageSettingsParam.Value == null)
                pageSettingsParam.Value = System.DBNull.Value;

            var currentTimeUtcParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = currentTimeUtc.GetValueOrDefault() };
            if (!currentTimeUtc.HasValue)
                currentTimeUtcParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_PersonalizationPerUser_SetPageSettings] @ApplicationName, @UserName, @Path, @PageSettings, @CurrentTimeUtc", applicationNameParam, userNameParam, pathParam, pageSettingsParam, currentTimeUtcParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public AspnetProfileDeleteInactiveProfilesReturnModel AspnetProfileDeleteInactiveProfiles(string applicationName, int? profileAuthOptions, System.DateTime? inactiveSinceDate)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var profileAuthOptionsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProfileAuthOptions", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = profileAuthOptions.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!profileAuthOptions.HasValue)
                profileAuthOptionsParam.Value = System.DBNull.Value;

            var inactiveSinceDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@InactiveSinceDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = inactiveSinceDate.GetValueOrDefault() };
            if (!inactiveSinceDate.HasValue)
                inactiveSinceDateParam.Value = System.DBNull.Value;


            var procResultData = new AspnetProfileDeleteInactiveProfilesReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[aspnet_Profile_DeleteInactiveProfiles]";
            cmd.Parameters.Add(applicationNameParam);
            cmd.Parameters.Add(profileAuthOptionsParam);
            cmd.Parameters.Add(inactiveSinceDateParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<AspnetProfileDeleteInactiveProfilesReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<AspnetProfileDeleteInactiveProfilesReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<AspnetProfileDeleteInactiveProfilesReturnModel> AspnetProfileDeleteInactiveProfilesAsync(string applicationName, int? profileAuthOptions, System.DateTime? inactiveSinceDate)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var profileAuthOptionsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProfileAuthOptions", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = profileAuthOptions.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!profileAuthOptions.HasValue)
                profileAuthOptionsParam.Value = System.DBNull.Value;

            var inactiveSinceDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@InactiveSinceDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = inactiveSinceDate.GetValueOrDefault() };
            if (!inactiveSinceDate.HasValue)
                inactiveSinceDateParam.Value = System.DBNull.Value;


            var procResultData = new AspnetProfileDeleteInactiveProfilesReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[aspnet_Profile_DeleteInactiveProfiles]";
            cmd.Parameters.Add(applicationNameParam);
            cmd.Parameters.Add(profileAuthOptionsParam);
            cmd.Parameters.Add(inactiveSinceDateParam);

            try
            {
                await Database.Connection.OpenAsync().ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<AspnetProfileDeleteInactiveProfilesReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<AspnetProfileDeleteInactiveProfilesReturnModel.ResultSetModel2>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public System.Collections.Generic.List<AspnetProfileDeleteProfilesReturnModel> AspnetProfileDeleteProfiles(string applicationName, string userNames)
        {
            int procResult;
            return AspnetProfileDeleteProfiles(applicationName, userNames, out procResult);
        }

        public System.Collections.Generic.List<AspnetProfileDeleteProfilesReturnModel> AspnetProfileDeleteProfiles(string applicationName, string userNames, out int procResult)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var userNamesParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserNames", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userNames, Size = 4000 };
            if (userNamesParam.Value == null)
                userNamesParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<AspnetProfileDeleteProfilesReturnModel>("EXEC @procResult = [dbo].[aspnet_Profile_DeleteProfiles] @ApplicationName, @UserNames", applicationNameParam, userNamesParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetProfileDeleteProfilesReturnModel>> AspnetProfileDeleteProfilesAsync(string applicationName, string userNames)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var userNamesParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserNames", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userNames, Size = 4000 };
            if (userNamesParam.Value == null)
                userNamesParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<AspnetProfileDeleteProfilesReturnModel>("EXEC [dbo].[aspnet_Profile_DeleteProfiles] @ApplicationName, @UserNames", applicationNameParam, userNamesParam).ToListAsync();

            return procResultData;
        }

        public AspnetProfileGetNumberOfInactiveProfilesReturnModel AspnetProfileGetNumberOfInactiveProfiles(string applicationName, int? profileAuthOptions, System.DateTime? inactiveSinceDate)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var profileAuthOptionsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProfileAuthOptions", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = profileAuthOptions.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!profileAuthOptions.HasValue)
                profileAuthOptionsParam.Value = System.DBNull.Value;

            var inactiveSinceDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@InactiveSinceDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = inactiveSinceDate.GetValueOrDefault() };
            if (!inactiveSinceDate.HasValue)
                inactiveSinceDateParam.Value = System.DBNull.Value;


            var procResultData = new AspnetProfileGetNumberOfInactiveProfilesReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[aspnet_Profile_GetNumberOfInactiveProfiles]";
            cmd.Parameters.Add(applicationNameParam);
            cmd.Parameters.Add(profileAuthOptionsParam);
            cmd.Parameters.Add(inactiveSinceDateParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<AspnetProfileGetNumberOfInactiveProfilesReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<AspnetProfileGetNumberOfInactiveProfilesReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<AspnetProfileGetNumberOfInactiveProfilesReturnModel> AspnetProfileGetNumberOfInactiveProfilesAsync(string applicationName, int? profileAuthOptions, System.DateTime? inactiveSinceDate)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var profileAuthOptionsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProfileAuthOptions", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = profileAuthOptions.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!profileAuthOptions.HasValue)
                profileAuthOptionsParam.Value = System.DBNull.Value;

            var inactiveSinceDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@InactiveSinceDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = inactiveSinceDate.GetValueOrDefault() };
            if (!inactiveSinceDate.HasValue)
                inactiveSinceDateParam.Value = System.DBNull.Value;


            var procResultData = new AspnetProfileGetNumberOfInactiveProfilesReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[aspnet_Profile_GetNumberOfInactiveProfiles]";
            cmd.Parameters.Add(applicationNameParam);
            cmd.Parameters.Add(profileAuthOptionsParam);
            cmd.Parameters.Add(inactiveSinceDateParam);

            try
            {
                await Database.Connection.OpenAsync().ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<AspnetProfileGetNumberOfInactiveProfilesReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<AspnetProfileGetNumberOfInactiveProfilesReturnModel.ResultSetModel2>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public int AspnetProfileGetProfiles(string applicationName, int? profileAuthOptions, int? pageIndex, int? pageSize, string userNameToMatch, System.DateTime? inactiveSinceDate)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var profileAuthOptionsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProfileAuthOptions", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = profileAuthOptions.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!profileAuthOptions.HasValue)
                profileAuthOptionsParam.Value = System.DBNull.Value;

            var pageIndexParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageIndex", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageIndex.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageIndex.HasValue)
                pageIndexParam.Value = System.DBNull.Value;

            var pageSizeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageSize", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageSize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageSize.HasValue)
                pageSizeParam.Value = System.DBNull.Value;

            var userNameToMatchParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserNameToMatch", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userNameToMatch, Size = 256 };
            if (userNameToMatchParam.Value == null)
                userNameToMatchParam.Value = System.DBNull.Value;

            var inactiveSinceDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@InactiveSinceDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = inactiveSinceDate.GetValueOrDefault() };
            if (!inactiveSinceDate.HasValue)
                inactiveSinceDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Profile_GetProfiles] @ApplicationName, @ProfileAuthOptions, @PageIndex, @PageSize, @UserNameToMatch, @InactiveSinceDate", applicationNameParam, profileAuthOptionsParam, pageIndexParam, pageSizeParam, userNameToMatchParam, inactiveSinceDateParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<AspnetProfileGetPropertiesReturnModel> AspnetProfileGetProperties(string applicationName, string userName, System.DateTime? currentTimeUtc)
        {
            int procResult;
            return AspnetProfileGetProperties(applicationName, userName, currentTimeUtc, out procResult);
        }

        public System.Collections.Generic.List<AspnetProfileGetPropertiesReturnModel> AspnetProfileGetProperties(string applicationName, string userName, System.DateTime? currentTimeUtc, out int procResult)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var userNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = System.DBNull.Value;

            var currentTimeUtcParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = currentTimeUtc.GetValueOrDefault() };
            if (!currentTimeUtc.HasValue)
                currentTimeUtcParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<AspnetProfileGetPropertiesReturnModel>("EXEC @procResult = [dbo].[aspnet_Profile_GetProperties] @ApplicationName, @UserName, @CurrentTimeUtc", applicationNameParam, userNameParam, currentTimeUtcParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetProfileGetPropertiesReturnModel>> AspnetProfileGetPropertiesAsync(string applicationName, string userName, System.DateTime? currentTimeUtc)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var userNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = System.DBNull.Value;

            var currentTimeUtcParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = currentTimeUtc.GetValueOrDefault() };
            if (!currentTimeUtc.HasValue)
                currentTimeUtcParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<AspnetProfileGetPropertiesReturnModel>("EXEC [dbo].[aspnet_Profile_GetProperties] @ApplicationName, @UserName, @CurrentTimeUtc", applicationNameParam, userNameParam, currentTimeUtcParam).ToListAsync();

            return procResultData;
        }

        public int AspnetProfileSetProperties(string applicationName, string propertyNames, string propertyValuesString, byte[] propertyValuesBinary, string userName, bool? isUserAnonymous, System.DateTime? currentTimeUtc)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var propertyNamesParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PropertyNames", SqlDbType = System.Data.SqlDbType.NText, Direction = System.Data.ParameterDirection.Input, Value = propertyNames, Size = 1073741823 };
            if (propertyNamesParam.Value == null)
                propertyNamesParam.Value = System.DBNull.Value;

            var propertyValuesStringParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PropertyValuesString", SqlDbType = System.Data.SqlDbType.NText, Direction = System.Data.ParameterDirection.Input, Value = propertyValuesString, Size = 1073741823 };
            if (propertyValuesStringParam.Value == null)
                propertyValuesStringParam.Value = System.DBNull.Value;

            var propertyValuesBinaryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PropertyValuesBinary", SqlDbType = System.Data.SqlDbType.Image, Direction = System.Data.ParameterDirection.Input, Value = propertyValuesBinary, Size = 2147483647 };
            if (propertyValuesBinaryParam.Value == null)
                propertyValuesBinaryParam.Value = System.DBNull.Value;

            var userNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = System.DBNull.Value;

            var isUserAnonymousParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsUserAnonymous", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isUserAnonymous.GetValueOrDefault() };
            if (!isUserAnonymous.HasValue)
                isUserAnonymousParam.Value = System.DBNull.Value;

            var currentTimeUtcParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = currentTimeUtc.GetValueOrDefault() };
            if (!currentTimeUtc.HasValue)
                currentTimeUtcParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Profile_SetProperties] @ApplicationName, @PropertyNames, @PropertyValuesString, @PropertyValuesBinary, @UserName, @IsUserAnonymous, @CurrentTimeUtc", applicationNameParam, propertyNamesParam, propertyValuesStringParam, propertyValuesBinaryParam, userNameParam, isUserAnonymousParam, currentTimeUtcParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int AspnetRegisterSchemaVersion(string feature, string compatibleSchemaVersion, bool? isCurrentVersion, bool? removeIncompatibleSchema)
        {
            var featureParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Feature", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = feature, Size = 128 };
            if (featureParam.Value == null)
                featureParam.Value = System.DBNull.Value;

            var compatibleSchemaVersionParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CompatibleSchemaVersion", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = compatibleSchemaVersion, Size = 128 };
            if (compatibleSchemaVersionParam.Value == null)
                compatibleSchemaVersionParam.Value = System.DBNull.Value;

            var isCurrentVersionParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsCurrentVersion", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isCurrentVersion.GetValueOrDefault() };
            if (!isCurrentVersion.HasValue)
                isCurrentVersionParam.Value = System.DBNull.Value;

            var removeIncompatibleSchemaParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RemoveIncompatibleSchema", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = removeIncompatibleSchema.GetValueOrDefault() };
            if (!removeIncompatibleSchema.HasValue)
                removeIncompatibleSchemaParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_RegisterSchemaVersion] @Feature, @CompatibleSchemaVersion, @IsCurrentVersion, @RemoveIncompatibleSchema", featureParam, compatibleSchemaVersionParam, isCurrentVersionParam, removeIncompatibleSchemaParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int AspnetRolesCreateRole(string applicationName, string roleName)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var roleNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RoleName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = roleName, Size = 256 };
            if (roleNameParam.Value == null)
                roleNameParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Roles_CreateRole] @ApplicationName, @RoleName", applicationNameParam, roleNameParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int AspnetRolesDeleteRole(string applicationName, string roleName, bool? deleteOnlyIfRoleIsEmpty)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var roleNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RoleName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = roleName, Size = 256 };
            if (roleNameParam.Value == null)
                roleNameParam.Value = System.DBNull.Value;

            var deleteOnlyIfRoleIsEmptyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DeleteOnlyIfRoleIsEmpty", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = deleteOnlyIfRoleIsEmpty.GetValueOrDefault() };
            if (!deleteOnlyIfRoleIsEmpty.HasValue)
                deleteOnlyIfRoleIsEmptyParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Roles_DeleteRole] @ApplicationName, @RoleName, @DeleteOnlyIfRoleIsEmpty", applicationNameParam, roleNameParam, deleteOnlyIfRoleIsEmptyParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<AspnetRolesGetAllRolesReturnModel> AspnetRolesGetAllRoles(string applicationName)
        {
            int procResult;
            return AspnetRolesGetAllRoles(applicationName, out procResult);
        }

        public System.Collections.Generic.List<AspnetRolesGetAllRolesReturnModel> AspnetRolesGetAllRoles(string applicationName, out int procResult)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<AspnetRolesGetAllRolesReturnModel>("EXEC @procResult = [dbo].[aspnet_Roles_GetAllRoles] @ApplicationName", applicationNameParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetRolesGetAllRolesReturnModel>> AspnetRolesGetAllRolesAsync(string applicationName)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<AspnetRolesGetAllRolesReturnModel>("EXEC [dbo].[aspnet_Roles_GetAllRoles] @ApplicationName", applicationNameParam).ToListAsync();

            return procResultData;
        }

        public int AspnetRolesRoleExists(string applicationName, string roleName)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var roleNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RoleName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = roleName, Size = 256 };
            if (roleNameParam.Value == null)
                roleNameParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Roles_RoleExists] @ApplicationName, @RoleName", applicationNameParam, roleNameParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int AspnetSetupRemoveAllRoleMembers(string name)
        {
            var nameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@name", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = name, Size = 128 };
            if (nameParam.Value == null)
                nameParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Setup_RemoveAllRoleMembers] @name", nameParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int AspnetSetupRestorePermissions(string name)
        {
            var nameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@name", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = name, Size = 128 };
            if (nameParam.Value == null)
                nameParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Setup_RestorePermissions] @name", nameParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int AspnetUnRegisterSchemaVersion(string feature, string compatibleSchemaVersion)
        {
            var featureParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Feature", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = feature, Size = 128 };
            if (featureParam.Value == null)
                featureParam.Value = System.DBNull.Value;

            var compatibleSchemaVersionParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CompatibleSchemaVersion", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = compatibleSchemaVersion, Size = 128 };
            if (compatibleSchemaVersionParam.Value == null)
                compatibleSchemaVersionParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_UnRegisterSchemaVersion] @Feature, @CompatibleSchemaVersion", featureParam, compatibleSchemaVersionParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int AspnetUsersCreateUser(System.Guid? applicationId, string userName, bool? isUserAnonymous, System.DateTime? lastActivityDate, out System.Guid? userId)
        {
            var applicationIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationId", SqlDbType = System.Data.SqlDbType.UniqueIdentifier, Direction = System.Data.ParameterDirection.Input, Value = applicationId.GetValueOrDefault() };
            if (!applicationId.HasValue)
                applicationIdParam.Value = System.DBNull.Value;

            var userNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = System.DBNull.Value;

            var isUserAnonymousParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IsUserAnonymous", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = isUserAnonymous.GetValueOrDefault() };
            if (!isUserAnonymous.HasValue)
                isUserAnonymousParam.Value = System.DBNull.Value;

            var lastActivityDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LastActivityDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = lastActivityDate.GetValueOrDefault() };
            if (!lastActivityDate.HasValue)
                lastActivityDateParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserId", SqlDbType = System.Data.SqlDbType.UniqueIdentifier, Direction = System.Data.ParameterDirection.Output };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Users_CreateUser] @ApplicationId, @UserName, @IsUserAnonymous, @LastActivityDate, @UserId OUTPUT", applicationIdParam, userNameParam, isUserAnonymousParam, lastActivityDateParam, userIdParam, procResultParam);
            if (IsSqlParameterNull(userIdParam))
                userId = null;
            else
                userId = (System.Guid) userIdParam.Value;

            return (int) procResultParam.Value;
        }

        public int AspnetUsersDeleteUser(string applicationName, string userName, int? tablesToDeleteFrom, out int? numTablesDeletedFrom)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var userNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = System.DBNull.Value;

            var tablesToDeleteFromParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TablesToDeleteFrom", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tablesToDeleteFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tablesToDeleteFrom.HasValue)
                tablesToDeleteFromParam.Value = System.DBNull.Value;

            var numTablesDeletedFromParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@NumTablesDeletedFrom", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Users_DeleteUser] @ApplicationName, @UserName, @TablesToDeleteFrom, @NumTablesDeletedFrom OUTPUT", applicationNameParam, userNameParam, tablesToDeleteFromParam, numTablesDeletedFromParam, procResultParam);
            if (IsSqlParameterNull(numTablesDeletedFromParam))
                numTablesDeletedFrom = null;
            else
                numTablesDeletedFrom = (int) numTablesDeletedFromParam.Value;

            return (int) procResultParam.Value;
        }

        public AspnetUsersInRolesAddUsersToRolesReturnModel AspnetUsersInRolesAddUsersToRoles(string applicationName, string userNames, string roleNames, System.DateTime? currentTimeUtc)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var userNamesParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserNames", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userNames, Size = 4000 };
            if (userNamesParam.Value == null)
                userNamesParam.Value = System.DBNull.Value;

            var roleNamesParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RoleNames", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = roleNames, Size = 4000 };
            if (roleNamesParam.Value == null)
                roleNamesParam.Value = System.DBNull.Value;

            var currentTimeUtcParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = currentTimeUtc.GetValueOrDefault() };
            if (!currentTimeUtc.HasValue)
                currentTimeUtcParam.Value = System.DBNull.Value;


            var procResultData = new AspnetUsersInRolesAddUsersToRolesReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[aspnet_UsersInRoles_AddUsersToRoles]";
            cmd.Parameters.Add(applicationNameParam);
            cmd.Parameters.Add(userNamesParam);
            cmd.Parameters.Add(roleNamesParam);
            cmd.Parameters.Add(currentTimeUtcParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<AspnetUsersInRolesAddUsersToRolesReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<AspnetUsersInRolesAddUsersToRolesReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<AspnetUsersInRolesAddUsersToRolesReturnModel> AspnetUsersInRolesAddUsersToRolesAsync(string applicationName, string userNames, string roleNames, System.DateTime? currentTimeUtc)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var userNamesParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserNames", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userNames, Size = 4000 };
            if (userNamesParam.Value == null)
                userNamesParam.Value = System.DBNull.Value;

            var roleNamesParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RoleNames", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = roleNames, Size = 4000 };
            if (roleNamesParam.Value == null)
                roleNamesParam.Value = System.DBNull.Value;

            var currentTimeUtcParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = currentTimeUtc.GetValueOrDefault() };
            if (!currentTimeUtc.HasValue)
                currentTimeUtcParam.Value = System.DBNull.Value;


            var procResultData = new AspnetUsersInRolesAddUsersToRolesReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[aspnet_UsersInRoles_AddUsersToRoles]";
            cmd.Parameters.Add(applicationNameParam);
            cmd.Parameters.Add(userNamesParam);
            cmd.Parameters.Add(roleNamesParam);
            cmd.Parameters.Add(currentTimeUtcParam);

            try
            {
                await Database.Connection.OpenAsync().ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<AspnetUsersInRolesAddUsersToRolesReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<AspnetUsersInRolesAddUsersToRolesReturnModel.ResultSetModel2>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public System.Collections.Generic.List<AspnetUsersInRolesFindUsersInRoleReturnModel> AspnetUsersInRolesFindUsersInRole(string applicationName, string roleName, string userNameToMatch)
        {
            int procResult;
            return AspnetUsersInRolesFindUsersInRole(applicationName, roleName, userNameToMatch, out procResult);
        }

        public System.Collections.Generic.List<AspnetUsersInRolesFindUsersInRoleReturnModel> AspnetUsersInRolesFindUsersInRole(string applicationName, string roleName, string userNameToMatch, out int procResult)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var roleNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RoleName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = roleName, Size = 256 };
            if (roleNameParam.Value == null)
                roleNameParam.Value = System.DBNull.Value;

            var userNameToMatchParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserNameToMatch", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userNameToMatch, Size = 256 };
            if (userNameToMatchParam.Value == null)
                userNameToMatchParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<AspnetUsersInRolesFindUsersInRoleReturnModel>("EXEC @procResult = [dbo].[aspnet_UsersInRoles_FindUsersInRole] @ApplicationName, @RoleName, @UserNameToMatch", applicationNameParam, roleNameParam, userNameToMatchParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetUsersInRolesFindUsersInRoleReturnModel>> AspnetUsersInRolesFindUsersInRoleAsync(string applicationName, string roleName, string userNameToMatch)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var roleNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RoleName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = roleName, Size = 256 };
            if (roleNameParam.Value == null)
                roleNameParam.Value = System.DBNull.Value;

            var userNameToMatchParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserNameToMatch", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userNameToMatch, Size = 256 };
            if (userNameToMatchParam.Value == null)
                userNameToMatchParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<AspnetUsersInRolesFindUsersInRoleReturnModel>("EXEC [dbo].[aspnet_UsersInRoles_FindUsersInRole] @ApplicationName, @RoleName, @UserNameToMatch", applicationNameParam, roleNameParam, userNameToMatchParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<AspnetUsersInRolesGetRolesForUserReturnModel> AspnetUsersInRolesGetRolesForUser(string applicationName, string userName)
        {
            int procResult;
            return AspnetUsersInRolesGetRolesForUser(applicationName, userName, out procResult);
        }

        public System.Collections.Generic.List<AspnetUsersInRolesGetRolesForUserReturnModel> AspnetUsersInRolesGetRolesForUser(string applicationName, string userName, out int procResult)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var userNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<AspnetUsersInRolesGetRolesForUserReturnModel>("EXEC @procResult = [dbo].[aspnet_UsersInRoles_GetRolesForUser] @ApplicationName, @UserName", applicationNameParam, userNameParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetUsersInRolesGetRolesForUserReturnModel>> AspnetUsersInRolesGetRolesForUserAsync(string applicationName, string userName)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var userNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<AspnetUsersInRolesGetRolesForUserReturnModel>("EXEC [dbo].[aspnet_UsersInRoles_GetRolesForUser] @ApplicationName, @UserName", applicationNameParam, userNameParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<AspnetUsersInRolesGetUsersInRolesReturnModel> AspnetUsersInRolesGetUsersInRoles(string applicationName, string roleName)
        {
            int procResult;
            return AspnetUsersInRolesGetUsersInRoles(applicationName, roleName, out procResult);
        }

        public System.Collections.Generic.List<AspnetUsersInRolesGetUsersInRolesReturnModel> AspnetUsersInRolesGetUsersInRoles(string applicationName, string roleName, out int procResult)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var roleNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RoleName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = roleName, Size = 256 };
            if (roleNameParam.Value == null)
                roleNameParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<AspnetUsersInRolesGetUsersInRolesReturnModel>("EXEC @procResult = [dbo].[aspnet_UsersInRoles_GetUsersInRoles] @ApplicationName, @RoleName", applicationNameParam, roleNameParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetUsersInRolesGetUsersInRolesReturnModel>> AspnetUsersInRolesGetUsersInRolesAsync(string applicationName, string roleName)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var roleNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RoleName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = roleName, Size = 256 };
            if (roleNameParam.Value == null)
                roleNameParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<AspnetUsersInRolesGetUsersInRolesReturnModel>("EXEC [dbo].[aspnet_UsersInRoles_GetUsersInRoles] @ApplicationName, @RoleName", applicationNameParam, roleNameParam).ToListAsync();

            return procResultData;
        }

        public int AspnetUsersInRolesIsUserInRole(string applicationName, string userName, string roleName)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var userNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = System.DBNull.Value;

            var roleNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RoleName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = roleName, Size = 256 };
            if (roleNameParam.Value == null)
                roleNameParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_UsersInRoles_IsUserInRole] @ApplicationName, @UserName, @RoleName", applicationNameParam, userNameParam, roleNameParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public AspnetUsersInRolesRemoveUsersFromRolesReturnModel AspnetUsersInRolesRemoveUsersFromRoles(string applicationName, string userNames, string roleNames)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var userNamesParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserNames", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userNames, Size = 4000 };
            if (userNamesParam.Value == null)
                userNamesParam.Value = System.DBNull.Value;

            var roleNamesParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RoleNames", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = roleNames, Size = 4000 };
            if (roleNamesParam.Value == null)
                roleNamesParam.Value = System.DBNull.Value;


            var procResultData = new AspnetUsersInRolesRemoveUsersFromRolesReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[aspnet_UsersInRoles_RemoveUsersFromRoles]";
            cmd.Parameters.Add(applicationNameParam);
            cmd.Parameters.Add(userNamesParam);
            cmd.Parameters.Add(roleNamesParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<AspnetUsersInRolesRemoveUsersFromRolesReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<AspnetUsersInRolesRemoveUsersFromRolesReturnModel.ResultSetModel2>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet3 = objectContext.Translate<AspnetUsersInRolesRemoveUsersFromRolesReturnModel.ResultSetModel3>(reader).ToList();
                reader.Close();

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<AspnetUsersInRolesRemoveUsersFromRolesReturnModel> AspnetUsersInRolesRemoveUsersFromRolesAsync(string applicationName, string userNames, string roleNames)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var userNamesParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserNames", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = userNames, Size = 4000 };
            if (userNamesParam.Value == null)
                userNamesParam.Value = System.DBNull.Value;

            var roleNamesParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RoleNames", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = roleNames, Size = 4000 };
            if (roleNamesParam.Value == null)
                roleNamesParam.Value = System.DBNull.Value;


            var procResultData = new AspnetUsersInRolesRemoveUsersFromRolesReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[aspnet_UsersInRoles_RemoveUsersFromRoles]";
            cmd.Parameters.Add(applicationNameParam);
            cmd.Parameters.Add(userNamesParam);
            cmd.Parameters.Add(roleNamesParam);

            try
            {
                await Database.Connection.OpenAsync().ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<AspnetUsersInRolesRemoveUsersFromRolesReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<AspnetUsersInRolesRemoveUsersFromRolesReturnModel.ResultSetModel2>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet3 = objectContext.Translate<AspnetUsersInRolesRemoveUsersFromRolesReturnModel.ResultSetModel3>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public int AspnetWebEventLogEvent(string eventId, System.DateTime? eventTimeUtc, System.DateTime? eventTime, string eventType, decimal? eventSequence, decimal? eventOccurrence, int? eventCode, int? eventDetailCode, string message, string applicationPath, string applicationVirtualPath, string machineName, string requestUrl, string exceptionType, string details)
        {
            var eventIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EventId", SqlDbType = System.Data.SqlDbType.Char, Direction = System.Data.ParameterDirection.Input, Value = eventId, Size = 32 };
            if (eventIdParam.Value == null)
                eventIdParam.Value = System.DBNull.Value;

            var eventTimeUtcParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EventTimeUtc", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = eventTimeUtc.GetValueOrDefault() };
            if (!eventTimeUtc.HasValue)
                eventTimeUtcParam.Value = System.DBNull.Value;

            var eventTimeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EventTime", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = eventTime.GetValueOrDefault() };
            if (!eventTime.HasValue)
                eventTimeParam.Value = System.DBNull.Value;

            var eventTypeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EventType", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = eventType, Size = 256 };
            if (eventTypeParam.Value == null)
                eventTypeParam.Value = System.DBNull.Value;

            var eventSequenceParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EventSequence", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = eventSequence.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!eventSequence.HasValue)
                eventSequenceParam.Value = System.DBNull.Value;

            var eventOccurrenceParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EventOccurrence", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = eventOccurrence.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!eventOccurrence.HasValue)
                eventOccurrenceParam.Value = System.DBNull.Value;

            var eventCodeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EventCode", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = eventCode.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!eventCode.HasValue)
                eventCodeParam.Value = System.DBNull.Value;

            var eventDetailCodeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EventDetailCode", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = eventDetailCode.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!eventDetailCode.HasValue)
                eventDetailCodeParam.Value = System.DBNull.Value;

            var messageParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Message", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = message, Size = 1024 };
            if (messageParam.Value == null)
                messageParam.Value = System.DBNull.Value;

            var applicationPathParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationPath", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationPath, Size = 256 };
            if (applicationPathParam.Value == null)
                applicationPathParam.Value = System.DBNull.Value;

            var applicationVirtualPathParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationVirtualPath", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationVirtualPath, Size = 256 };
            if (applicationVirtualPathParam.Value == null)
                applicationVirtualPathParam.Value = System.DBNull.Value;

            var machineNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MachineName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = machineName, Size = 256 };
            if (machineNameParam.Value == null)
                machineNameParam.Value = System.DBNull.Value;

            var requestUrlParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RequestUrl", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = requestUrl, Size = 1024 };
            if (requestUrlParam.Value == null)
                requestUrlParam.Value = System.DBNull.Value;

            var exceptionTypeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ExceptionType", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = exceptionType, Size = 256 };
            if (exceptionTypeParam.Value == null)
                exceptionTypeParam.Value = System.DBNull.Value;

            var detailsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Details", SqlDbType = System.Data.SqlDbType.NText, Direction = System.Data.ParameterDirection.Input, Value = details, Size = 1073741823 };
            if (detailsParam.Value == null)
                detailsParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_WebEvent_LogEvent] @EventId, @EventTimeUtc, @EventTime, @EventType, @EventSequence, @EventOccurrence, @EventCode, @EventDetailCode, @Message, @ApplicationPath, @ApplicationVirtualPath, @MachineName, @RequestUrl, @ExceptionType, @Details", eventIdParam, eventTimeUtcParam, eventTimeParam, eventTypeParam, eventSequenceParam, eventOccurrenceParam, eventCodeParam, eventDetailCodeParam, messageParam, applicationPathParam, applicationVirtualPathParam, machineNameParam, requestUrlParam, exceptionTypeParam, detailsParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int ExecuteView(string view, bool? schema, bool? export, string sortColumn, string sortOrder, int? pageNumber, int? pageSize, string filter)
        {
            var viewParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@View", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = view, Size = 50 };
            if (viewParam.Value == null)
                viewParam.Value = System.DBNull.Value;

            var schemaParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Schema", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = schema.GetValueOrDefault() };
            if (!schema.HasValue)
                schemaParam.Value = System.DBNull.Value;

            var exportParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Export", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = export.GetValueOrDefault() };
            if (!export.HasValue)
                exportParam.Value = System.DBNull.Value;

            var sortColumnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SortColumn", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = sortColumn, Size = 50 };
            if (sortColumnParam.Value == null)
                sortColumnParam.Value = System.DBNull.Value;

            var sortOrderParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SortOrder", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = sortOrder, Size = 4 };
            if (sortOrderParam.Value == null)
                sortOrderParam.Value = System.DBNull.Value;

            var pageNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageNumber", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageNumber.HasValue)
                pageNumberParam.Value = System.DBNull.Value;

            var pageSizeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageSize", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageSize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageSize.HasValue)
                pageSizeParam.Value = System.DBNull.Value;

            var filterParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Filter", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = filter, Size = 5000 };
            if (filterParam.Value == null)
                filterParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[ExecuteView] @View, @Schema, @Export, @SortColumn, @SortOrder, @PageNumber, @PageSize, @Filter", viewParam, schemaParam, exportParam, sortColumnParam, sortOrderParam, pageNumberParam, pageSizeParam, filterParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int ProgressStatusRaw()
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[progress_Status_Raw] ", procResultParam);

            return (int) procResultParam.Value;
        }

    }
    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class FakeObservationsContext : IObservationsContext
    {
        public System.Data.Entity.DbSet<AspnetApplication> AspnetApplications { get; set; }
        public System.Data.Entity.DbSet<AspnetMembership> AspnetMemberships { get; set; }
        public System.Data.Entity.DbSet<AspnetPath> AspnetPaths { get; set; }
        public System.Data.Entity.DbSet<AspnetPersonalizationAllUser> AspnetPersonalizationAllUsers { get; set; }
        public System.Data.Entity.DbSet<AspnetPersonalizationPerUser> AspnetPersonalizationPerUsers { get; set; }
        public System.Data.Entity.DbSet<AspnetProfile> AspnetProfiles { get; set; }
        public System.Data.Entity.DbSet<AspnetRole> AspnetRoles { get; set; }
        public System.Data.Entity.DbSet<AspnetSchemaVersion> AspnetSchemaVersions { get; set; }
        public System.Data.Entity.DbSet<AspnetUser> AspnetUsers { get; set; }
        public System.Data.Entity.DbSet<AspnetWebEventEvent> AspnetWebEventEvents { get; set; }
        public System.Data.Entity.DbSet<AuditLog> AuditLogs { get; set; }
        public System.Data.Entity.DbSet<DataLog> DataLogs { get; set; }
        public System.Data.Entity.DbSet<DataSchema> DataSchemas { get; set; }
        public System.Data.Entity.DbSet<DataSource> DataSources { get; set; }
        public System.Data.Entity.DbSet<DataSourceRole> DataSourceRoles { get; set; }
        public System.Data.Entity.DbSet<DataSourceTransformation> DataSourceTransformations { get; set; }
        public System.Data.Entity.DbSet<DataSourceType> DataSourceTypes { get; set; }
        public System.Data.Entity.DbSet<ImportBatch> ImportBatches { get; set; }
        public System.Data.Entity.DbSet<Instrument> Instruments { get; set; }
        public System.Data.Entity.DbSet<InstrumentDataSource> InstrumentDataSources { get; set; }
        public System.Data.Entity.DbSet<InstrumentSensor> InstrumentSensors { get; set; }
        public System.Data.Entity.DbSet<Module> Modules { get; set; }
        public System.Data.Entity.DbSet<Observation> Observations { get; set; }
        public System.Data.Entity.DbSet<Offering> Offerings { get; set; }
        public System.Data.Entity.DbSet<Organisation> Organisations { get; set; }
        public System.Data.Entity.DbSet<OrganisationInstrument> OrganisationInstruments { get; set; }
        public System.Data.Entity.DbSet<OrganisationRole> OrganisationRoles { get; set; }
        public System.Data.Entity.DbSet<OrganisationSite> OrganisationSites { get; set; }
        public System.Data.Entity.DbSet<OrganisationStation> OrganisationStations { get; set; }
        public System.Data.Entity.DbSet<Phenomenon> Phenomena { get; set; }
        public System.Data.Entity.DbSet<PhenomenonOffering> PhenomenonOfferings { get; set; }
        public System.Data.Entity.DbSet<PhenomenonUom> PhenomenonUoms { get; set; }
        public System.Data.Entity.DbSet<Programme> Programmes { get; set; }
        public System.Data.Entity.DbSet<Project> Projects { get; set; }
        public System.Data.Entity.DbSet<ProjectSite> ProjectSites { get; set; }
        public System.Data.Entity.DbSet<ProjectStation> ProjectStations { get; set; }
        public System.Data.Entity.DbSet<RefactorLog> RefactorLogs { get; set; }
        public System.Data.Entity.DbSet<RoleModule> RoleModules { get; set; }
        public System.Data.Entity.DbSet<SchemaColumn> SchemaColumns { get; set; }
        public System.Data.Entity.DbSet<SchemaColumnType> SchemaColumnTypes { get; set; }
        public System.Data.Entity.DbSet<Sensor> Sensors { get; set; }
        public System.Data.Entity.DbSet<Site> Sites { get; set; }
        public System.Data.Entity.DbSet<Station> Stations { get; set; }
        public System.Data.Entity.DbSet<StationInstrument> StationInstruments { get; set; }
        public System.Data.Entity.DbSet<Status> Status { get; set; }
        public System.Data.Entity.DbSet<StatusReason> StatusReasons { get; set; }
        public System.Data.Entity.DbSet<TransformationType> TransformationTypes { get; set; }
        public System.Data.Entity.DbSet<UnitOfMeasure> UnitOfMeasures { get; set; }
        public System.Data.Entity.DbSet<VAuditLog> VAuditLogs { get; set; }
        public System.Data.Entity.DbSet<VDataLog> VDataLogs { get; set; }
        public System.Data.Entity.DbSet<VDataQuery> VDataQueries { get; set; }
        public System.Data.Entity.DbSet<VDataSchema> VDataSchemas { get; set; }
        public System.Data.Entity.DbSet<VDataSource> VDataSources { get; set; }
        public System.Data.Entity.DbSet<VDataSourceRole> VDataSourceRoles { get; set; }
        public System.Data.Entity.DbSet<VDataSourceTransformation> VDataSourceTransformations { get; set; }
        public System.Data.Entity.DbSet<VImportBatch> VImportBatches { get; set; }
        public System.Data.Entity.DbSet<VInstrumentDataSource> VInstrumentDataSources { get; set; }
        public System.Data.Entity.DbSet<VInstrumentOrganisation> VInstrumentOrganisations { get; set; }
        public System.Data.Entity.DbSet<VInstrumentSensor> VInstrumentSensors { get; set; }
        public System.Data.Entity.DbSet<VInventory> VInventories { get; set; }
        public System.Data.Entity.DbSet<VModuleRoleModule> VModuleRoleModules { get; set; }
        public System.Data.Entity.DbSet<VObservation> VObservations { get; set; }
        public System.Data.Entity.DbSet<VObservationRole> VObservationRoles { get; set; }
        public System.Data.Entity.DbSet<VObservationsList> VObservationsLists { get; set; }
        public System.Data.Entity.DbSet<VOrganisationInstrument> VOrganisationInstruments { get; set; }
        public System.Data.Entity.DbSet<VOrganisationSite> VOrganisationSites { get; set; }
        public System.Data.Entity.DbSet<VOrganisationStation> VOrganisationStations { get; set; }
        public System.Data.Entity.DbSet<VProject> VProjects { get; set; }
        public System.Data.Entity.DbSet<VProjectSite> VProjectSites { get; set; }
        public System.Data.Entity.DbSet<VProjectStation> VProjectStations { get; set; }
        public System.Data.Entity.DbSet<VSchemaColumn> VSchemaColumns { get; set; }
        public System.Data.Entity.DbSet<VSensor> VSensors { get; set; }
        public System.Data.Entity.DbSet<VSiteOrganisation> VSiteOrganisations { get; set; }
        public System.Data.Entity.DbSet<VStation> VStations { get; set; }
        public System.Data.Entity.DbSet<VStationInstrument> VStationInstruments { get; set; }
        public System.Data.Entity.DbSet<VStationOrganisation> VStationOrganisations { get; set; }
        public System.Data.Entity.DbSet<VUserInfo> VUserInfoes { get; set; }

        public FakeObservationsContext()
        {
            AspnetApplications = new FakeDbSet<AspnetApplication>("ApplicationId");
            AspnetMemberships = new FakeDbSet<AspnetMembership>("UserId");
            AspnetPaths = new FakeDbSet<AspnetPath>("PathId");
            AspnetPersonalizationAllUsers = new FakeDbSet<AspnetPersonalizationAllUser>("PathId");
            AspnetPersonalizationPerUsers = new FakeDbSet<AspnetPersonalizationPerUser>("Id");
            AspnetProfiles = new FakeDbSet<AspnetProfile>("UserId");
            AspnetRoles = new FakeDbSet<AspnetRole>("RoleId");
            AspnetSchemaVersions = new FakeDbSet<AspnetSchemaVersion>("Feature", "CompatibleSchemaVersion");
            AspnetUsers = new FakeDbSet<AspnetUser>("UserId");
            AspnetWebEventEvents = new FakeDbSet<AspnetWebEventEvent>("EventId");
            AuditLogs = new FakeDbSet<AuditLog>("Id");
            DataLogs = new FakeDbSet<DataLog>("Id");
            DataSchemas = new FakeDbSet<DataSchema>("Id");
            DataSources = new FakeDbSet<DataSource>("Id");
            DataSourceRoles = new FakeDbSet<DataSourceRole>("Id");
            DataSourceTransformations = new FakeDbSet<DataSourceTransformation>("Id");
            DataSourceTypes = new FakeDbSet<DataSourceType>("Id");
            ImportBatches = new FakeDbSet<ImportBatch>("Id");
            Instruments = new FakeDbSet<Instrument>("Id");
            InstrumentDataSources = new FakeDbSet<InstrumentDataSource>("Id");
            InstrumentSensors = new FakeDbSet<InstrumentSensor>("Id");
            Modules = new FakeDbSet<Module>("Id");
            Observations = new FakeDbSet<Observation>("Id");
            Offerings = new FakeDbSet<Offering>("Id");
            Organisations = new FakeDbSet<Organisation>("Id");
            OrganisationInstruments = new FakeDbSet<OrganisationInstrument>("Id");
            OrganisationRoles = new FakeDbSet<OrganisationRole>("Id");
            OrganisationSites = new FakeDbSet<OrganisationSite>("Id");
            OrganisationStations = new FakeDbSet<OrganisationStation>("Id");
            Phenomena = new FakeDbSet<Phenomenon>("Id");
            PhenomenonOfferings = new FakeDbSet<PhenomenonOffering>("Id");
            PhenomenonUoms = new FakeDbSet<PhenomenonUom>("Id");
            Programmes = new FakeDbSet<Programme>("Id");
            Projects = new FakeDbSet<Project>("Id");
            ProjectSites = new FakeDbSet<ProjectSite>("Id");
            ProjectStations = new FakeDbSet<ProjectStation>("Id");
            RefactorLogs = new FakeDbSet<RefactorLog>("OperationKey");
            RoleModules = new FakeDbSet<RoleModule>("Id");
            SchemaColumns = new FakeDbSet<SchemaColumn>("Id");
            SchemaColumnTypes = new FakeDbSet<SchemaColumnType>("Id");
            Sensors = new FakeDbSet<Sensor>("Id");
            Sites = new FakeDbSet<Site>("Id");
            Stations = new FakeDbSet<Station>("Id");
            StationInstruments = new FakeDbSet<StationInstrument>("Id");
            Status = new FakeDbSet<Status>("Id");
            StatusReasons = new FakeDbSet<StatusReason>("Id");
            TransformationTypes = new FakeDbSet<TransformationType>("Id");
            UnitOfMeasures = new FakeDbSet<UnitOfMeasure>("Id");
            VAuditLogs = new FakeDbSet<VAuditLog>("Id", "Description", "UserId", "UserName");
            VDataLogs = new FakeDbSet<VDataLog>("Id", "ImportDate", "SiteName", "StationName", "InstrumentName", "SensorName", "SensorInvalid", "DateValueInvalid", "TimeValueInvalid", "ValueText", "RawValueInvalid", "DataValueInvalid", "OfferingInvalid", "UomInvalid", "StatusId", "Status", "ImportBatchId", "RawFieldValue");
            VDataQueries = new FakeDbSet<VDataQuery>("SiteId", "SiteName", "StationId", "StationName", "InstrumentId", "InstrumentName", "SensorId", "Sensor", "PhenomenonId", "Phenomenon", "OfferingId", "Offering");
            VDataSchemas = new FakeDbSet<VDataSchema>("Id", "Code", "Name", "UserId", "DataSourceTypeId", "IgnoreFirst", "IgnoreLast", "DataSourceTypeCode", "DataSourceTypeDesc");
            VDataSources = new FakeDbSet<VDataSource>("Id", "Code", "Name", "Url", "UpdateFreq", "LastUpdate", "UserId");
            VDataSourceRoles = new FakeDbSet<VDataSourceRole>("Id", "DataSourceId", "RoleId", "DataSourceCode", "DataSourceName", "ActualRoleName");
            VDataSourceTransformations = new FakeDbSet<VDataSourceTransformation>("Id", "TransformationTypeId", "PhenomenonId", "StartDate", "DataSourceId", "Definition", "PhenomenonName", "TransformationName");
            VImportBatches = new FakeDbSet<VImportBatch>("Id", "Code", "DataSourceId", "ImportDate", "Status", "DataSourceName", "UserId", "UserName");
            VInstrumentDataSources = new FakeDbSet<VInstrumentDataSource>("Id", "InstrumentId", "DataSourceId", "UserId", "InstrumentCode", "InstrumentName", "DataSourceCode", "DataSourceName");
            VInstrumentOrganisations = new FakeDbSet<VInstrumentOrganisation>("Id", "OrganisationId", "OrganisationCode", "OrganisationName", "InstrumentId", "InstrumentCode", "InstrumentName", "OrganisationRoleId", "OrganisationRoleCode", "OrganisationRoleName", "Level", "LevelCode", "LevelName", "Weight");
            VInstrumentSensors = new FakeDbSet<VInstrumentSensor>("Id", "InstrumentId", "SensorId", "UserId", "InstrumentCode", "InstrumentName", "SensorCode", "SensorName");
            VInventories = new FakeDbSet<VInventory>("Site", "Station", "Instrument", "Sensor", "Phenomenon");
            VModuleRoleModules = new FakeDbSet<VModuleRoleModule>("Id", "RoleId", "ModuleId", "Name", "Description", "Url", "Icon");
            VObservations = new FakeDbSet<VObservation>("Id", "SensorId", "PhenomenonOfferingId", "PhenomenonUomid", "ImportBatchId", "ValueDate", "UserId", "UserName", "OfferingId", "OfferingName", "UnitOfMeasureId", "UnitOfMeasureUnit", "UnitOfMeasureSymbol", "SensorName", "PhenomenonId", "PhenomenonName", "DataSourceId", "DataSourceName", "InstrumentId", "InstrumentName", "StationId", "StationName", "SiteId", "SiteName", "OrganisationId", "OrganisationName");
            VObservationRoles = new FakeDbSet<VObservationRole>("Id", "SensorId", "PhenomenonOfferingId", "PhenomenonUomid", "ImportBatchId", "ValueDate", "UserId", "UserName", "OfferingId", "OfferingName", "UnitOfMeasureId", "UnitOfMeasureUnit", "UnitOfMeasureSymbol", "SensorName", "PhenomenonId", "PhenomenonName", "DataSourceId", "DataSourceName", "InstrumentId", "InstrumentName", "StationId", "StationName", "SiteId", "SiteName", "OrganisationId", "OrganisationName", "RoleUserId");
            VObservationsLists = new FakeDbSet<VObservationsList>("Id", "SensorId", "ValueDate", "PhenomenonOfferingId", "PhenomenonUomid", "ImportBatchId", "UserId", "AddedDate", "SensorCode", "SensorName", "PhenomenonCode", "PhenomenonName", "OfferingCode", "OfferingName", "UnitOfMeasureCode", "UnitOfMeasureUnit");
            VOrganisationInstruments = new FakeDbSet<VOrganisationInstrument>("Id", "OrganisationId", "InstrumentId", "OrganisationRoleId", "UserId", "OrganisationCode", "OrganisationName", "InstrumentCode", "InstrumentName", "OrganisationRoleCode", "OrganisationRoleName");
            VOrganisationSites = new FakeDbSet<VOrganisationSite>("Id", "OrganisationId", "SiteId", "OrganisationRoleId", "UserId", "OrganisationCode", "OrganisationName", "SiteCode", "SiteName", "OrganisationRoleCode", "OrganisationRoleName");
            VOrganisationStations = new FakeDbSet<VOrganisationStation>("Id", "OrganisationId", "StationId", "OrganisationRoleId", "UserId", "OrganisationCode", "OrganisationName", "StationCode", "StationName", "OrganisationRoleCode", "OrganisationRoleName");
            VProjects = new FakeDbSet<VProject>("Id", "Code", "Name", "UserId");
            VProjectSites = new FakeDbSet<VProjectSite>("Id", "Code", "Name", "Description", "OrganisationId", "UserId", "OrganisationName");
            VProjectStations = new FakeDbSet<VProjectStation>("Id", "ProjectId", "StationId", "UserId", "ProjectCode", "ProjectName", "StationCode", "StationName");
            VSchemaColumns = new FakeDbSet<VSchemaColumn>("Id", "DataSchemaId", "Number", "Name", "SchemaColumnTypeId", "UserId", "SchemaColumnTypeName");
            VSensors = new FakeDbSet<VSensor>("Id", "Code", "Name", "DataSourceId", "PhenomenonId", "PhenomenonName", "UserId", "Site", "Station", "Instrument", "DataSourceName");
            VSiteOrganisations = new FakeDbSet<VSiteOrganisation>("Id", "OrganisationId", "OrganisationCode", "OrganisationName", "SiteCode", "SiteName", "OrganisationRoleId", "OrganisationRoleCode", "OrganisationRoleName", "Level", "LevelCode", "LevelName", "Weight");
            VStations = new FakeDbSet<VStation>("Id", "Code", "Name", "UserId");
            VStationInstruments = new FakeDbSet<VStationInstrument>("Id", "StationId", "InstrumentId", "UserId", "StationCode", "StationName", "InstrumentCode", "InstrumentName");
            VStationOrganisations = new FakeDbSet<VStationOrganisation>("Id", "OrganisationId", "OrganisationCode", "OrganisationName", "StationId", "StationCode", "StationName", "OrganisationRoleId", "OrganisationRoleCode", "OrganisationRoleName", "Level", "LevelCode", "LevelName", "Weight");
            VUserInfoes = new FakeDbSet<VUserInfo>("UserId", "LastActivityDate", "UserName", "CreateDate");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        public System.Data.Entity.Database Database { get; }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }


        // Stored Procedures
        public AspnetAnyDataInTablesReturnModel AspnetAnyDataInTables(int? tablesToCheck)
        {
            int procResult;
            return AspnetAnyDataInTables(tablesToCheck, out procResult);
        }

        public AspnetAnyDataInTablesReturnModel AspnetAnyDataInTables(int? tablesToCheck, out int procResult)
        {

            procResult = 0;
            return new AspnetAnyDataInTablesReturnModel();
        }

        public System.Threading.Tasks.Task<AspnetAnyDataInTablesReturnModel> AspnetAnyDataInTablesAsync(int? tablesToCheck)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(AspnetAnyDataInTables(tablesToCheck, out procResult));
        }

        public int AspnetApplicationsCreateApplication(string applicationName, out System.Guid? applicationId)
        {
            applicationId = default(System.Guid);

            return 0;
        }

        public int AspnetCheckSchemaVersion(string feature, string compatibleSchemaVersion)
        {

            return 0;
        }

        public int AspnetMembershipChangePasswordQuestionAndAnswer(string applicationName, string userName, string newPasswordQuestion, string newPasswordAnswer)
        {

            return 0;
        }

        public int AspnetMembershipCreateUser(string applicationName, string userName, string password, string passwordSalt, string email, string passwordQuestion, string passwordAnswer, bool? isApproved, System.DateTime? currentTimeUtc, System.DateTime? createDate, int? uniqueEmail, int? passwordFormat, out System.Guid? userId)
        {
            userId = default(System.Guid);

            return 0;
        }

        public int AspnetMembershipFindUsersByEmail(string applicationName, string emailToMatch, int? pageIndex, int? pageSize)
        {

            return 0;
        }

        public int AspnetMembershipFindUsersByName(string applicationName, string userNameToMatch, int? pageIndex, int? pageSize)
        {

            return 0;
        }

        public int AspnetMembershipGetAllUsers(string applicationName, int? pageIndex, int? pageSize)
        {

            return 0;
        }

        public int AspnetMembershipGetNumberOfUsersOnline(string applicationName, int? minutesSinceLastInActive, System.DateTime? currentTimeUtc)
        {

            return 0;
        }

        public System.Collections.Generic.List<AspnetMembershipGetPasswordReturnModel> AspnetMembershipGetPassword(string applicationName, string userName, int? maxInvalidPasswordAttempts, int? passwordAttemptWindow, System.DateTime? currentTimeUtc, string passwordAnswer)
        {
            int procResult;
            return AspnetMembershipGetPassword(applicationName, userName, maxInvalidPasswordAttempts, passwordAttemptWindow, currentTimeUtc, passwordAnswer, out procResult);
        }

        public System.Collections.Generic.List<AspnetMembershipGetPasswordReturnModel> AspnetMembershipGetPassword(string applicationName, string userName, int? maxInvalidPasswordAttempts, int? passwordAttemptWindow, System.DateTime? currentTimeUtc, string passwordAnswer, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<AspnetMembershipGetPasswordReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetMembershipGetPasswordReturnModel>> AspnetMembershipGetPasswordAsync(string applicationName, string userName, int? maxInvalidPasswordAttempts, int? passwordAttemptWindow, System.DateTime? currentTimeUtc, string passwordAnswer)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(AspnetMembershipGetPassword(applicationName, userName, maxInvalidPasswordAttempts, passwordAttemptWindow, currentTimeUtc, passwordAnswer, out procResult));
        }

        public System.Collections.Generic.List<AspnetMembershipGetPasswordWithFormatReturnModel> AspnetMembershipGetPasswordWithFormat(string applicationName, string userName, bool? updateLastLoginActivityDate, System.DateTime? currentTimeUtc)
        {
            int procResult;
            return AspnetMembershipGetPasswordWithFormat(applicationName, userName, updateLastLoginActivityDate, currentTimeUtc, out procResult);
        }

        public System.Collections.Generic.List<AspnetMembershipGetPasswordWithFormatReturnModel> AspnetMembershipGetPasswordWithFormat(string applicationName, string userName, bool? updateLastLoginActivityDate, System.DateTime? currentTimeUtc, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<AspnetMembershipGetPasswordWithFormatReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetMembershipGetPasswordWithFormatReturnModel>> AspnetMembershipGetPasswordWithFormatAsync(string applicationName, string userName, bool? updateLastLoginActivityDate, System.DateTime? currentTimeUtc)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(AspnetMembershipGetPasswordWithFormat(applicationName, userName, updateLastLoginActivityDate, currentTimeUtc, out procResult));
        }

        public AspnetMembershipGetUserByEmailReturnModel AspnetMembershipGetUserByEmail(string applicationName, string email)
        {
            int procResult;
            return AspnetMembershipGetUserByEmail(applicationName, email, out procResult);
        }

        public AspnetMembershipGetUserByEmailReturnModel AspnetMembershipGetUserByEmail(string applicationName, string email, out int procResult)
        {

            procResult = 0;
            return new AspnetMembershipGetUserByEmailReturnModel();
        }

        public System.Threading.Tasks.Task<AspnetMembershipGetUserByEmailReturnModel> AspnetMembershipGetUserByEmailAsync(string applicationName, string email)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(AspnetMembershipGetUserByEmail(applicationName, email, out procResult));
        }

        public AspnetMembershipGetUserByNameReturnModel AspnetMembershipGetUserByName(string applicationName, string userName, System.DateTime? currentTimeUtc, bool? updateLastActivity)
        {
            int procResult;
            return AspnetMembershipGetUserByName(applicationName, userName, currentTimeUtc, updateLastActivity, out procResult);
        }

        public AspnetMembershipGetUserByNameReturnModel AspnetMembershipGetUserByName(string applicationName, string userName, System.DateTime? currentTimeUtc, bool? updateLastActivity, out int procResult)
        {

            procResult = 0;
            return new AspnetMembershipGetUserByNameReturnModel();
        }

        public System.Threading.Tasks.Task<AspnetMembershipGetUserByNameReturnModel> AspnetMembershipGetUserByNameAsync(string applicationName, string userName, System.DateTime? currentTimeUtc, bool? updateLastActivity)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(AspnetMembershipGetUserByName(applicationName, userName, currentTimeUtc, updateLastActivity, out procResult));
        }

        public System.Collections.Generic.List<AspnetMembershipGetUserByUserIdReturnModel> AspnetMembershipGetUserByUserId(System.Guid? userId, System.DateTime? currentTimeUtc, bool? updateLastActivity)
        {
            int procResult;
            return AspnetMembershipGetUserByUserId(userId, currentTimeUtc, updateLastActivity, out procResult);
        }

        public System.Collections.Generic.List<AspnetMembershipGetUserByUserIdReturnModel> AspnetMembershipGetUserByUserId(System.Guid? userId, System.DateTime? currentTimeUtc, bool? updateLastActivity, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<AspnetMembershipGetUserByUserIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetMembershipGetUserByUserIdReturnModel>> AspnetMembershipGetUserByUserIdAsync(System.Guid? userId, System.DateTime? currentTimeUtc, bool? updateLastActivity)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(AspnetMembershipGetUserByUserId(userId, currentTimeUtc, updateLastActivity, out procResult));
        }

        public int AspnetMembershipResetPassword(string applicationName, string userName, string newPassword, int? maxInvalidPasswordAttempts, int? passwordAttemptWindow, string passwordSalt, System.DateTime? currentTimeUtc, int? passwordFormat, string passwordAnswer)
        {

            return 0;
        }

        public int AspnetMembershipSetPassword(string applicationName, string userName, string newPassword, string passwordSalt, System.DateTime? currentTimeUtc, int? passwordFormat)
        {

            return 0;
        }

        public int AspnetMembershipUnlockUser(string applicationName, string userName)
        {

            return 0;
        }

        public int AspnetMembershipUpdateUser(string applicationName, string userName, string email, string comment, bool? isApproved, System.DateTime? lastLoginDate, System.DateTime? lastActivityDate, int? uniqueEmail, System.DateTime? currentTimeUtc)
        {

            return 0;
        }

        public int AspnetMembershipUpdateUserInfo(string applicationName, string userName, bool? isPasswordCorrect, bool? updateLastLoginActivityDate, int? maxInvalidPasswordAttempts, int? passwordAttemptWindow, System.DateTime? currentTimeUtc, System.DateTime? lastLoginDate, System.DateTime? lastActivityDate)
        {

            return 0;
        }

        public int AspnetPathsCreatePath(System.Guid? applicationId, string path, out System.Guid? pathId)
        {
            pathId = default(System.Guid);

            return 0;
        }

        public int AspnetPersonalizationGetApplicationId(string applicationName, out System.Guid? applicationId)
        {
            applicationId = default(System.Guid);

            return 0;
        }

        public int AspnetPersonalizationAdministrationDeleteAllState(bool? allUsersScope, string applicationName, out int? count)
        {
            count = default(int);

            return 0;
        }

        public int AspnetPersonalizationAdministrationFindState(bool? allUsersScope, string applicationName, int? pageIndex, int? pageSize, string path, string userName, System.DateTime? inactiveSinceDate)
        {

            return 0;
        }

        public int AspnetPersonalizationAdministrationGetCountOfState(out int? count, bool? allUsersScope, string applicationName, string path, string userName, System.DateTime? inactiveSinceDate)
        {
            count = default(int);

            return 0;
        }

        public int AspnetPersonalizationAdministrationResetSharedState(out int? count, string applicationName, string path)
        {
            count = default(int);

            return 0;
        }

        public int AspnetPersonalizationAdministrationResetUserState(out int? count, string applicationName, System.DateTime? inactiveSinceDate, string userName, string path)
        {
            count = default(int);

            return 0;
        }

        public System.Collections.Generic.List<AspnetPersonalizationAllUsersGetPageSettingsReturnModel> AspnetPersonalizationAllUsersGetPageSettings(string applicationName, string path)
        {
            int procResult;
            return AspnetPersonalizationAllUsersGetPageSettings(applicationName, path, out procResult);
        }

        public System.Collections.Generic.List<AspnetPersonalizationAllUsersGetPageSettingsReturnModel> AspnetPersonalizationAllUsersGetPageSettings(string applicationName, string path, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<AspnetPersonalizationAllUsersGetPageSettingsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetPersonalizationAllUsersGetPageSettingsReturnModel>> AspnetPersonalizationAllUsersGetPageSettingsAsync(string applicationName, string path)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(AspnetPersonalizationAllUsersGetPageSettings(applicationName, path, out procResult));
        }

        public int AspnetPersonalizationAllUsersResetPageSettings(string applicationName, string path)
        {

            return 0;
        }

        public int AspnetPersonalizationAllUsersSetPageSettings(string applicationName, string path, byte[] pageSettings, System.DateTime? currentTimeUtc)
        {

            return 0;
        }

        public System.Collections.Generic.List<AspnetPersonalizationPerUserGetPageSettingsReturnModel> AspnetPersonalizationPerUserGetPageSettings(string applicationName, string userName, string path, System.DateTime? currentTimeUtc)
        {
            int procResult;
            return AspnetPersonalizationPerUserGetPageSettings(applicationName, userName, path, currentTimeUtc, out procResult);
        }

        public System.Collections.Generic.List<AspnetPersonalizationPerUserGetPageSettingsReturnModel> AspnetPersonalizationPerUserGetPageSettings(string applicationName, string userName, string path, System.DateTime? currentTimeUtc, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<AspnetPersonalizationPerUserGetPageSettingsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetPersonalizationPerUserGetPageSettingsReturnModel>> AspnetPersonalizationPerUserGetPageSettingsAsync(string applicationName, string userName, string path, System.DateTime? currentTimeUtc)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(AspnetPersonalizationPerUserGetPageSettings(applicationName, userName, path, currentTimeUtc, out procResult));
        }

        public int AspnetPersonalizationPerUserResetPageSettings(string applicationName, string userName, string path, System.DateTime? currentTimeUtc)
        {

            return 0;
        }

        public int AspnetPersonalizationPerUserSetPageSettings(string applicationName, string userName, string path, byte[] pageSettings, System.DateTime? currentTimeUtc)
        {

            return 0;
        }

        public AspnetProfileDeleteInactiveProfilesReturnModel AspnetProfileDeleteInactiveProfiles(string applicationName, int? profileAuthOptions, System.DateTime? inactiveSinceDate)
        {
            int procResult;
            return AspnetProfileDeleteInactiveProfiles(applicationName, profileAuthOptions, inactiveSinceDate, out procResult);
        }

        public AspnetProfileDeleteInactiveProfilesReturnModel AspnetProfileDeleteInactiveProfiles(string applicationName, int? profileAuthOptions, System.DateTime? inactiveSinceDate, out int procResult)
        {

            procResult = 0;
            return new AspnetProfileDeleteInactiveProfilesReturnModel();
        }

        public System.Threading.Tasks.Task<AspnetProfileDeleteInactiveProfilesReturnModel> AspnetProfileDeleteInactiveProfilesAsync(string applicationName, int? profileAuthOptions, System.DateTime? inactiveSinceDate)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(AspnetProfileDeleteInactiveProfiles(applicationName, profileAuthOptions, inactiveSinceDate, out procResult));
        }

        public System.Collections.Generic.List<AspnetProfileDeleteProfilesReturnModel> AspnetProfileDeleteProfiles(string applicationName, string userNames)
        {
            int procResult;
            return AspnetProfileDeleteProfiles(applicationName, userNames, out procResult);
        }

        public System.Collections.Generic.List<AspnetProfileDeleteProfilesReturnModel> AspnetProfileDeleteProfiles(string applicationName, string userNames, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<AspnetProfileDeleteProfilesReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetProfileDeleteProfilesReturnModel>> AspnetProfileDeleteProfilesAsync(string applicationName, string userNames)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(AspnetProfileDeleteProfiles(applicationName, userNames, out procResult));
        }

        public AspnetProfileGetNumberOfInactiveProfilesReturnModel AspnetProfileGetNumberOfInactiveProfiles(string applicationName, int? profileAuthOptions, System.DateTime? inactiveSinceDate)
        {
            int procResult;
            return AspnetProfileGetNumberOfInactiveProfiles(applicationName, profileAuthOptions, inactiveSinceDate, out procResult);
        }

        public AspnetProfileGetNumberOfInactiveProfilesReturnModel AspnetProfileGetNumberOfInactiveProfiles(string applicationName, int? profileAuthOptions, System.DateTime? inactiveSinceDate, out int procResult)
        {

            procResult = 0;
            return new AspnetProfileGetNumberOfInactiveProfilesReturnModel();
        }

        public System.Threading.Tasks.Task<AspnetProfileGetNumberOfInactiveProfilesReturnModel> AspnetProfileGetNumberOfInactiveProfilesAsync(string applicationName, int? profileAuthOptions, System.DateTime? inactiveSinceDate)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(AspnetProfileGetNumberOfInactiveProfiles(applicationName, profileAuthOptions, inactiveSinceDate, out procResult));
        }

        public int AspnetProfileGetProfiles(string applicationName, int? profileAuthOptions, int? pageIndex, int? pageSize, string userNameToMatch, System.DateTime? inactiveSinceDate)
        {

            return 0;
        }

        public System.Collections.Generic.List<AspnetProfileGetPropertiesReturnModel> AspnetProfileGetProperties(string applicationName, string userName, System.DateTime? currentTimeUtc)
        {
            int procResult;
            return AspnetProfileGetProperties(applicationName, userName, currentTimeUtc, out procResult);
        }

        public System.Collections.Generic.List<AspnetProfileGetPropertiesReturnModel> AspnetProfileGetProperties(string applicationName, string userName, System.DateTime? currentTimeUtc, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<AspnetProfileGetPropertiesReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetProfileGetPropertiesReturnModel>> AspnetProfileGetPropertiesAsync(string applicationName, string userName, System.DateTime? currentTimeUtc)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(AspnetProfileGetProperties(applicationName, userName, currentTimeUtc, out procResult));
        }

        public int AspnetProfileSetProperties(string applicationName, string propertyNames, string propertyValuesString, byte[] propertyValuesBinary, string userName, bool? isUserAnonymous, System.DateTime? currentTimeUtc)
        {

            return 0;
        }

        public int AspnetRegisterSchemaVersion(string feature, string compatibleSchemaVersion, bool? isCurrentVersion, bool? removeIncompatibleSchema)
        {

            return 0;
        }

        public int AspnetRolesCreateRole(string applicationName, string roleName)
        {

            return 0;
        }

        public int AspnetRolesDeleteRole(string applicationName, string roleName, bool? deleteOnlyIfRoleIsEmpty)
        {

            return 0;
        }

        public System.Collections.Generic.List<AspnetRolesGetAllRolesReturnModel> AspnetRolesGetAllRoles(string applicationName)
        {
            int procResult;
            return AspnetRolesGetAllRoles(applicationName, out procResult);
        }

        public System.Collections.Generic.List<AspnetRolesGetAllRolesReturnModel> AspnetRolesGetAllRoles(string applicationName, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<AspnetRolesGetAllRolesReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetRolesGetAllRolesReturnModel>> AspnetRolesGetAllRolesAsync(string applicationName)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(AspnetRolesGetAllRoles(applicationName, out procResult));
        }

        public int AspnetRolesRoleExists(string applicationName, string roleName)
        {

            return 0;
        }

        public int AspnetSetupRemoveAllRoleMembers(string name)
        {

            return 0;
        }

        public int AspnetSetupRestorePermissions(string name)
        {

            return 0;
        }

        public int AspnetUnRegisterSchemaVersion(string feature, string compatibleSchemaVersion)
        {

            return 0;
        }

        public int AspnetUsersCreateUser(System.Guid? applicationId, string userName, bool? isUserAnonymous, System.DateTime? lastActivityDate, out System.Guid? userId)
        {
            userId = default(System.Guid);

            return 0;
        }

        public int AspnetUsersDeleteUser(string applicationName, string userName, int? tablesToDeleteFrom, out int? numTablesDeletedFrom)
        {
            numTablesDeletedFrom = default(int);

            return 0;
        }

        public AspnetUsersInRolesAddUsersToRolesReturnModel AspnetUsersInRolesAddUsersToRoles(string applicationName, string userNames, string roleNames, System.DateTime? currentTimeUtc)
        {
            int procResult;
            return AspnetUsersInRolesAddUsersToRoles(applicationName, userNames, roleNames, currentTimeUtc, out procResult);
        }

        public AspnetUsersInRolesAddUsersToRolesReturnModel AspnetUsersInRolesAddUsersToRoles(string applicationName, string userNames, string roleNames, System.DateTime? currentTimeUtc, out int procResult)
        {

            procResult = 0;
            return new AspnetUsersInRolesAddUsersToRolesReturnModel();
        }

        public System.Threading.Tasks.Task<AspnetUsersInRolesAddUsersToRolesReturnModel> AspnetUsersInRolesAddUsersToRolesAsync(string applicationName, string userNames, string roleNames, System.DateTime? currentTimeUtc)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(AspnetUsersInRolesAddUsersToRoles(applicationName, userNames, roleNames, currentTimeUtc, out procResult));
        }

        public System.Collections.Generic.List<AspnetUsersInRolesFindUsersInRoleReturnModel> AspnetUsersInRolesFindUsersInRole(string applicationName, string roleName, string userNameToMatch)
        {
            int procResult;
            return AspnetUsersInRolesFindUsersInRole(applicationName, roleName, userNameToMatch, out procResult);
        }

        public System.Collections.Generic.List<AspnetUsersInRolesFindUsersInRoleReturnModel> AspnetUsersInRolesFindUsersInRole(string applicationName, string roleName, string userNameToMatch, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<AspnetUsersInRolesFindUsersInRoleReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetUsersInRolesFindUsersInRoleReturnModel>> AspnetUsersInRolesFindUsersInRoleAsync(string applicationName, string roleName, string userNameToMatch)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(AspnetUsersInRolesFindUsersInRole(applicationName, roleName, userNameToMatch, out procResult));
        }

        public System.Collections.Generic.List<AspnetUsersInRolesGetRolesForUserReturnModel> AspnetUsersInRolesGetRolesForUser(string applicationName, string userName)
        {
            int procResult;
            return AspnetUsersInRolesGetRolesForUser(applicationName, userName, out procResult);
        }

        public System.Collections.Generic.List<AspnetUsersInRolesGetRolesForUserReturnModel> AspnetUsersInRolesGetRolesForUser(string applicationName, string userName, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<AspnetUsersInRolesGetRolesForUserReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetUsersInRolesGetRolesForUserReturnModel>> AspnetUsersInRolesGetRolesForUserAsync(string applicationName, string userName)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(AspnetUsersInRolesGetRolesForUser(applicationName, userName, out procResult));
        }

        public System.Collections.Generic.List<AspnetUsersInRolesGetUsersInRolesReturnModel> AspnetUsersInRolesGetUsersInRoles(string applicationName, string roleName)
        {
            int procResult;
            return AspnetUsersInRolesGetUsersInRoles(applicationName, roleName, out procResult);
        }

        public System.Collections.Generic.List<AspnetUsersInRolesGetUsersInRolesReturnModel> AspnetUsersInRolesGetUsersInRoles(string applicationName, string roleName, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<AspnetUsersInRolesGetUsersInRolesReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<AspnetUsersInRolesGetUsersInRolesReturnModel>> AspnetUsersInRolesGetUsersInRolesAsync(string applicationName, string roleName)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(AspnetUsersInRolesGetUsersInRoles(applicationName, roleName, out procResult));
        }

        public int AspnetUsersInRolesIsUserInRole(string applicationName, string userName, string roleName)
        {

            return 0;
        }

        public AspnetUsersInRolesRemoveUsersFromRolesReturnModel AspnetUsersInRolesRemoveUsersFromRoles(string applicationName, string userNames, string roleNames)
        {
            int procResult;
            return AspnetUsersInRolesRemoveUsersFromRoles(applicationName, userNames, roleNames, out procResult);
        }

        public AspnetUsersInRolesRemoveUsersFromRolesReturnModel AspnetUsersInRolesRemoveUsersFromRoles(string applicationName, string userNames, string roleNames, out int procResult)
        {

            procResult = 0;
            return new AspnetUsersInRolesRemoveUsersFromRolesReturnModel();
        }

        public System.Threading.Tasks.Task<AspnetUsersInRolesRemoveUsersFromRolesReturnModel> AspnetUsersInRolesRemoveUsersFromRolesAsync(string applicationName, string userNames, string roleNames)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(AspnetUsersInRolesRemoveUsersFromRoles(applicationName, userNames, roleNames, out procResult));
        }

        public int AspnetWebEventLogEvent(string eventId, System.DateTime? eventTimeUtc, System.DateTime? eventTime, string eventType, decimal? eventSequence, decimal? eventOccurrence, int? eventCode, int? eventDetailCode, string message, string applicationPath, string applicationVirtualPath, string machineName, string requestUrl, string exceptionType, string details)
        {

            return 0;
        }

        public int ExecuteView(string view, bool? schema, bool? export, string sortColumn, string sortOrder, int? pageNumber, int? pageSize, string filter)
        {

            return 0;
        }

        public int ProgressStatusRaw()
        {

            return 0;
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // aspnet_Applications
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetApplication
    {
        public string ApplicationName { get; set; } // ApplicationName (length: 256)
        public string LoweredApplicationName { get; set; } // LoweredApplicationName (length: 256)
        public System.Guid ApplicationId { get; set; } // ApplicationId (Primary key)
        public string Description { get; set; } // Description (length: 256)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<AspnetMembership> AspnetMemberships { get; set; } // aspnet_Membership.FK__aspnet_Me__Appli__25C68D63
        public virtual System.Collections.Generic.ICollection<AspnetPath> AspnetPaths { get; set; } // aspnet_Paths.FK__aspnet_Pa__Appli__26BAB19C
        public virtual System.Collections.Generic.ICollection<AspnetRole> AspnetRoles { get; set; } // aspnet_Roles.FK__aspnet_Ro__Appli__27AED5D5
        public virtual System.Collections.Generic.ICollection<AspnetUser> AspnetUsers { get; set; } // aspnet_Users.FK__aspnet_Us__Appli__28A2FA0E

        public AspnetApplication()
        {
            ApplicationId = System.Guid.NewGuid();
            AspnetMemberships = new System.Collections.Generic.List<AspnetMembership>();
            AspnetPaths = new System.Collections.Generic.List<AspnetPath>();
            AspnetRoles = new System.Collections.Generic.List<AspnetRole>();
            AspnetUsers = new System.Collections.Generic.List<AspnetUser>();
        }
    }

    // aspnet_Membership
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetMembership
    {
        public System.Guid ApplicationId { get; set; } // ApplicationId
        public System.Guid UserId { get; set; } // UserId (Primary key)
        public string Password { get; set; } // Password (length: 128)
        public int PasswordFormat { get; set; } // PasswordFormat
        public string PasswordSalt { get; set; } // PasswordSalt (length: 128)
        public string MobilePin { get; set; } // MobilePIN (length: 16)
        public string Email { get; set; } // Email (length: 256)
        public string LoweredEmail { get; set; } // LoweredEmail (length: 256)
        public string PasswordQuestion { get; set; } // PasswordQuestion (length: 256)
        public string PasswordAnswer { get; set; } // PasswordAnswer (length: 128)
        public bool IsApproved { get; set; } // IsApproved
        public bool IsLockedOut { get; set; } // IsLockedOut
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastLoginDate { get; set; } // LastLoginDate
        public System.DateTime LastPasswordChangedDate { get; set; } // LastPasswordChangedDate
        public System.DateTime LastLockoutDate { get; set; } // LastLockoutDate
        public int FailedPasswordAttemptCount { get; set; } // FailedPasswordAttemptCount
        public System.DateTime FailedPasswordAttemptWindowStart { get; set; } // FailedPasswordAttemptWindowStart
        public int FailedPasswordAnswerAttemptCount { get; set; } // FailedPasswordAnswerAttemptCount
        public System.DateTime FailedPasswordAnswerAttemptWindowStart { get; set; } // FailedPasswordAnswerAttemptWindowStart
        public string Comment { get; set; } // Comment (length: 1073741823)

        // Foreign keys
        public virtual AspnetApplication AspnetApplication { get; set; } // FK__aspnet_Me__Appli__25C68D63
        public virtual AspnetUser AspnetUser { get; set; } // FK__aspnet_Me__UserI__33208881

        public AspnetMembership()
        {
            PasswordFormat = 0;
        }
    }

    // aspnet_Paths
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetPath
    {
        public System.Guid ApplicationId { get; set; } // ApplicationId
        public System.Guid PathId { get; set; } // PathId (Primary key)
        public string Path { get; set; } // Path (length: 256)
        public string LoweredPath { get; set; } // LoweredPath (length: 256)

        // Reverse navigation
        public virtual AspnetPersonalizationAllUser AspnetPersonalizationAllUser { get; set; } // aspnet_PersonalizationAllUsers.FK__aspnet_Pe__PathI__29971E47
        public virtual System.Collections.Generic.ICollection<AspnetPersonalizationPerUser> AspnetPersonalizationPerUsers { get; set; } // aspnet_PersonalizationPerUser.FK__aspnet_Pe__PathI__2A8B4280

        // Foreign keys
        public virtual AspnetApplication AspnetApplication { get; set; } // FK__aspnet_Pa__Appli__26BAB19C

        public AspnetPath()
        {
            PathId = System.Guid.NewGuid();
            AspnetPersonalizationPerUsers = new System.Collections.Generic.List<AspnetPersonalizationPerUser>();
        }
    }

    // aspnet_PersonalizationAllUsers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetPersonalizationAllUser
    {
        public System.Guid PathId { get; set; } // PathId (Primary key)
        public byte[] PageSettings { get; set; } // PageSettings (length: 2147483647)
        public System.DateTime LastUpdatedDate { get; set; } // LastUpdatedDate

        // Foreign keys
        public virtual AspnetPath AspnetPath { get; set; } // FK__aspnet_Pe__PathI__29971E47
    }

    // aspnet_PersonalizationPerUser
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetPersonalizationPerUser
    {
        public System.Guid Id { get; set; } // Id (Primary key)
        public System.Guid? PathId { get; set; } // PathId
        public System.Guid? UserId { get; set; } // UserId
        public byte[] PageSettings { get; set; } // PageSettings (length: 2147483647)
        public System.DateTime LastUpdatedDate { get; set; } // LastUpdatedDate

        // Foreign keys
        public virtual AspnetPath AspnetPath { get; set; } // FK__aspnet_Pe__PathI__2A8B4280
        public virtual AspnetUser AspnetUser { get; set; } // FK__aspnet_Pe__UserI__3508D0F3

        public AspnetPersonalizationPerUser()
        {
            Id = System.Guid.NewGuid();
        }
    }

    // aspnet_Profile
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetProfile
    {
        public System.Guid UserId { get; set; } // UserId (Primary key)
        public string PropertyNames { get; set; } // PropertyNames (length: 1073741823)
        public string PropertyValuesString { get; set; } // PropertyValuesString (length: 1073741823)
        public byte[] PropertyValuesBinary { get; set; } // PropertyValuesBinary (length: 2147483647)
        public System.DateTime LastUpdatedDate { get; set; } // LastUpdatedDate

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK__aspnet_Pr__UserI__2B7F66B9
    }

    // aspnet_Roles
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetRole
    {
        public System.Guid ApplicationId { get; set; } // ApplicationId
        public System.Guid RoleId { get; set; } // RoleId (Primary key)
        public string RoleName { get; set; } // RoleName (length: 256)
        public string LoweredRoleName { get; set; } // LoweredRoleName (length: 256)
        public string Description { get; set; } // Description (length: 256)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<AspnetUser> AspnetUsers { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<DataSourceRole> DataSourceRoles { get; set; } // DataSourceRole.FK_DataSourceRole_aspnet_Roles
        public virtual System.Collections.Generic.ICollection<RoleModule> RoleModules { get; set; } // RoleModule.FK_RoleModule_aspnet_Roles

        // Foreign keys
        public virtual AspnetApplication AspnetApplication { get; set; } // FK__aspnet_Ro__Appli__27AED5D5

        public AspnetRole()
        {
            RoleId = System.Guid.NewGuid();
            DataSourceRoles = new System.Collections.Generic.List<DataSourceRole>();
            RoleModules = new System.Collections.Generic.List<RoleModule>();
            AspnetUsers = new System.Collections.Generic.List<AspnetUser>();
        }
    }

    // aspnet_SchemaVersions
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetSchemaVersion
    {
        public string Feature { get; set; } // Feature (Primary key) (length: 128)
        public string CompatibleSchemaVersion { get; set; } // CompatibleSchemaVersion (Primary key) (length: 128)
        public bool IsCurrentVersion { get; set; } // IsCurrentVersion
    }

    // aspnet_Users
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetUser
    {
        public System.Guid ApplicationId { get; set; } // ApplicationId
        public System.Guid UserId { get; set; } // UserId (Primary key)
        public string UserName { get; set; } // UserName (length: 256)
        public string LoweredUserName { get; set; } // LoweredUserName (length: 256)
        public string MobileAlias { get; set; } // MobileAlias (length: 16)
        public bool IsAnonymous { get; set; } // IsAnonymous
        public System.DateTime LastActivityDate { get; set; } // LastActivityDate

        // Reverse navigation
        public virtual AspnetMembership AspnetMembership { get; set; } // aspnet_Membership.FK__aspnet_Me__UserI__33208881
        public virtual AspnetProfile AspnetProfile { get; set; } // aspnet_Profile.FK__aspnet_Pr__UserI__2B7F66B9
        public virtual System.Collections.Generic.ICollection<AspnetPersonalizationPerUser> AspnetPersonalizationPerUsers { get; set; } // aspnet_PersonalizationPerUser.FK__aspnet_Pe__UserI__3508D0F3
        public virtual System.Collections.Generic.ICollection<AspnetRole> AspnetRoles { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<AuditLog> AuditLogs { get; set; } // AuditLog.FK_AuditLog_aspnet_Users
        public virtual System.Collections.Generic.ICollection<DataLog> DataLogs { get; set; } // DataLog.FK_DataLog_aspnet_Users
        public virtual System.Collections.Generic.ICollection<DataSchema> DataSchemas { get; set; } // DataSchema.FK_DataSchema_aspnet_Users
        public virtual System.Collections.Generic.ICollection<DataSource> DataSources { get; set; } // DataSource.FK_DataSource_aspnet_Users
        public virtual System.Collections.Generic.ICollection<DataSourceRole> DataSourceRoles { get; set; } // DataSourceRole.FK_DataSourceRole_aspnet_Users
        public virtual System.Collections.Generic.ICollection<DataSourceTransformation> DataSourceTransformations { get; set; } // DataSourceTransformation.FK_DataSourceTransformation_aspnet_Users
        public virtual System.Collections.Generic.ICollection<DataSourceType> DataSourceTypes { get; set; } // DataSourceType.FK_DataSourceType_aspnet_Users
        public virtual System.Collections.Generic.ICollection<ImportBatch> ImportBatches { get; set; } // ImportBatch.FK_ImportBatch_aspnet_Users
        public virtual System.Collections.Generic.ICollection<Instrument> Instruments { get; set; } // Instrument.FK_Instrument_aspnet_Users
        public virtual System.Collections.Generic.ICollection<InstrumentDataSource> InstrumentDataSources { get; set; } // Instrument_DataSource.FK_Instrument_DataSource_aspnet_Users
        public virtual System.Collections.Generic.ICollection<InstrumentSensor> InstrumentSensors { get; set; } // Instrument_Sensor.FK_Instrument_Sensor_aspnet_Users
        public virtual System.Collections.Generic.ICollection<Observation> Observations { get; set; } // Observation.FK_Observation_aspnet_Users
        public virtual System.Collections.Generic.ICollection<Offering> Offerings { get; set; } // Offering.FK_Offering_aspnet_Users
        public virtual System.Collections.Generic.ICollection<Organisation> Organisations { get; set; } // Organisation.FK_Organisation_aspnet_Users
        public virtual System.Collections.Generic.ICollection<OrganisationInstrument> OrganisationInstruments { get; set; } // Organisation_Instrument.FK_Organisation_Instrument_aspnet_Users
        public virtual System.Collections.Generic.ICollection<OrganisationRole> OrganisationRoles { get; set; } // OrganisationRole.FK_OrganisationRole_aspnet_Users
        public virtual System.Collections.Generic.ICollection<OrganisationSite> OrganisationSites { get; set; } // Organisation_Site.FK_Organisation_Site_aspnet_Users
        public virtual System.Collections.Generic.ICollection<OrganisationStation> OrganisationStations { get; set; } // Organisation_Station.FK_Organisation_Station_aspnet_Users
        public virtual System.Collections.Generic.ICollection<Phenomenon> Phenomena { get; set; } // Phenomenon.FK_Phenomenon_aspnet_Users
        public virtual System.Collections.Generic.ICollection<PhenomenonOffering> PhenomenonOfferings { get; set; } // PhenomenonOffering.FK_PhenomenonOffering_aspnet_Users
        public virtual System.Collections.Generic.ICollection<PhenomenonUom> PhenomenonUoms { get; set; } // PhenomenonUOM.FK_PhenomenonUOM_aspnet_Users
        public virtual System.Collections.Generic.ICollection<Programme> Programmes { get; set; } // Programme.FK_Programme_aspnet_Users
        public virtual System.Collections.Generic.ICollection<Progress> Progresses { get; set; } // Progress.FK_Progress_aspnet_Users
        public virtual System.Collections.Generic.ICollection<Project> Projects { get; set; } // Project.FK_Project_aspnet_Users
        public virtual System.Collections.Generic.ICollection<ProjectSite> ProjectSites { get; set; } // ProjectSite.FK_ProjectSite_aspnet_Users
        public virtual System.Collections.Generic.ICollection<ProjectStation> ProjectStations { get; set; } // Project_Station.FK_Project_Station_aspnet_Users
        public virtual System.Collections.Generic.ICollection<SchemaColumn> SchemaColumns { get; set; } // SchemaColumn.FK_SchemaColumn_aspnet_Users
        public virtual System.Collections.Generic.ICollection<SchemaColumnType> SchemaColumnTypes { get; set; } // SchemaColumnType.FK_SchemaColumnType_aspnet_Users
        public virtual System.Collections.Generic.ICollection<Sensor> Sensors { get; set; } // Sensor.FK_Sensor_aspnet_Users
        public virtual System.Collections.Generic.ICollection<Site> Sites { get; set; } // Site.FK_Site_aspnet_Users
        public virtual System.Collections.Generic.ICollection<Station> Stations { get; set; } // Station.FK_Station_aspnet_Users
        public virtual System.Collections.Generic.ICollection<StationInstrument> StationInstruments { get; set; } // Station_Instrument.FK_Station_Instrument_aspnet_Users
        public virtual System.Collections.Generic.ICollection<Status> Status { get; set; } // Status.FK_Status_aspnet_Users
        public virtual System.Collections.Generic.ICollection<StatusReason> StatusReasons { get; set; } // StatusReason.FK_StatusReason_aspnet_Users
        public virtual System.Collections.Generic.ICollection<TransformationType> TransformationTypes { get; set; } // TransformationType.FK_TransformationType_aspnet_Users
        public virtual System.Collections.Generic.ICollection<UnitOfMeasure> UnitOfMeasures { get; set; } // UnitOfMeasure.FK_UnitOfMeasure_aspnet_Users

        // Foreign keys
        public virtual AspnetApplication AspnetApplication { get; set; } // FK__aspnet_Us__Appli__28A2FA0E

        public AspnetUser()
        {
            UserId = System.Guid.NewGuid();
            IsAnonymous = false;
            AspnetPersonalizationPerUsers = new System.Collections.Generic.List<AspnetPersonalizationPerUser>();
            AuditLogs = new System.Collections.Generic.List<AuditLog>();
            DataLogs = new System.Collections.Generic.List<DataLog>();
            DataSchemas = new System.Collections.Generic.List<DataSchema>();
            DataSources = new System.Collections.Generic.List<DataSource>();
            DataSourceRoles = new System.Collections.Generic.List<DataSourceRole>();
            DataSourceTransformations = new System.Collections.Generic.List<DataSourceTransformation>();
            DataSourceTypes = new System.Collections.Generic.List<DataSourceType>();
            ImportBatches = new System.Collections.Generic.List<ImportBatch>();
            Instruments = new System.Collections.Generic.List<Instrument>();
            InstrumentDataSources = new System.Collections.Generic.List<InstrumentDataSource>();
            InstrumentSensors = new System.Collections.Generic.List<InstrumentSensor>();
            Observations = new System.Collections.Generic.List<Observation>();
            Offerings = new System.Collections.Generic.List<Offering>();
            Organisations = new System.Collections.Generic.List<Organisation>();
            OrganisationInstruments = new System.Collections.Generic.List<OrganisationInstrument>();
            OrganisationSites = new System.Collections.Generic.List<OrganisationSite>();
            OrganisationStations = new System.Collections.Generic.List<OrganisationStation>();
            OrganisationRoles = new System.Collections.Generic.List<OrganisationRole>();
            Phenomena = new System.Collections.Generic.List<Phenomenon>();
            PhenomenonOfferings = new System.Collections.Generic.List<PhenomenonOffering>();
            PhenomenonUoms = new System.Collections.Generic.List<PhenomenonUom>();
            Programmes = new System.Collections.Generic.List<Programme>();
            Progresses = new System.Collections.Generic.List<Progress>();
            Projects = new System.Collections.Generic.List<Project>();
            ProjectStations = new System.Collections.Generic.List<ProjectStation>();
            ProjectSites = new System.Collections.Generic.List<ProjectSite>();
            SchemaColumns = new System.Collections.Generic.List<SchemaColumn>();
            SchemaColumnTypes = new System.Collections.Generic.List<SchemaColumnType>();
            Sensors = new System.Collections.Generic.List<Sensor>();
            Sites = new System.Collections.Generic.List<Site>();
            Stations = new System.Collections.Generic.List<Station>();
            StationInstruments = new System.Collections.Generic.List<StationInstrument>();
            Status = new System.Collections.Generic.List<Status>();
            StatusReasons = new System.Collections.Generic.List<StatusReason>();
            TransformationTypes = new System.Collections.Generic.List<TransformationType>();
            UnitOfMeasures = new System.Collections.Generic.List<UnitOfMeasure>();
            AspnetRoles = new System.Collections.Generic.List<AspnetRole>();
        }
    }

    // aspnet_WebEvent_Events
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetWebEventEvent
    {
        public string EventId { get; set; } // EventId (Primary key) (length: 32)
        public System.DateTime EventTimeUtc { get; set; } // EventTimeUtc
        public System.DateTime EventTime { get; set; } // EventTime
        public string EventType { get; set; } // EventType (length: 256)
        public decimal EventSequence { get; set; } // EventSequence
        public decimal EventOccurrence { get; set; } // EventOccurrence
        public int EventCode { get; set; } // EventCode
        public int EventDetailCode { get; set; } // EventDetailCode
        public string Message { get; set; } // Message (length: 1024)
        public string ApplicationPath { get; set; } // ApplicationPath (length: 256)
        public string ApplicationVirtualPath { get; set; } // ApplicationVirtualPath (length: 256)
        public string MachineName { get; set; } // MachineName (length: 256)
        public string RequestUrl { get; set; } // RequestUrl (length: 1024)
        public string ExceptionType { get; set; } // ExceptionType (length: 256)
        public string Details { get; set; } // Details (length: 1073741823)
    }

    // AuditLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AuditLog
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public string Description { get; set; } // Description (length: 500)
        public System.Guid UserId { get; set; } // UserId
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_AuditLog_aspnet_Users

        public AuditLog()
        {
            Id = System.Guid.NewGuid();
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
        }
    }

    // DataLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class DataLog
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid? SensorId { get; set; } // SensorID
        public System.DateTime ImportDate { get; set; } // ImportDate
        public System.DateTime? ValueDate { get; set; } // ValueDate
        public System.DateTime? ValueTime { get; set; } // ValueTime
        public string ValueText { get; set; } // ValueText (length: 50)
        public string TransformValueText { get; set; } // TransformValueText (length: 50)
        public double? RawValue { get; set; } // RawValue
        public double? DataValue { get; set; } // DataValue
        public string Comment { get; set; } // Comment (length: 250)
        public string InvalidDateValue { get; set; } // InvalidDateValue (length: 50)
        public string InvalidTimeValue { get; set; } // InvalidTimeValue (length: 50)
        public string InvalidOffering { get; set; } // InvalidOffering (length: 50)
        public string InvalidUom { get; set; } // InvalidUOM (length: 50)
        public System.Guid? DataSourceTransformationId { get; set; } // DataSourceTransformationID
        public System.Guid StatusId { get; set; } // StatusID
        public System.Guid? StatusReasonId { get; set; } // StatusReasonID
        public string ImportStatus { get; set; } // ImportStatus (length: 500)
        public System.Guid? UserId { get; set; } // UserId
        public System.Guid? PhenomenonOfferingId { get; set; } // PhenomenonOfferingID
        public System.Guid? PhenomenonUomid { get; set; } // PhenomenonUOMID
        public System.Guid ImportBatchId { get; set; } // ImportBatchID
        public string RawRecordData { get; set; } // RawRecordData (length: 500)
        public string RawFieldValue { get; set; } // RawFieldValue (length: 50)
        public System.Guid? CorrelationId { get; set; } // CorrelationID
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_DataLog_aspnet_Users
        public virtual DataSourceTransformation DataSourceTransformation { get; set; } // FK_DataLog_DataSourceTransformation
        public virtual ImportBatch ImportBatch { get; set; } // FK_DataLog_ImportBatch
        public virtual PhenomenonOffering PhenomenonOffering { get; set; } // FK_DataLog_PhenomenonOffering
        public virtual PhenomenonUom PhenomenonUom { get; set; } // FK_DataLog_PhenomenonUOM
        public virtual Sensor Sensor { get; set; } // FK_DataLog_Sensor
        public virtual Status Status { get; set; } // FK_DataLog_Status
        public virtual StatusReason StatusReason { get; set; } // FK_DataLog_StatusReason

        public DataLog()
        {
            Id = System.Guid.NewGuid();
            ImportDate = System.DateTime.Now;
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
        }
    }

    // DataSchema
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class DataSchema
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public string Code { get; set; } // Code (length: 50)
        public string Name { get; set; } // Name (length: 100)
        public string Description { get; set; } // Description (length: 5000)
        public System.Guid DataSourceTypeId { get; set; } // DataSourceTypeID
        public int IgnoreFirst { get; set; } // IgnoreFirst
        public int IgnoreLast { get; set; } // IgnoreLast
        public string Condition { get; set; } // Condition (length: 500)
        public string DataSchema_ { get; set; } // DataSchema (length: 2147483647)
        public System.Guid UserId { get; set; } // UserId
        public string Delimiter { get; set; } // Delimiter (length: 3)
        public string SplitSelector { get; set; } // SplitSelector (length: 50)
        public int? SplitIndex { get; set; } // SplitIndex
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<DataSource> DataSources { get; set; } // DataSource.FK_DataSource_DataSchema
        public virtual System.Collections.Generic.ICollection<SchemaColumn> SchemaColumns { get; set; } // SchemaColumn.FK_SchemaColumn_DataSchema
        public virtual System.Collections.Generic.ICollection<Sensor> Sensors { get; set; } // Sensor.FK_Sensor_DataSchema

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_DataSchema_aspnet_Users
        public virtual DataSourceType DataSourceType { get; set; } // FK_DataSchema_DataSourceType

        public DataSchema()
        {
            Id = System.Guid.NewGuid();
            IgnoreFirst = 0;
            IgnoreLast = 0;
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
            DataSources = new System.Collections.Generic.List<DataSource>();
            SchemaColumns = new System.Collections.Generic.List<SchemaColumn>();
            Sensors = new System.Collections.Generic.List<Sensor>();
        }
    }

    // DataSource
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class DataSource
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public string Code { get; set; } // Code (length: 50)
        public string Name { get; set; } // Name (length: 150)
        public string Description { get; set; } // Description (length: 5000)
        public string Url { get; set; } // Url (length: 250)
        public double? DefaultNullValue { get; set; } // DefaultNullValue
        public double? ErrorEstimate { get; set; } // ErrorEstimate
        public int UpdateFreq { get; set; } // UpdateFreq
        public System.DateTime? StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime LastUpdate { get; set; } // LastUpdate
        public System.Guid? DataSchemaId { get; set; } // DataSchemaID
        public System.Guid UserId { get; set; } // UserId
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<DataSourceRole> DataSourceRoles { get; set; } // DataSourceRole.FK_DataSourceRole_DataSource
        public virtual System.Collections.Generic.ICollection<DataSourceTransformation> DataSourceTransformations { get; set; } // DataSourceTransformation.FK_DataSourceTransformation_DataSource
        public virtual System.Collections.Generic.ICollection<ImportBatch> ImportBatches { get; set; } // ImportBatch.FK_ImportBatch_DataSource
        public virtual System.Collections.Generic.ICollection<InstrumentDataSource> InstrumentDataSources { get; set; } // Instrument_DataSource.FK_Instrument_DataSource_DataSource
        public virtual System.Collections.Generic.ICollection<Sensor> Sensors { get; set; } // Sensor.FK_Sensor_DataSource

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_DataSource_aspnet_Users
        public virtual DataSchema DataSchema { get; set; } // FK_DataSource_DataSchema

        public DataSource()
        {
            Id = System.Guid.NewGuid();
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
            DataSourceRoles = new System.Collections.Generic.List<DataSourceRole>();
            DataSourceTransformations = new System.Collections.Generic.List<DataSourceTransformation>();
            ImportBatches = new System.Collections.Generic.List<ImportBatch>();
            InstrumentDataSources = new System.Collections.Generic.List<InstrumentDataSource>();
            Sensors = new System.Collections.Generic.List<Sensor>();
        }
    }

    // DataSourceRole
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class DataSourceRole
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid DataSourceId { get; set; } // DataSourceID
        public System.Guid RoleId { get; set; } // RoleId
        public System.DateTime? DateStart { get; set; } // DateStart
        public System.DateTime? DateEnd { get; set; } // DateEnd
        public string RoleName { get; set; } // RoleName (length: 256)
        public bool? IsRoleReadOnly { get; set; } // IsRoleReadOnly
        public System.Guid? UserId { get; set; } // UserId
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Foreign keys
        public virtual AspnetRole AspnetRole { get; set; } // FK_DataSourceRole_aspnet_Roles
        public virtual AspnetUser AspnetUser { get; set; } // FK_DataSourceRole_aspnet_Users
        public virtual DataSource DataSource { get; set; } // FK_DataSourceRole_DataSource

        public DataSourceRole()
        {
            Id = System.Guid.NewGuid();
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
        }
    }

    // DataSourceTransformation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class DataSourceTransformation
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid TransformationTypeId { get; set; } // TransformationTypeID
        public System.Guid PhenomenonId { get; set; } // PhenomenonID
        public System.Guid? PhenomenonOfferingId { get; set; } // PhenomenonOfferingID
        public System.Guid? PhenomenonUomid { get; set; } // PhenomenonUOMID
        public System.DateTime StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.Guid DataSourceId { get; set; } // DataSourceID
        public string Definition { get; set; } // Definition (length: 2147483647)
        public System.Guid? NewPhenomenonOfferingId { get; set; } // NewPhenomenonOfferingID
        public System.Guid? NewPhenomenonUomid { get; set; } // NewPhenomenonUOMID
        public int? Rank { get; set; } // Rank
        public System.Guid? SensorId { get; set; } // SensorID
        public System.Guid? UserId { get; set; } // UserId
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<DataLog> DataLogs { get; set; } // DataLog.FK_DataLog_DataSourceTransformation

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_DataSourceTransformation_aspnet_Users
        public virtual DataSource DataSource { get; set; } // FK_DataSourceTransformation_DataSource
        public virtual Phenomenon Phenomenon { get; set; } // FK_DataSourceTransformation_Phenomenon
        public virtual PhenomenonOffering NewPhenomenonOffering { get; set; } // FK_DataSourceTransformation_NewPhenomenonOffering
        public virtual PhenomenonOffering PhenomenonOffering_PhenomenonOfferingId { get; set; } // FK_DataSourceTransformation_PhenomenonOffering
        public virtual PhenomenonUom NewPhenomenonUom { get; set; } // FK_DataSourceTransformation_NewPhenomenonUOM
        public virtual PhenomenonUom PhenomenonUom_PhenomenonUomid { get; set; } // FK_DataSourceTransformation_PhenomenonUOM
        public virtual Sensor Sensor { get; set; } // FK_DataSourceTransformation_Sensor
        public virtual TransformationType TransformationType { get; set; } // FK_DataSourceTransformation_TransformationType

        public DataSourceTransformation()
        {
            Id = System.Guid.NewGuid();
            Rank = 0;
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
            DataLogs = new System.Collections.Generic.List<DataLog>();
        }
    }

    // DataSourceType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class DataSourceType
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public string Code { get; set; } // Code (length: 50)
        public string Description { get; set; } // Description (length: 500)
        public System.Guid? UserId { get; set; } // UserId
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<DataSchema> DataSchemas { get; set; } // DataSchema.FK_DataSchema_DataSourceType

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_DataSourceType_aspnet_Users

        public DataSourceType()
        {
            Id = System.Guid.NewGuid();
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
            DataSchemas = new System.Collections.Generic.List<DataSchema>();
        }
    }

    // ImportBatch
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class ImportBatch
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public int Code { get; set; } // Code
        public System.Guid DataSourceId { get; set; } // DataSourceID
        public System.DateTime ImportDate { get; set; } // ImportDate
        public int Status { get; set; } // Status
        public System.Guid UserId { get; set; } // UserId
        public string FileName { get; set; } // FileName (length: 250)
        public string LogFileName { get; set; } // LogFileName (length: 250)
        public string Comment { get; set; } // Comment (length: 8000)
        public System.Guid? StatusId { get; set; } // StatusID
        public System.Guid? StatusReasonId { get; set; } // StatusReasonID
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt
        public byte[] SourceFile { get; set; } // SourceFile
        public byte[] Pass1File { get; set; } // Pass1File
        public byte[] Pass2File { get; set; } // Pass2File
        public byte[] Pass3File { get; set; } // Pass3File
        public byte[] Pass4File { get; set; } // Pass4File

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<DataLog> DataLogs { get; set; } // DataLog.FK_DataLog_ImportBatch
        public virtual System.Collections.Generic.ICollection<Observation> Observations { get; set; } // Observation.FK_Observation_ImportBatch
        public virtual System.Collections.Generic.ICollection<Progress> Progresses { get; set; } // Progress.FK_Progress_ImportBatch

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_ImportBatch_aspnet_Users
        public virtual DataSource DataSource { get; set; } // FK_ImportBatch_DataSource
        public virtual Status Status_StatusId { get; set; } // FK_ImportBatch_Status
        public virtual StatusReason StatusReason { get; set; } // FK_ImportBatch_StatusReason

        public ImportBatch()
        {
            Id = System.Guid.NewGuid();
            ImportDate = System.DateTime.Now;
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
            DataLogs = new System.Collections.Generic.List<DataLog>();
            Observations = new System.Collections.Generic.List<Observation>();
            Progresses = new System.Collections.Generic.List<Progress>();
        }
    }

    // Instrument
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class Instrument
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public string Code { get; set; } // Code (length: 50)
        public string Name { get; set; } // Name (length: 150)
        public string Description { get; set; } // Description (length: 5000)
        public string Url { get; set; } // Url (length: 250)
        public System.DateTime? StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.Guid UserId { get; set; } // UserId
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<InstrumentDataSource> InstrumentDataSources { get; set; } // Instrument_DataSource.FK_Instrument_DataSource_Instrument
        public virtual System.Collections.Generic.ICollection<InstrumentSensor> InstrumentSensors { get; set; } // Instrument_Sensor.FK_Instrument_Sensor_Instrument
        public virtual System.Collections.Generic.ICollection<OrganisationInstrument> OrganisationInstruments { get; set; } // Organisation_Instrument.FK_Organisation_Instrument_Instrument
        public virtual System.Collections.Generic.ICollection<StationInstrument> StationInstruments { get; set; } // Station_Instrument.FK_Station_Instrument_Instrument

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_Instrument_aspnet_Users

        public Instrument()
        {
            Id = System.Guid.NewGuid();
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
            InstrumentDataSources = new System.Collections.Generic.List<InstrumentDataSource>();
            InstrumentSensors = new System.Collections.Generic.List<InstrumentSensor>();
            OrganisationInstruments = new System.Collections.Generic.List<OrganisationInstrument>();
            StationInstruments = new System.Collections.Generic.List<StationInstrument>();
        }
    }

    // Instrument_DataSource
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class InstrumentDataSource
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid InstrumentId { get; set; } // InstrumentID
        public System.Guid DataSourceId { get; set; } // DataSourceID
        public System.DateTime? StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.Guid UserId { get; set; } // UserId
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_Instrument_DataSource_aspnet_Users
        public virtual DataSource DataSource { get; set; } // FK_Instrument_DataSource_DataSource
        public virtual Instrument Instrument { get; set; } // FK_Instrument_DataSource_Instrument

        public InstrumentDataSource()
        {
            Id = System.Guid.NewGuid();
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
        }
    }

    // Instrument_Sensor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class InstrumentSensor
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid InstrumentId { get; set; } // InstrumentID
        public System.Guid SensorId { get; set; } // SensorID
        public System.DateTime? StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.Guid UserId { get; set; } // UserId
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_Instrument_Sensor_aspnet_Users
        public virtual Instrument Instrument { get; set; } // FK_Instrument_Sensor_Instrument
        public virtual Sensor Sensor { get; set; } // FK_Instrument_Sensor_Sensor

        public InstrumentSensor()
        {
            Id = System.Guid.NewGuid();
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
        }
    }

    // Module
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class Module
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public string Name { get; set; } // Name (length: 100)
        public string Description { get; set; } // Description (length: 500)
        public string Url { get; set; } // Url (length: 250)
        public int Icon { get; set; } // Icon
        public System.Guid? ModuleId { get; set; } // ModuleID
        public int? IOrder { get; set; } // iOrder

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Module> Modules { get; set; } // Module.FK_Module_Module
        public virtual System.Collections.Generic.ICollection<RoleModule> RoleModules { get; set; } // RoleModule.FK_RoleModule_Module

        // Foreign keys
        public virtual Module Module_ModuleId { get; set; } // FK_Module_Module

        public Module()
        {
            Id = System.Guid.NewGuid();
            Modules = new System.Collections.Generic.List<Module>();
            RoleModules = new System.Collections.Generic.List<RoleModule>();
        }
    }

    // Observation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class Observation
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid SensorId { get; set; } // SensorID
        public System.DateTime ValueDate { get; set; } // ValueDate
        public double? RawValue { get; set; } // RawValue
        public double? DataValue { get; set; } // DataValue
        public string Comment { get; set; } // Comment (length: 250)
        public System.Guid PhenomenonOfferingId { get; set; } // PhenomenonOfferingID
        public System.Guid PhenomenonUomid { get; set; } // PhenomenonUOMID
        public System.Guid ImportBatchId { get; set; } // ImportBatchID
        public System.Guid? StatusId { get; set; } // StatusID
        public System.Guid? StatusReasonId { get; set; } // StatusReasonID
        public System.Guid? CorrelationId { get; set; } // CorrelationID
        public System.Guid UserId { get; set; } // UserId
        public System.DateTime AddedDate { get; set; } // AddedDate
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_Observation_aspnet_Users
        public virtual ImportBatch ImportBatch { get; set; } // FK_Observation_ImportBatch
        public virtual PhenomenonOffering PhenomenonOffering { get; set; } // FK_Observation_PhenomenonOffering
        public virtual PhenomenonUom PhenomenonUom { get; set; } // FK_Observation_PhenomenonUOM
        public virtual Sensor Sensor { get; set; } // FK_Observation_Sensor
        public virtual Status Status { get; set; } // FK_Observation_Status
        public virtual StatusReason StatusReason { get; set; } // FK_Observation_StatusReason

        public Observation()
        {
            Id = System.Guid.NewGuid();
            AddedDate = System.DateTime.Now;
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
        }
    }

    // Offering
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class Offering
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public string Code { get; set; } // Code (length: 50)
        public string Name { get; set; } // Name (length: 150)
        public string Description { get; set; } // Description (length: 5000)
        public System.Guid UserId { get; set; } // UserId
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<PhenomenonOffering> PhenomenonOfferings { get; set; } // PhenomenonOffering.FK_PhenomenonOffering_Offering

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_Offering_aspnet_Users

        public Offering()
        {
            Id = System.Guid.NewGuid();
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
            PhenomenonOfferings = new System.Collections.Generic.List<PhenomenonOffering>();
        }
    }

    // Organisation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class Organisation
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public string Code { get; set; } // Code (length: 50)
        public string Name { get; set; } // Name (length: 150)
        public string Description { get; set; } // Description (length: 5000)
        public string Url { get; set; } // Url (length: 250)
        public System.Guid UserId { get; set; } // UserId
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<OrganisationInstrument> OrganisationInstruments { get; set; } // Organisation_Instrument.FK_Organisation_Instrument_Organisation
        public virtual System.Collections.Generic.ICollection<OrganisationSite> OrganisationSites { get; set; } // Organisation_Site.FK_Organisation_Site_Organisation
        public virtual System.Collections.Generic.ICollection<OrganisationStation> OrganisationStations { get; set; } // Organisation_Station.FK_Organisation_Station_Organisation
        public virtual System.Collections.Generic.ICollection<ProjectSite> ProjectSites { get; set; } // ProjectSite.FK_ProjectSite_Organisation

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_Organisation_aspnet_Users

        public Organisation()
        {
            Id = System.Guid.NewGuid();
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
            OrganisationInstruments = new System.Collections.Generic.List<OrganisationInstrument>();
            OrganisationSites = new System.Collections.Generic.List<OrganisationSite>();
            OrganisationStations = new System.Collections.Generic.List<OrganisationStation>();
            ProjectSites = new System.Collections.Generic.List<ProjectSite>();
        }
    }

    // Organisation_Instrument
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class OrganisationInstrument
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid OrganisationId { get; set; } // OrganisationID
        public System.Guid InstrumentId { get; set; } // InstrumentID
        public System.Guid OrganisationRoleId { get; set; } // OrganisationRoleID
        public System.DateTime? StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.Guid UserId { get; set; } // UserId
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_Organisation_Instrument_aspnet_Users
        public virtual Instrument Instrument { get; set; } // FK_Organisation_Instrument_Instrument
        public virtual Organisation Organisation { get; set; } // FK_Organisation_Instrument_Organisation
        public virtual OrganisationRole OrganisationRole { get; set; } // FK_Organisation_Instrument_OrganisationRole

        public OrganisationInstrument()
        {
            Id = System.Guid.NewGuid();
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
        }
    }

    // OrganisationRole
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class OrganisationRole
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public string Code { get; set; } // Code (length: 50)
        public string Name { get; set; } // Name (length: 150)
        public string Description { get; set; } // Description (length: 5000)
        public System.Guid UserId { get; set; } // UserId
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<OrganisationInstrument> OrganisationInstruments { get; set; } // Organisation_Instrument.FK_Organisation_Instrument_OrganisationRole
        public virtual System.Collections.Generic.ICollection<OrganisationSite> OrganisationSites { get; set; } // Organisation_Site.FK_Organisation_Site_OrganisationRole
        public virtual System.Collections.Generic.ICollection<OrganisationStation> OrganisationStations { get; set; } // Organisation_Station.FK_Organisation_Station_OrganisationRole

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_OrganisationRole_aspnet_Users

        public OrganisationRole()
        {
            Id = System.Guid.NewGuid();
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
            OrganisationInstruments = new System.Collections.Generic.List<OrganisationInstrument>();
            OrganisationSites = new System.Collections.Generic.List<OrganisationSite>();
            OrganisationStations = new System.Collections.Generic.List<OrganisationStation>();
        }
    }

    // Organisation_Site
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class OrganisationSite
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid OrganisationId { get; set; } // OrganisationID
        public System.Guid SiteId { get; set; } // SiteID
        public System.Guid OrganisationRoleId { get; set; } // OrganisationRoleID
        public System.DateTime? StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.Guid UserId { get; set; } // UserId
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_Organisation_Site_aspnet_Users
        public virtual Organisation Organisation { get; set; } // FK_Organisation_Site_Organisation
        public virtual OrganisationRole OrganisationRole { get; set; } // FK_Organisation_Site_OrganisationRole
        public virtual Site Site { get; set; } // FK_Organisation_Site_Site

        public OrganisationSite()
        {
            Id = System.Guid.NewGuid();
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
        }
    }

    // Organisation_Station
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class OrganisationStation
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid OrganisationId { get; set; } // OrganisationID
        public System.Guid StationId { get; set; } // StationID
        public System.Guid OrganisationRoleId { get; set; } // OrganisationRoleID
        public System.DateTime? StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.Guid UserId { get; set; } // UserId
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_Organisation_Station_aspnet_Users
        public virtual Organisation Organisation { get; set; } // FK_Organisation_Station_Organisation
        public virtual OrganisationRole OrganisationRole { get; set; } // FK_Organisation_Station_OrganisationRole
        public virtual Station Station { get; set; } // FK_Organisation_Station_Station

        public OrganisationStation()
        {
            Id = System.Guid.NewGuid();
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
        }
    }

    // Phenomenon
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class Phenomenon
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public string Code { get; set; } // Code (length: 50)
        public string Name { get; set; } // Name (length: 150)
        public string Description { get; set; } // Description (length: 5000)
        public string Url { get; set; } // Url (length: 250)
        public System.Guid UserId { get; set; } // UserId
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<DataSourceTransformation> DataSourceTransformations { get; set; } // DataSourceTransformation.FK_DataSourceTransformation_Phenomenon
        public virtual System.Collections.Generic.ICollection<PhenomenonOffering> PhenomenonOfferings { get; set; } // PhenomenonOffering.FK_PhenomenonOffering_Phenomenon
        public virtual System.Collections.Generic.ICollection<PhenomenonUom> PhenomenonUoms { get; set; } // PhenomenonUOM.FK_PhenomenonUOM_PhenomenonUOM
        public virtual System.Collections.Generic.ICollection<SchemaColumn> SchemaColumns { get; set; } // SchemaColumn.FK_SchemaColumn_Phenomenon
        public virtual System.Collections.Generic.ICollection<Sensor> Sensors { get; set; } // Sensor.FK_Sensor_Phenomenon

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_Phenomenon_aspnet_Users

        public Phenomenon()
        {
            Id = System.Guid.NewGuid();
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
            DataSourceTransformations = new System.Collections.Generic.List<DataSourceTransformation>();
            PhenomenonOfferings = new System.Collections.Generic.List<PhenomenonOffering>();
            PhenomenonUoms = new System.Collections.Generic.List<PhenomenonUom>();
            SchemaColumns = new System.Collections.Generic.List<SchemaColumn>();
            Sensors = new System.Collections.Generic.List<Sensor>();
        }
    }

    // PhenomenonOffering
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class PhenomenonOffering
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid PhenomenonId { get; set; } // PhenomenonID
        public System.Guid OfferingId { get; set; } // OfferingID
        public System.Guid? UserId { get; set; } // UserId
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<DataLog> DataLogs { get; set; } // DataLog.FK_DataLog_PhenomenonOffering
        public virtual System.Collections.Generic.ICollection<DataSourceTransformation> NewPhenomenonOffering { get; set; } // DataSourceTransformation.FK_DataSourceTransformation_NewPhenomenonOffering
        public virtual System.Collections.Generic.ICollection<DataSourceTransformation> PhenomenonOfferingId { get; set; } // DataSourceTransformation.FK_DataSourceTransformation_PhenomenonOffering
        public virtual System.Collections.Generic.ICollection<Observation> Observations { get; set; } // Observation.FK_Observation_PhenomenonOffering
        public virtual System.Collections.Generic.ICollection<Progress> Progresses { get; set; } // Progress.FK_Progress_PhenomenonOffering
        public virtual System.Collections.Generic.ICollection<SchemaColumn> SchemaColumns { get; set; } // SchemaColumn.FK_SchemaColumn_PhenomenonOffering

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_PhenomenonOffering_aspnet_Users
        public virtual Offering Offering { get; set; } // FK_PhenomenonOffering_Offering
        public virtual Phenomenon Phenomenon { get; set; } // FK_PhenomenonOffering_Phenomenon

        public PhenomenonOffering()
        {
            Id = System.Guid.NewGuid();
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
            DataLogs = new System.Collections.Generic.List<DataLog>();
            NewPhenomenonOffering = new System.Collections.Generic.List<DataSourceTransformation>();
            PhenomenonOfferingId = new System.Collections.Generic.List<DataSourceTransformation>();
            Observations = new System.Collections.Generic.List<Observation>();
            Progresses = new System.Collections.Generic.List<Progress>();
            SchemaColumns = new System.Collections.Generic.List<SchemaColumn>();
        }
    }

    // PhenomenonUOM
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class PhenomenonUom
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid PhenomenonId { get; set; } // PhenomenonID
        public System.Guid UnitOfMeasureId { get; set; } // UnitOfMeasureID
        public bool IsDefault { get; set; } // IsDefault
        public System.Guid? UserId { get; set; } // UserId
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<DataLog> DataLogs { get; set; } // DataLog.FK_DataLog_PhenomenonUOM
        public virtual System.Collections.Generic.ICollection<DataSourceTransformation> NewPhenomenonUom { get; set; } // DataSourceTransformation.FK_DataSourceTransformation_NewPhenomenonUOM
        public virtual System.Collections.Generic.ICollection<DataSourceTransformation> PhenomenonUomid { get; set; } // DataSourceTransformation.FK_DataSourceTransformation_PhenomenonUOM
        public virtual System.Collections.Generic.ICollection<Observation> Observations { get; set; } // Observation.FK_Observation_PhenomenonUOM
        public virtual System.Collections.Generic.ICollection<SchemaColumn> SchemaColumns { get; set; } // SchemaColumn.FK_SchemaColumn_PhenomenonUOM

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_PhenomenonUOM_aspnet_Users
        public virtual Phenomenon Phenomenon { get; set; } // FK_PhenomenonUOM_PhenomenonUOM
        public virtual UnitOfMeasure UnitOfMeasure { get; set; } // FK_PhenomenonUOM_UnitOfMeasure

        public PhenomenonUom()
        {
            Id = System.Guid.NewGuid();
            IsDefault = false;
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
            DataLogs = new System.Collections.Generic.List<DataLog>();
            NewPhenomenonUom = new System.Collections.Generic.List<DataSourceTransformation>();
            PhenomenonUomid = new System.Collections.Generic.List<DataSourceTransformation>();
            Observations = new System.Collections.Generic.List<Observation>();
            SchemaColumns = new System.Collections.Generic.List<SchemaColumn>();
        }
    }

    // Programme
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class Programme
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public string Code { get; set; } // Code (length: 50)
        public string Name { get; set; } // Name (length: 150)
        public string Description { get; set; } // Description (length: 5000)
        public string Url { get; set; } // Url (length: 250)
        public System.DateTime? StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.Guid UserId { get; set; } // UserId
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Project> Projects { get; set; } // Project.FK_Project_Programme

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_Programme_aspnet_Users

        public Programme()
        {
            Id = System.Guid.NewGuid();
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
            Projects = new System.Collections.Generic.List<Project>();
        }
    }

    // The table 'Progress' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // Progress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class Progress
    {
        public System.Guid? ImportBatchId { get; set; } // ImportBatchID
        public System.DateTime? StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime? DateUploaded { get; set; } // DateUploaded
        public long? Observations { get; set; } // Observations
        public System.Guid? UserId { get; set; } // UserId
        public System.Guid? SensorId { get; set; } // SensorID
        public System.Guid? PhenomenonOfferingId { get; set; } // PhenomenonOfferingID

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_Progress_aspnet_Users
        public virtual ImportBatch ImportBatch { get; set; } // FK_Progress_ImportBatch
        public virtual PhenomenonOffering PhenomenonOffering { get; set; } // FK_Progress_PhenomenonOffering
        public virtual Sensor Sensor { get; set; } // FK_Progress_Sensor
    }

    // The table 'progress_Progress_Resolved' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // progress_Progress_Resolved
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class ProgressProgressResolved
    {
        public System.DateTime? ImportDate { get; set; } // ImportDate
        public string FileName { get; set; } // FileName (length: 250)
        public System.DateTime? StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public long? Observations { get; set; } // Observations
        public System.DateTime? DateUploaded { get; set; } // DateUploaded
        public string UserName { get; set; } // UserName (length: 256)
        public string Sensor { get; set; } // Sensor (length: 150)
        public System.Guid? StationId { get; set; } // StationID
        public string Station { get; set; } // Station (length: 150)
    }

    // Project
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class Project
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid? ProgrammeId { get; set; } // ProgrammeID
        public string Code { get; set; } // Code (length: 50)
        public string Name { get; set; } // Name (length: 150)
        public string Description { get; set; } // Description (length: 5000)
        public string Url { get; set; } // Url (length: 250)
        public System.DateTime? StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.Guid UserId { get; set; } // UserId
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<ProjectStation> ProjectStations { get; set; } // Project_Station.FK_Project_Station_ProjectID

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_Project_aspnet_Users
        public virtual Programme Programme { get; set; } // FK_Project_Programme

        public Project()
        {
            Id = System.Guid.NewGuid();
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
            ProjectStations = new System.Collections.Generic.List<ProjectStation>();
        }
    }

    // ProjectSite
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class ProjectSite
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public string Code { get; set; } // Code (length: 50)
        public string Name { get; set; } // Name (length: 150)
        public string Description { get; set; } // Description (length: 5000)
        public System.Guid OrganisationId { get; set; } // OrganisationID
        public System.Guid UserId { get; set; } // UserId

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Station> Stations { get; set; } // Station.FK_Station_ProjectSite

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_ProjectSite_aspnet_Users
        public virtual Organisation Organisation { get; set; } // FK_ProjectSite_Organisation

        public ProjectSite()
        {
            Id = System.Guid.NewGuid();
            Stations = new System.Collections.Generic.List<Station>();
        }
    }

    // Project_Station
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class ProjectStation
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid ProjectId { get; set; } // ProjectID
        public System.Guid StationId { get; set; } // StationID
        public System.DateTime? StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.Guid UserId { get; set; } // UserId
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_Project_Station_aspnet_Users
        public virtual Project Project { get; set; } // FK_Project_Station_ProjectID
        public virtual Station Station { get; set; } // FK_Project_Station_StationID

        public ProjectStation()
        {
            Id = System.Guid.NewGuid();
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
        }
    }

    // __RefactorLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class RefactorLog
    {
        public System.Guid OperationKey { get; set; } // OperationKey (Primary key)
    }

    // RoleModule
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class RoleModule
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid RoleId { get; set; } // RoleId
        public System.Guid ModuleId { get; set; } // ModuleID

        // Foreign keys
        public virtual AspnetRole AspnetRole { get; set; } // FK_RoleModule_aspnet_Roles
        public virtual Module Module { get; set; } // FK_RoleModule_Module

        public RoleModule()
        {
            Id = System.Guid.NewGuid();
        }
    }

    // SchemaColumn
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class SchemaColumn
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid DataSchemaId { get; set; } // DataSchemaID
        public int Number { get; set; } // Number
        public string Name { get; set; } // Name (length: 100)
        public System.Guid SchemaColumnTypeId { get; set; } // SchemaColumnTypeID
        public int? Width { get; set; } // Width
        public string Format { get; set; } // Format (length: 50)
        public System.Guid? PhenomenonId { get; set; } // PhenomenonID
        public System.Guid? PhenomenonOfferingId { get; set; } // PhenomenonOfferingID
        public System.Guid? PhenomenonUomid { get; set; } // PhenomenonUOMID
        public string EmptyValue { get; set; } // EmptyValue (length: 50)
        public string FixedTime { get; set; } // FixedTime (length: 10)
        public System.Guid UserId { get; set; } // UserId
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_SchemaColumn_aspnet_Users
        public virtual DataSchema DataSchema { get; set; } // FK_SchemaColumn_DataSchema
        public virtual Phenomenon Phenomenon { get; set; } // FK_SchemaColumn_Phenomenon
        public virtual PhenomenonOffering PhenomenonOffering { get; set; } // FK_SchemaColumn_PhenomenonOffering
        public virtual PhenomenonUom PhenomenonUom { get; set; } // FK_SchemaColumn_PhenomenonUOM
        public virtual SchemaColumnType SchemaColumnType { get; set; } // FK_SchemaColumn_SchemaColumnType

        public SchemaColumn()
        {
            Id = System.Guid.NewGuid();
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
        }
    }

    // SchemaColumnType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class SchemaColumnType
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public string Name { get; set; } // Name (length: 50)
        public string Description { get; set; } // Description (length: 250)
        public System.Guid UserId { get; set; } // UserId
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<SchemaColumn> SchemaColumns { get; set; } // SchemaColumn.FK_SchemaColumn_SchemaColumnType

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_SchemaColumnType_aspnet_Users

        public SchemaColumnType()
        {
            Id = System.Guid.NewGuid();
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
            SchemaColumns = new System.Collections.Generic.List<SchemaColumn>();
        }
    }

    // Sensor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class Sensor
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public string Code { get; set; } // Code (length: 50)
        public string Name { get; set; } // Name (length: 150)
        public string Description { get; set; } // Description (length: 5000)
        public string Url { get; set; } // Url (length: 250)
        public System.Guid PhenomenonId { get; set; } // PhenomenonID
        public System.Guid DataSourceId { get; set; } // DataSourceID
        public System.Guid? DataSchemaId { get; set; } // DataSchemaID
        public System.Guid UserId { get; set; } // UserId
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<DataLog> DataLogs { get; set; } // DataLog.FK_DataLog_Sensor
        public virtual System.Collections.Generic.ICollection<DataSourceTransformation> DataSourceTransformations { get; set; } // DataSourceTransformation.FK_DataSourceTransformation_Sensor
        public virtual System.Collections.Generic.ICollection<InstrumentSensor> InstrumentSensors { get; set; } // Instrument_Sensor.FK_Instrument_Sensor_Sensor
        public virtual System.Collections.Generic.ICollection<Observation> Observations { get; set; } // Observation.FK_Observation_Sensor
        public virtual System.Collections.Generic.ICollection<Progress> Progresses { get; set; } // Progress.FK_Progress_Sensor

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_Sensor_aspnet_Users
        public virtual DataSchema DataSchema { get; set; } // FK_Sensor_DataSchema
        public virtual DataSource DataSource { get; set; } // FK_Sensor_DataSource
        public virtual Phenomenon Phenomenon { get; set; } // FK_Sensor_Phenomenon

        public Sensor()
        {
            Id = System.Guid.NewGuid();
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
            DataLogs = new System.Collections.Generic.List<DataLog>();
            DataSourceTransformations = new System.Collections.Generic.List<DataSourceTransformation>();
            InstrumentSensors = new System.Collections.Generic.List<InstrumentSensor>();
            Observations = new System.Collections.Generic.List<Observation>();
            Progresses = new System.Collections.Generic.List<Progress>();
        }
    }

    // Site
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class Site
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public string Code { get; set; } // Code (length: 50)
        public string Name { get; set; } // Name (length: 150)
        public string Description { get; set; } // Description (length: 5000)
        public string Url { get; set; } // Url (length: 250)
        public System.DateTime? StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.Guid UserId { get; set; } // UserId
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<OrganisationSite> OrganisationSites { get; set; } // Organisation_Site.FK_Organisation_Site_Site
        public virtual System.Collections.Generic.ICollection<Station> Stations { get; set; } // Station.FK_Station_Site

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_Site_aspnet_Users

        public Site()
        {
            Id = System.Guid.NewGuid();
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
            OrganisationSites = new System.Collections.Generic.List<OrganisationSite>();
            Stations = new System.Collections.Generic.List<Station>();
        }
    }

    // Station
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class Station
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public string Code { get; set; } // Code (length: 50)
        public string Name { get; set; } // Name (length: 150)
        public string Description { get; set; } // Description (length: 5000)
        public string Url { get; set; } // Url (length: 250)
        public double? Latitude { get; set; } // Latitude
        public double? Longitude { get; set; } // Longitude
        public int? Elevation { get; set; } // Elevation
        public System.Guid? ProjectSiteId { get; set; } // ProjectSiteID
        public System.Guid UserId { get; set; } // UserId
        public System.Guid? SiteId { get; set; } // SiteID
        public System.DateTime? StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<OrganisationStation> OrganisationStations { get; set; } // Organisation_Station.FK_Organisation_Station_Station
        public virtual System.Collections.Generic.ICollection<ProjectStation> ProjectStations { get; set; } // Project_Station.FK_Project_Station_StationID
        public virtual System.Collections.Generic.ICollection<StationInstrument> StationInstruments { get; set; } // Station_Instrument.FK_Station_Instrument_Station

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_Station_aspnet_Users
        public virtual ProjectSite ProjectSite { get; set; } // FK_Station_ProjectSite
        public virtual Site Site { get; set; } // FK_Station_Site

        public Station()
        {
            Id = System.Guid.NewGuid();
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
            OrganisationStations = new System.Collections.Generic.List<OrganisationStation>();
            ProjectStations = new System.Collections.Generic.List<ProjectStation>();
            StationInstruments = new System.Collections.Generic.List<StationInstrument>();
        }
    }

    // Station_Instrument
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class StationInstrument
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid StationId { get; set; } // StationID
        public System.Guid InstrumentId { get; set; } // InstrumentID
        public System.DateTime? StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.Guid UserId { get; set; } // UserId
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_Station_Instrument_aspnet_Users
        public virtual Instrument Instrument { get; set; } // FK_Station_Instrument_Instrument
        public virtual Station Station { get; set; } // FK_Station_Instrument_Station

        public StationInstrument()
        {
            Id = System.Guid.NewGuid();
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
        }
    }

    // Status
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class Status
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public string Code { get; set; } // Code (length: 50)
        public string Name { get; set; } // Name (length: 150)
        public string Description { get; set; } // Description (length: 500)
        public System.Guid? UserId { get; set; } // UserId
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<DataLog> DataLogs { get; set; } // DataLog.FK_DataLog_Status
        public virtual System.Collections.Generic.ICollection<ImportBatch> ImportBatches { get; set; } // ImportBatch.FK_ImportBatch_Status
        public virtual System.Collections.Generic.ICollection<Observation> Observations { get; set; } // Observation.FK_Observation_Status

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_Status_aspnet_Users

        public Status()
        {
            Id = System.Guid.NewGuid();
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
            DataLogs = new System.Collections.Generic.List<DataLog>();
            ImportBatches = new System.Collections.Generic.List<ImportBatch>();
            Observations = new System.Collections.Generic.List<Observation>();
        }
    }

    // StatusReason
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class StatusReason
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public string Code { get; set; } // Code (length: 50)
        public string Name { get; set; } // Name (length: 150)
        public string Description { get; set; } // Description (length: 500)
        public System.Guid UserId { get; set; } // UserId
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<DataLog> DataLogs { get; set; } // DataLog.FK_DataLog_StatusReason
        public virtual System.Collections.Generic.ICollection<ImportBatch> ImportBatches { get; set; } // ImportBatch.FK_ImportBatch_StatusReason
        public virtual System.Collections.Generic.ICollection<Observation> Observations { get; set; } // Observation.FK_Observation_StatusReason

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_StatusReason_aspnet_Users

        public StatusReason()
        {
            Id = System.Guid.NewGuid();
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
            DataLogs = new System.Collections.Generic.List<DataLog>();
            ImportBatches = new System.Collections.Generic.List<ImportBatch>();
            Observations = new System.Collections.Generic.List<Observation>();
        }
    }

    // TransformationType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class TransformationType
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public string Code { get; set; } // Code (length: 50)
        public string Name { get; set; } // Name (length: 150)
        public string Description { get; set; } // Description (length: 500)
        public int? Iorder { get; set; } // iorder
        public System.Guid? UserId { get; set; } // UserId
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<DataSourceTransformation> DataSourceTransformations { get; set; } // DataSourceTransformation.FK_DataSourceTransformation_TransformationType

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_TransformationType_aspnet_Users

        public TransformationType()
        {
            Id = System.Guid.NewGuid();
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
            DataSourceTransformations = new System.Collections.Generic.List<DataSourceTransformation>();
        }
    }

    // UnitOfMeasure
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class UnitOfMeasure
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public string Code { get; set; } // Code (length: 50)
        public string Unit { get; set; } // Unit (length: 100)
        public string UnitSymbol { get; set; } // UnitSymbol (length: 20)
        public System.Guid UserId { get; set; } // UserId
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<PhenomenonUom> PhenomenonUoms { get; set; } // PhenomenonUOM.FK_PhenomenonUOM_UnitOfMeasure

        // Foreign keys
        public virtual AspnetUser AspnetUser { get; set; } // FK_UnitOfMeasure_aspnet_Users

        public UnitOfMeasure()
        {
            Id = System.Guid.NewGuid();
            AddedAt = System.DateTime.Now;
            UpdatedAt = System.DateTime.Now;
            PhenomenonUoms = new System.Collections.Generic.List<PhenomenonUom>();
        }
    }

    // vAuditLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VAuditLog
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public string Description { get; set; } // Description (Primary key) (length: 500)
        public System.Guid UserId { get; set; } // UserId (Primary key)
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt
        public string UserName { get; set; } // UserName (Primary key) (length: 256)
    }

    // vDataLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VDataLog
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.DateTime ImportDate { get; set; } // ImportDate (Primary key)
        public string SiteName { get; set; } // SiteName (Primary key) (length: 150)
        public string StationName { get; set; } // StationName (Primary key) (length: 150)
        public string InstrumentName { get; set; } // InstrumentName (Primary key) (length: 150)
        public System.Guid? SensorId { get; set; } // SensorID
        public string SensorName { get; set; } // SensorName (Primary key) (length: 150)
        public int SensorInvalid { get; set; } // SensorInvalid (Primary key)
        public System.DateTime? ValueDate { get; set; } // ValueDate
        public string InvalidDateValue { get; set; } // InvalidDateValue (length: 50)
        public int DateValueInvalid { get; set; } // DateValueInvalid (Primary key)
        public string InvalidTimeValue { get; set; } // InvalidTimeValue (length: 50)
        public int TimeValueInvalid { get; set; } // TimeValueInvalid (Primary key)
        public System.DateTime? ValueTime { get; set; } // ValueTime
        public double? RawValue { get; set; } // RawValue
        public string ValueText { get; set; } // ValueText (Primary key) (length: 50)
        public int RawValueInvalid { get; set; } // RawValueInvalid (Primary key)
        public double? DataValue { get; set; } // DataValue
        public string TransformValueText { get; set; } // TransformValueText (length: 50)
        public int DataValueInvalid { get; set; } // DataValueInvalid (Primary key)
        public System.Guid? PhenomenonOfferingId { get; set; } // PhenomenonOfferingID
        public int OfferingInvalid { get; set; } // OfferingInvalid (Primary key)
        public System.Guid? PhenomenonUomid { get; set; } // PhenomenonUOMID
        public int UomInvalid { get; set; } // UOMInvalid (Primary key)
        public string PhenomenonName { get; set; } // PhenomenonName (length: 150)
        public string OfferingName { get; set; } // OfferingName (length: 150)
        public string Unit { get; set; } // Unit (length: 100)
        public System.Guid? DataSourceTransformationId { get; set; } // DataSourceTransformationID
        public string Transformation { get; set; } // Transformation (length: 150)
        public System.Guid StatusId { get; set; } // StatusID (Primary key)
        public string Status { get; set; } // Status (Primary key) (length: 150)
        public System.Guid ImportBatchId { get; set; } // ImportBatchID (Primary key)
        public string RawFieldValue { get; set; } // RawFieldValue (Primary key) (length: 50)
        public string Comment { get; set; } // Comment (length: 250)
    }

    // vDataQuery
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VDataQuery
    {
        public System.Guid SiteId { get; set; } // SiteID (Primary key)
        public string SiteName { get; set; } // SiteName (Primary key) (length: 150)
        public string SiteDesc { get; set; } // SiteDesc (length: 5000)
        public System.Guid StationId { get; set; } // StationID (Primary key)
        public string StationName { get; set; } // StationName (Primary key) (length: 150)
        public string StationDesc { get; set; } // StationDesc (length: 5000)
        public System.Guid InstrumentId { get; set; } // InstrumentID (Primary key)
        public string InstrumentName { get; set; } // InstrumentName (Primary key) (length: 150)
        public string InstrumentDesc { get; set; } // InstrumentDesc (length: 5000)
        public System.Guid SensorId { get; set; } // SensorID (Primary key)
        public string Sensor { get; set; } // Sensor (Primary key) (length: 150)
        public string SensorDesc { get; set; } // SensorDesc (length: 5000)
        public System.Guid PhenomenonId { get; set; } // PhenomenonID (Primary key)
        public string Phenomenon { get; set; } // Phenomenon (Primary key) (length: 150)
        public string PhenomenonDesc { get; set; } // PhenomenonDesc (length: 5000)
        public System.Guid OfferingId { get; set; } // OfferingID (Primary key)
        public string Offering { get; set; } // Offering (Primary key) (length: 150)
        public string OfferingDesc { get; set; } // OfferingDesc (length: 5000)
    }

    // vDataSchema
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VDataSchema
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public string Code { get; set; } // Code (Primary key) (length: 50)
        public string Name { get; set; } // Name (Primary key) (length: 100)
        public string Description { get; set; } // Description (length: 5000)
        public System.Guid UserId { get; set; } // UserId (Primary key)
        public System.Guid DataSourceTypeId { get; set; } // DataSourceTypeID (Primary key)
        public int IgnoreFirst { get; set; } // IgnoreFirst (Primary key)
        public int IgnoreLast { get; set; } // IgnoreLast (Primary key)
        public string Delimiter { get; set; } // Delimiter (length: 3)
        public string Condition { get; set; } // Condition (length: 500)
        public string SplitSelector { get; set; } // SplitSelector (length: 50)
        public int? SplitIndex { get; set; } // SplitIndex
        public string DataSourceTypeCode { get; set; } // DataSourceTypeCode (Primary key) (length: 50)
        public string DataSourceTypeDesc { get; set; } // DataSourceTypeDesc (Primary key) (length: 500)
    }

    // vDataSource
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VDataSource
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public string Code { get; set; } // Code (Primary key) (length: 50)
        public string Name { get; set; } // Name (Primary key) (length: 150)
        public string Description { get; set; } // Description (length: 5000)
        public string Url { get; set; } // Url (Primary key) (length: 250)
        public double? DefaultNullValue { get; set; } // DefaultNullValue
        public double? ErrorEstimate { get; set; } // ErrorEstimate
        public int UpdateFreq { get; set; } // UpdateFreq (Primary key)
        public System.DateTime? StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime LastUpdate { get; set; } // LastUpdate (Primary key)
        public System.Guid? DataSchemaId { get; set; } // DataSchemaID
        public System.Guid UserId { get; set; } // UserId (Primary key)
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt
        public string DataSchemaName { get; set; } // DataSchemaName (length: 100)
    }

    // vDataSourceRole
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VDataSourceRole
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid DataSourceId { get; set; } // DataSourceID (Primary key)
        public System.Guid RoleId { get; set; } // RoleId (Primary key)
        public System.DateTime? DateStart { get; set; } // DateStart
        public System.DateTime? DateEnd { get; set; } // DateEnd
        public string RoleName { get; set; } // RoleName (length: 256)
        public bool? IsRoleReadOnly { get; set; } // IsRoleReadOnly
        public System.Guid? UserId { get; set; } // UserId
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt
        public string DataSourceCode { get; set; } // DataSourceCode (Primary key) (length: 50)
        public string DataSourceName { get; set; } // DataSourceName (Primary key) (length: 150)
        public string ActualRoleName { get; set; } // ActualRoleName (Primary key) (length: 256)
        public string RoleDescription { get; set; } // RoleDescription (length: 256)
    }

    // vDataSourceTransformation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VDataSourceTransformation
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid TransformationTypeId { get; set; } // TransformationTypeID (Primary key)
        public System.Guid PhenomenonId { get; set; } // PhenomenonID (Primary key)
        public System.DateTime StartDate { get; set; } // StartDate (Primary key)
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.Guid DataSourceId { get; set; } // DataSourceID (Primary key)
        public string Definition { get; set; } // Definition (Primary key) (length: 2147483647)
        public string PhenomenonName { get; set; } // PhenomenonName (Primary key) (length: 150)
        public string TransformationName { get; set; } // TransformationName (Primary key) (length: 150)
        public System.Guid? PhenomenonOfferingId { get; set; } // PhenomenonOfferingId
        public string OfferingName { get; set; } // OfferingName (length: 150)
        public System.Guid? UnitOfMeasureId { get; set; } // UnitOfMeasureId
        public string UnitofMeasure { get; set; } // UnitofMeasure (length: 100)
        public System.Guid? NewPhenomenonOfferingId { get; set; } // NewPhenomenonOfferingID
        public System.Guid? NewPhenomenonUomid { get; set; } // NewPhenomenonUOMID
        public int? Iorder { get; set; } // iorder
        public int? Rank { get; set; } // Rank
    }

    // vImportBatch
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VImportBatch
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public int Code { get; set; } // Code (Primary key)
        public System.Guid DataSourceId { get; set; } // DataSourceID (Primary key)
        public System.DateTime ImportDate { get; set; } // ImportDate (Primary key)
        public int Status { get; set; } // Status (Primary key)
        public string DataSourceName { get; set; } // DataSourceName (Primary key) (length: 150)
        public System.Guid UserId { get; set; } // UserId (Primary key)
        public string UserName { get; set; } // UserName (Primary key) (length: 256)
        public string StatusDescription { get; set; } // StatusDescription (length: 17)
        public string FileName { get; set; } // FileName (length: 250)
        public string LogFileName { get; set; } // LogFileName (length: 250)
    }

    // vInstrumentDataSource
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VInstrumentDataSource
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid InstrumentId { get; set; } // InstrumentID (Primary key)
        public System.Guid DataSourceId { get; set; } // DataSourceID (Primary key)
        public System.DateTime? StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.Guid UserId { get; set; } // UserId (Primary key)
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt
        public string InstrumentCode { get; set; } // InstrumentCode (Primary key) (length: 50)
        public string InstrumentName { get; set; } // InstrumentName (Primary key) (length: 150)
        public string DataSourceCode { get; set; } // DataSourceCode (Primary key) (length: 50)
        public string DataSourceName { get; set; } // DataSourceName (Primary key) (length: 150)
    }

    // vInstrumentOrganisation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VInstrumentOrganisation
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid OrganisationId { get; set; } // OrganisationID (Primary key)
        public string OrganisationCode { get; set; } // OrganisationCode (Primary key) (length: 50)
        public string OrganisationName { get; set; } // OrganisationName (Primary key) (length: 150)
        public System.Guid InstrumentId { get; set; } // InstrumentID (Primary key)
        public string InstrumentCode { get; set; } // InstrumentCode (Primary key) (length: 50)
        public string InstrumentName { get; set; } // InstrumentName (Primary key) (length: 150)
        public System.Guid OrganisationRoleId { get; set; } // OrganisationRoleID (Primary key)
        public string OrganisationRoleCode { get; set; } // OrganisationRoleCode (Primary key) (length: 50)
        public string OrganisationRoleName { get; set; } // OrganisationRoleName (Primary key) (length: 150)
        public System.DateTime? StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public string Level { get; set; } // Level (Primary key) (length: 10)
        public string LevelCode { get; set; } // LevelCode (Primary key) (length: 50)
        public string LevelName { get; set; } // LevelName (Primary key) (length: 150)
        public int Weight { get; set; } // Weight (Primary key)
        public bool? IsReadOnly { get; set; } // IsReadOnly
    }

    // vInstrumentSensor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VInstrumentSensor
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid InstrumentId { get; set; } // InstrumentID (Primary key)
        public System.Guid SensorId { get; set; } // SensorID (Primary key)
        public System.DateTime? StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.Guid UserId { get; set; } // UserId (Primary key)
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt
        public string InstrumentCode { get; set; } // InstrumentCode (Primary key) (length: 50)
        public string InstrumentName { get; set; } // InstrumentName (Primary key) (length: 150)
        public string SensorCode { get; set; } // SensorCode (Primary key) (length: 50)
        public string SensorName { get; set; } // SensorName (Primary key) (length: 150)
    }

    // vInventory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VInventory
    {
        public string Site { get; set; } // Site (Primary key) (length: 150)
        public string Station { get; set; } // Station (Primary key) (length: 150)
        public string Instrument { get; set; } // Instrument (Primary key) (length: 150)
        public string Sensor { get; set; } // Sensor (Primary key) (length: 150)
        public string Phenomenon { get; set; } // Phenomenon (Primary key) (length: 150)
        public System.DateTime? StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
    }

    // vModuleRoleModule
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VModuleRoleModule
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid RoleId { get; set; } // RoleId (Primary key)
        public System.Guid ModuleId { get; set; } // ModuleID (Primary key)
        public string Name { get; set; } // Name (Primary key) (length: 100)
        public string Description { get; set; } // Description (Primary key) (length: 500)
        public string Url { get; set; } // Url (Primary key) (length: 250)
        public int Icon { get; set; } // Icon (Primary key)
        public System.Guid? BaseModuleId { get; set; } // BaseModuleID
    }

    // vObservation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VObservation
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid SensorId { get; set; } // SensorID (Primary key)
        public System.Guid PhenomenonOfferingId { get; set; } // PhenomenonOfferingID (Primary key)
        public System.Guid PhenomenonUomid { get; set; } // PhenomenonUOMID (Primary key)
        public double? RawValue { get; set; } // RawValue
        public double? DataValue { get; set; } // DataValue
        public System.Guid ImportBatchId { get; set; } // ImportBatchID (Primary key)
        public System.DateTime ValueDate { get; set; } // ValueDate (Primary key)
        public string Comment { get; set; } // Comment (length: 250)
        public System.Guid UserId { get; set; } // UserId (Primary key)
        public string UserName { get; set; } // UserName (Primary key) (length: 256)
        public string StatusName { get; set; } // StatusName (length: 150)
        public string StatusReasonName { get; set; } // StatusReasonName (length: 150)
        public System.Guid OfferingId { get; set; } // OfferingID (Primary key)
        public string OfferingName { get; set; } // OfferingName (Primary key) (length: 150)
        public System.Guid UnitOfMeasureId { get; set; } // UnitOfMeasureID (Primary key)
        public string UnitOfMeasureUnit { get; set; } // UnitOfMeasureUnit (Primary key) (length: 100)
        public string UnitOfMeasureSymbol { get; set; } // UnitOfMeasureSymbol (Primary key) (length: 20)
        public string SensorName { get; set; } // SensorName (Primary key) (length: 150)
        public System.Guid PhenomenonId { get; set; } // PhenomenonID (Primary key)
        public string PhenomenonName { get; set; } // PhenomenonName (Primary key) (length: 150)
        public System.Guid DataSourceId { get; set; } // DataSourceID (Primary key)
        public string DataSourceName { get; set; } // DataSourceName (Primary key) (length: 150)
        public string DataSchemaName { get; set; } // DataSchemaName (length: 100)
        public System.Guid InstrumentId { get; set; } // InstrumentID (Primary key)
        public string InstrumentName { get; set; } // InstrumentName (Primary key) (length: 150)
        public System.Guid StationId { get; set; } // StationID (Primary key)
        public string StationName { get; set; } // StationName (Primary key) (length: 150)
        public System.Guid SiteId { get; set; } // SiteID (Primary key)
        public string SiteName { get; set; } // SiteName (Primary key) (length: 150)
        public System.Guid OrganisationId { get; set; } // OrganisationID (Primary key)
        public string OrganisationName { get; set; } // OrganisationName (Primary key) (length: 150)
    }

    // vObservationRoles
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VObservationRole
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid SensorId { get; set; } // SensorID (Primary key)
        public System.Guid PhenomenonOfferingId { get; set; } // PhenomenonOfferingID (Primary key)
        public System.Guid PhenomenonUomid { get; set; } // PhenomenonUOMID (Primary key)
        public double? RawValue { get; set; } // RawValue
        public double? DataValue { get; set; } // DataValue
        public System.Guid ImportBatchId { get; set; } // ImportBatchID (Primary key)
        public System.DateTime ValueDate { get; set; } // ValueDate (Primary key)
        public string Comment { get; set; } // Comment (length: 250)
        public System.Guid UserId { get; set; } // UserId (Primary key)
        public string UserName { get; set; } // UserName (Primary key) (length: 256)
        public string StatusName { get; set; } // StatusName (length: 150)
        public string StatusReasonName { get; set; } // StatusReasonName (length: 150)
        public System.Guid OfferingId { get; set; } // OfferingID (Primary key)
        public string OfferingName { get; set; } // OfferingName (Primary key) (length: 150)
        public System.Guid UnitOfMeasureId { get; set; } // UnitOfMeasureID (Primary key)
        public string UnitOfMeasureUnit { get; set; } // UnitOfMeasureUnit (Primary key) (length: 100)
        public string UnitOfMeasureSymbol { get; set; } // UnitOfMeasureSymbol (Primary key) (length: 20)
        public string SensorName { get; set; } // SensorName (Primary key) (length: 150)
        public System.Guid PhenomenonId { get; set; } // PhenomenonID (Primary key)
        public string PhenomenonName { get; set; } // PhenomenonName (Primary key) (length: 150)
        public System.Guid DataSourceId { get; set; } // DataSourceID (Primary key)
        public string DataSourceName { get; set; } // DataSourceName (Primary key) (length: 150)
        public string DataSchemaName { get; set; } // DataSchemaName (length: 100)
        public System.Guid InstrumentId { get; set; } // InstrumentID (Primary key)
        public string InstrumentName { get; set; } // InstrumentName (Primary key) (length: 150)
        public System.Guid StationId { get; set; } // StationID (Primary key)
        public string StationName { get; set; } // StationName (Primary key) (length: 150)
        public System.Guid SiteId { get; set; } // SiteID (Primary key)
        public string SiteName { get; set; } // SiteName (Primary key) (length: 150)
        public System.Guid OrganisationId { get; set; } // OrganisationID (Primary key)
        public string OrganisationName { get; set; } // OrganisationName (Primary key) (length: 150)
        public System.Guid RoleUserId { get; set; } // RoleUserId (Primary key)
    }

    // vObservationsList
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VObservationsList
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid SensorId { get; set; } // SensorID (Primary key)
        public System.DateTime ValueDate { get; set; } // ValueDate (Primary key)
        public double? RawValue { get; set; } // RawValue
        public double? DataValue { get; set; } // DataValue
        public string Comment { get; set; } // Comment (length: 250)
        public System.Guid PhenomenonOfferingId { get; set; } // PhenomenonOfferingID (Primary key)
        public System.Guid PhenomenonUomid { get; set; } // PhenomenonUOMID (Primary key)
        public System.Guid ImportBatchId { get; set; } // ImportBatchID (Primary key)
        public System.Guid? StatusId { get; set; } // StatusID
        public System.Guid? StatusReasonId { get; set; } // StatusReasonID
        public System.Guid? CorrelationId { get; set; } // CorrelationID
        public System.Guid UserId { get; set; } // UserId (Primary key)
        public System.DateTime AddedDate { get; set; } // AddedDate (Primary key)
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt
        public string SensorCode { get; set; } // SensorCode (Primary key) (length: 50)
        public string SensorName { get; set; } // SensorName (Primary key) (length: 150)
        public string PhenomenonCode { get; set; } // PhenomenonCode (Primary key) (length: 50)
        public string PhenomenonName { get; set; } // PhenomenonName (Primary key) (length: 150)
        public string OfferingCode { get; set; } // OfferingCode (Primary key) (length: 50)
        public string OfferingName { get; set; } // OfferingName (Primary key) (length: 150)
        public string UnitOfMeasureCode { get; set; } // UnitOfMeasureCode (Primary key) (length: 50)
        public string UnitOfMeasureUnit { get; set; } // UnitOfMeasureUnit (Primary key) (length: 100)
        public string StatusCode { get; set; } // StatusCode (length: 50)
        public string StatusName { get; set; } // StatusName (length: 150)
        public string StatusReasonCode { get; set; } // StatusReasonCode (length: 50)
        public string StatusReasonName { get; set; } // StatusReasonName (length: 150)
    }

    // vOrganisationInstrument
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VOrganisationInstrument
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid OrganisationId { get; set; } // OrganisationID (Primary key)
        public System.Guid InstrumentId { get; set; } // InstrumentID (Primary key)
        public System.Guid OrganisationRoleId { get; set; } // OrganisationRoleID (Primary key)
        public System.DateTime? StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.Guid UserId { get; set; } // UserId (Primary key)
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt
        public string OrganisationCode { get; set; } // OrganisationCode (Primary key) (length: 50)
        public string OrganisationName { get; set; } // OrganisationName (Primary key) (length: 150)
        public string InstrumentCode { get; set; } // InstrumentCode (Primary key) (length: 50)
        public string InstrumentName { get; set; } // InstrumentName (Primary key) (length: 150)
        public string OrganisationRoleCode { get; set; } // OrganisationRoleCode (Primary key) (length: 50)
        public string OrganisationRoleName { get; set; } // OrganisationRoleName (Primary key) (length: 150)
    }

    // vOrganisationSite
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VOrganisationSite
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid OrganisationId { get; set; } // OrganisationID (Primary key)
        public System.Guid SiteId { get; set; } // SiteID (Primary key)
        public System.Guid OrganisationRoleId { get; set; } // OrganisationRoleID (Primary key)
        public System.DateTime? StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.Guid UserId { get; set; } // UserId (Primary key)
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt
        public string OrganisationCode { get; set; } // OrganisationCode (Primary key) (length: 50)
        public string OrganisationName { get; set; } // OrganisationName (Primary key) (length: 150)
        public string SiteCode { get; set; } // SiteCode (Primary key) (length: 50)
        public string SiteName { get; set; } // SiteName (Primary key) (length: 150)
        public string OrganisationRoleCode { get; set; } // OrganisationRoleCode (Primary key) (length: 50)
        public string OrganisationRoleName { get; set; } // OrganisationRoleName (Primary key) (length: 150)
    }

    // vOrganisationStation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VOrganisationStation
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid OrganisationId { get; set; } // OrganisationID (Primary key)
        public System.Guid StationId { get; set; } // StationID (Primary key)
        public System.Guid OrganisationRoleId { get; set; } // OrganisationRoleID (Primary key)
        public System.DateTime? StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.Guid UserId { get; set; } // UserId (Primary key)
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt
        public string OrganisationCode { get; set; } // OrganisationCode (Primary key) (length: 50)
        public string OrganisationName { get; set; } // OrganisationName (Primary key) (length: 150)
        public string StationCode { get; set; } // StationCode (Primary key) (length: 50)
        public string StationName { get; set; } // StationName (Primary key) (length: 150)
        public string OrganisationRoleCode { get; set; } // OrganisationRoleCode (Primary key) (length: 50)
        public string OrganisationRoleName { get; set; } // OrganisationRoleName (Primary key) (length: 150)
    }

    // vProject
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VProject
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid? ProgrammeId { get; set; } // ProgrammeID
        public string Code { get; set; } // Code (Primary key) (length: 50)
        public string Name { get; set; } // Name (Primary key) (length: 150)
        public string Description { get; set; } // Description (length: 5000)
        public string Url { get; set; } // Url (length: 250)
        public System.DateTime? StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.Guid UserId { get; set; } // UserId (Primary key)
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt
        public string ProgrammeCode { get; set; } // ProgrammeCode (length: 50)
        public string ProgrammeName { get; set; } // ProgrammeName (length: 150)
    }

    // vProjectSite
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VProjectSite
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public string Code { get; set; } // Code (Primary key) (length: 50)
        public string Name { get; set; } // Name (Primary key) (length: 150)
        public string Description { get; set; } // Description (Primary key) (length: 5000)
        public System.Guid OrganisationId { get; set; } // OrganisationID (Primary key)
        public System.Guid UserId { get; set; } // UserId (Primary key)
        public string OrganisationName { get; set; } // OrganisationName (Primary key) (length: 203)
    }

    // vProjectStation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VProjectStation
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid ProjectId { get; set; } // ProjectID (Primary key)
        public System.Guid StationId { get; set; } // StationID (Primary key)
        public System.DateTime? StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.Guid UserId { get; set; } // UserId (Primary key)
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt
        public string ProjectCode { get; set; } // ProjectCode (Primary key) (length: 50)
        public string ProjectName { get; set; } // ProjectName (Primary key) (length: 150)
        public string StationCode { get; set; } // StationCode (Primary key) (length: 50)
        public string StationName { get; set; } // StationName (Primary key) (length: 150)
    }

    // vSchemaColumn
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VSchemaColumn
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid DataSchemaId { get; set; } // DataSchemaID (Primary key)
        public int Number { get; set; } // Number (Primary key)
        public string Name { get; set; } // Name (Primary key) (length: 100)
        public System.Guid SchemaColumnTypeId { get; set; } // SchemaColumnTypeID (Primary key)
        public int? Width { get; set; } // Width
        public string Format { get; set; } // Format (length: 50)
        public System.Guid? PhenomenonId { get; set; } // PhenomenonID
        public System.Guid? PhenomenonOfferingId { get; set; } // PhenomenonOfferingID
        public System.Guid? PhenomenonUomid { get; set; } // PhenomenonUOMID
        public string EmptyValue { get; set; } // EmptyValue (length: 50)
        public string FixedTime { get; set; } // FixedTime (length: 10)
        public System.Guid UserId { get; set; } // UserId (Primary key)
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt
        public string SchemaColumnTypeName { get; set; } // SchemaColumnTypeName (Primary key) (length: 50)
        public string PhenomenonName { get; set; } // PhenomenonName (length: 150)
        public string OfferingName { get; set; } // OfferingName (length: 150)
        public string UnitOfMeasureUnit { get; set; } // UnitOfMeasureUnit (length: 100)
    }

    // vSensor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VSensor
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public string Code { get; set; } // Code (Primary key) (length: 50)
        public string Name { get; set; } // Name (Primary key) (length: 150)
        public string Description { get; set; } // Description (length: 5000)
        public string Url { get; set; } // Url (length: 250)
        public System.Guid DataSourceId { get; set; } // DataSourceID (Primary key)
        public System.Guid PhenomenonId { get; set; } // PhenomenonID (Primary key)
        public string PhenomenonName { get; set; } // PhenomenonName (Primary key) (length: 150)
        public System.Guid UserId { get; set; } // UserId (Primary key)
        public string Site { get; set; } // Site (Primary key) (length: 150)
        public string Station { get; set; } // Station (Primary key) (length: 150)
        public string Instrument { get; set; } // Instrument (Primary key) (length: 150)
        public string DataSourceName { get; set; } // DataSourceName (Primary key) (length: 150)
        public System.Guid? DataSchemaId { get; set; } // DataSchemaID
        public string DataSchemaName { get; set; } // DataSchemaName (length: 100)
    }

    // vSiteOrganisation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VSiteOrganisation
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid OrganisationId { get; set; } // OrganisationID (Primary key)
        public string OrganisationCode { get; set; } // OrganisationCode (Primary key) (length: 50)
        public string OrganisationName { get; set; } // OrganisationName (Primary key) (length: 150)
        public System.Guid? SiteId { get; set; } // SiteID
        public string SiteCode { get; set; } // SiteCode (Primary key) (length: 50)
        public string SiteName { get; set; } // SiteName (Primary key) (length: 150)
        public System.Guid OrganisationRoleId { get; set; } // OrganisationRoleID (Primary key)
        public string OrganisationRoleCode { get; set; } // OrganisationRoleCode (Primary key) (length: 50)
        public string OrganisationRoleName { get; set; } // OrganisationRoleName (Primary key) (length: 150)
        public System.DateTime? StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public string Level { get; set; } // Level (Primary key) (length: 10)
        public string LevelCode { get; set; } // LevelCode (Primary key) (length: 50)
        public string LevelName { get; set; } // LevelName (Primary key) (length: 150)
        public int Weight { get; set; } // Weight (Primary key)
        public bool? IsReadOnly { get; set; } // IsReadOnly
    }

    // vStation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VStation
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public string Code { get; set; } // Code (Primary key) (length: 50)
        public string Name { get; set; } // Name (Primary key) (length: 150)
        public string Description { get; set; } // Description (length: 5000)
        public string Url { get; set; } // Url (length: 250)
        public double? Latitude { get; set; } // Latitude
        public double? Longitude { get; set; } // Longitude
        public int? Elevation { get; set; } // Elevation
        public System.Guid? ProjectSiteId { get; set; } // ProjectSiteID
        public System.Guid UserId { get; set; } // UserId (Primary key)
        public System.Guid? SiteId { get; set; } // SiteID
        public System.DateTime? StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt
        public string ProjectSiteName { get; set; } // ProjectSiteName (length: 203)
        public string SiteCode { get; set; } // SiteCode (length: 50)
        public string SiteName { get; set; } // SiteName (length: 150)
    }

    // vStationInstrument
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VStationInstrument
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid StationId { get; set; } // StationID (Primary key)
        public System.Guid InstrumentId { get; set; } // InstrumentID (Primary key)
        public System.DateTime? StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.Guid UserId { get; set; } // UserId (Primary key)
        public System.DateTime? AddedAt { get; set; } // AddedAt
        public System.DateTime? UpdatedAt { get; set; } // UpdatedAt
        public string StationCode { get; set; } // StationCode (Primary key) (length: 50)
        public string StationName { get; set; } // StationName (Primary key) (length: 150)
        public string InstrumentCode { get; set; } // InstrumentCode (Primary key) (length: 50)
        public string InstrumentName { get; set; } // InstrumentName (Primary key) (length: 150)
    }

    // vStationOrganisation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VStationOrganisation
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid OrganisationId { get; set; } // OrganisationID (Primary key)
        public string OrganisationCode { get; set; } // OrganisationCode (Primary key) (length: 50)
        public string OrganisationName { get; set; } // OrganisationName (Primary key) (length: 150)
        public System.Guid StationId { get; set; } // StationID (Primary key)
        public string StationCode { get; set; } // StationCode (Primary key) (length: 50)
        public string StationName { get; set; } // StationName (Primary key) (length: 150)
        public System.Guid OrganisationRoleId { get; set; } // OrganisationRoleID (Primary key)
        public string OrganisationRoleCode { get; set; } // OrganisationRoleCode (Primary key) (length: 50)
        public string OrganisationRoleName { get; set; } // OrganisationRoleName (Primary key) (length: 150)
        public System.DateTime? StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public string Level { get; set; } // Level (Primary key) (length: 10)
        public string LevelCode { get; set; } // LevelCode (Primary key) (length: 50)
        public string LevelName { get; set; } // LevelName (Primary key) (length: 150)
        public int Weight { get; set; } // Weight (Primary key)
        public bool? IsReadOnly { get; set; } // IsReadOnly
    }

    // vUserInfo
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VUserInfo
    {
        public System.Guid UserId { get; set; } // UserId (Primary key)
        public System.DateTime LastActivityDate { get; set; } // LastActivityDate (Primary key)
        public string UserName { get; set; } // UserName (Primary key) (length: 256)
        public System.DateTime CreateDate { get; set; } // CreateDate (Primary key)
        public string Email { get; set; } // Email (length: 256)
        public string Comment { get; set; } // Comment (length: 1073741823)
    }

    #endregion

    #region POCO Configuration

    // aspnet_Applications
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetApplicationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AspnetApplication>
    {
        public AspnetApplicationConfiguration()
            : this("dbo")
        {
        }

        public AspnetApplicationConfiguration(string schema)
        {
            ToTable("aspnet_Applications", schema);
            HasKey(x => x.ApplicationId);

            Property(x => x.ApplicationName).HasColumnName(@"ApplicationName").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
            Property(x => x.LoweredApplicationName).HasColumnName(@"LoweredApplicationName").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
            Property(x => x.ApplicationId).HasColumnName(@"ApplicationId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
        }
    }

    // aspnet_Membership
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetMembershipConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AspnetMembership>
    {
        public AspnetMembershipConfiguration()
            : this("dbo")
        {
        }

        public AspnetMembershipConfiguration(string schema)
        {
            ToTable("aspnet_Membership", schema);
            HasKey(x => x.UserId);

            Property(x => x.ApplicationId).HasColumnName(@"ApplicationId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Password).HasColumnName(@"Password").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.PasswordFormat).HasColumnName(@"PasswordFormat").HasColumnType("int").IsRequired();
            Property(x => x.PasswordSalt).HasColumnName(@"PasswordSalt").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.MobilePin).HasColumnName(@"MobilePIN").HasColumnType("nvarchar").IsOptional().HasMaxLength(16);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.LoweredEmail).HasColumnName(@"LoweredEmail").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.PasswordQuestion).HasColumnName(@"PasswordQuestion").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.PasswordAnswer).HasColumnName(@"PasswordAnswer").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.IsApproved).HasColumnName(@"IsApproved").HasColumnType("bit").IsRequired();
            Property(x => x.IsLockedOut).HasColumnName(@"IsLockedOut").HasColumnType("bit").IsRequired();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastLoginDate).HasColumnName(@"LastLoginDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastPasswordChangedDate).HasColumnName(@"LastPasswordChangedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastLockoutDate).HasColumnName(@"LastLockoutDate").HasColumnType("datetime").IsRequired();
            Property(x => x.FailedPasswordAttemptCount).HasColumnName(@"FailedPasswordAttemptCount").HasColumnType("int").IsRequired();
            Property(x => x.FailedPasswordAttemptWindowStart).HasColumnName(@"FailedPasswordAttemptWindowStart").HasColumnType("datetime").IsRequired();
            Property(x => x.FailedPasswordAnswerAttemptCount).HasColumnName(@"FailedPasswordAnswerAttemptCount").HasColumnType("int").IsRequired();
            Property(x => x.FailedPasswordAnswerAttemptWindowStart).HasColumnName(@"FailedPasswordAnswerAttemptWindowStart").HasColumnType("datetime").IsRequired();
            Property(x => x.Comment).HasColumnName(@"Comment").HasColumnType("ntext").IsOptional().IsMaxLength();

            // Foreign keys
            HasRequired(a => a.AspnetApplication).WithMany(b => b.AspnetMemberships).HasForeignKey(c => c.ApplicationId).WillCascadeOnDelete(false); // FK__aspnet_Me__Appli__25C68D63
            HasRequired(a => a.AspnetUser).WithOptional(b => b.AspnetMembership).WillCascadeOnDelete(false); // FK__aspnet_Me__UserI__33208881
        }
    }

    // aspnet_Paths
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetPathConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AspnetPath>
    {
        public AspnetPathConfiguration()
            : this("dbo")
        {
        }

        public AspnetPathConfiguration(string schema)
        {
            ToTable("aspnet_Paths", schema);
            HasKey(x => x.PathId);

            Property(x => x.ApplicationId).HasColumnName(@"ApplicationId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.PathId).HasColumnName(@"PathId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Path).HasColumnName(@"Path").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
            Property(x => x.LoweredPath).HasColumnName(@"LoweredPath").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);

            // Foreign keys
            HasRequired(a => a.AspnetApplication).WithMany(b => b.AspnetPaths).HasForeignKey(c => c.ApplicationId).WillCascadeOnDelete(false); // FK__aspnet_Pa__Appli__26BAB19C
        }
    }

    // aspnet_PersonalizationAllUsers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetPersonalizationAllUserConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AspnetPersonalizationAllUser>
    {
        public AspnetPersonalizationAllUserConfiguration()
            : this("dbo")
        {
        }

        public AspnetPersonalizationAllUserConfiguration(string schema)
        {
            ToTable("aspnet_PersonalizationAllUsers", schema);
            HasKey(x => x.PathId);

            Property(x => x.PathId).HasColumnName(@"PathId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PageSettings).HasColumnName(@"PageSettings").HasColumnType("image").IsRequired().HasMaxLength(2147483647);
            Property(x => x.LastUpdatedDate).HasColumnName(@"LastUpdatedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AspnetPath).WithOptional(b => b.AspnetPersonalizationAllUser).WillCascadeOnDelete(false); // FK__aspnet_Pe__PathI__29971E47
        }
    }

    // aspnet_PersonalizationPerUser
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetPersonalizationPerUserConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AspnetPersonalizationPerUser>
    {
        public AspnetPersonalizationPerUserConfiguration()
            : this("dbo")
        {
        }

        public AspnetPersonalizationPerUserConfiguration(string schema)
        {
            ToTable("aspnet_PersonalizationPerUser", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PathId).HasColumnName(@"PathId").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.PageSettings).HasColumnName(@"PageSettings").HasColumnType("image").IsRequired().HasMaxLength(2147483647);
            Property(x => x.LastUpdatedDate).HasColumnName(@"LastUpdatedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.AspnetPath).WithMany(b => b.AspnetPersonalizationPerUsers).HasForeignKey(c => c.PathId).WillCascadeOnDelete(false); // FK__aspnet_Pe__PathI__2A8B4280
            HasOptional(a => a.AspnetUser).WithMany(b => b.AspnetPersonalizationPerUsers).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK__aspnet_Pe__UserI__3508D0F3
        }
    }

    // aspnet_Profile
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetProfileConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AspnetProfile>
    {
        public AspnetProfileConfiguration()
            : this("dbo")
        {
        }

        public AspnetProfileConfiguration(string schema)
        {
            ToTable("aspnet_Profile", schema);
            HasKey(x => x.UserId);

            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PropertyNames).HasColumnName(@"PropertyNames").HasColumnType("ntext").IsRequired().IsMaxLength();
            Property(x => x.PropertyValuesString).HasColumnName(@"PropertyValuesString").HasColumnType("ntext").IsRequired().IsMaxLength();
            Property(x => x.PropertyValuesBinary).HasColumnName(@"PropertyValuesBinary").HasColumnType("image").IsRequired().HasMaxLength(2147483647);
            Property(x => x.LastUpdatedDate).HasColumnName(@"LastUpdatedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AspnetUser).WithOptional(b => b.AspnetProfile).WillCascadeOnDelete(false); // FK__aspnet_Pr__UserI__2B7F66B9
        }
    }

    // aspnet_Roles
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetRoleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AspnetRole>
    {
        public AspnetRoleConfiguration()
            : this("dbo")
        {
        }

        public AspnetRoleConfiguration(string schema)
        {
            ToTable("aspnet_Roles", schema);
            HasKey(x => x.RoleId);

            Property(x => x.ApplicationId).HasColumnName(@"ApplicationId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RoleName).HasColumnName(@"RoleName").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
            Property(x => x.LoweredRoleName).HasColumnName(@"LoweredRoleName").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);

            // Foreign keys
            HasRequired(a => a.AspnetApplication).WithMany(b => b.AspnetRoles).HasForeignKey(c => c.ApplicationId).WillCascadeOnDelete(false); // FK__aspnet_Ro__Appli__27AED5D5
            HasMany(t => t.AspnetUsers).WithMany(t => t.AspnetRoles).Map(m =>
            {
                m.ToTable("aspnet_UsersInRoles", "dbo");
                m.MapLeftKey("RoleId");
                m.MapRightKey("UserId");
            });
        }
    }

    // aspnet_SchemaVersions
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetSchemaVersionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AspnetSchemaVersion>
    {
        public AspnetSchemaVersionConfiguration()
            : this("dbo")
        {
        }

        public AspnetSchemaVersionConfiguration(string schema)
        {
            ToTable("aspnet_SchemaVersions", schema);
            HasKey(x => new { x.Feature, x.CompatibleSchemaVersion });

            Property(x => x.Feature).HasColumnName(@"Feature").HasColumnType("nvarchar").IsRequired().HasMaxLength(128).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CompatibleSchemaVersion).HasColumnName(@"CompatibleSchemaVersion").HasColumnType("nvarchar").IsRequired().HasMaxLength(128).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IsCurrentVersion).HasColumnName(@"IsCurrentVersion").HasColumnType("bit").IsRequired();
        }
    }

    // aspnet_Users
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetUserConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AspnetUser>
    {
        public AspnetUserConfiguration()
            : this("dbo")
        {
        }

        public AspnetUserConfiguration(string schema)
        {
            ToTable("aspnet_Users", schema);
            HasKey(x => x.UserId);

            Property(x => x.ApplicationId).HasColumnName(@"ApplicationId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
            Property(x => x.LoweredUserName).HasColumnName(@"LoweredUserName").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
            Property(x => x.MobileAlias).HasColumnName(@"MobileAlias").HasColumnType("nvarchar").IsOptional().HasMaxLength(16);
            Property(x => x.IsAnonymous).HasColumnName(@"IsAnonymous").HasColumnType("bit").IsRequired();
            Property(x => x.LastActivityDate).HasColumnName(@"LastActivityDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AspnetApplication).WithMany(b => b.AspnetUsers).HasForeignKey(c => c.ApplicationId).WillCascadeOnDelete(false); // FK__aspnet_Us__Appli__28A2FA0E
        }
    }

    // aspnet_WebEvent_Events
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetWebEventEventConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AspnetWebEventEvent>
    {
        public AspnetWebEventEventConfiguration()
            : this("dbo")
        {
        }

        public AspnetWebEventEventConfiguration(string schema)
        {
            ToTable("aspnet_WebEvent_Events", schema);
            HasKey(x => x.EventId);

            Property(x => x.EventId).HasColumnName(@"EventId").HasColumnType("char").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EventTimeUtc).HasColumnName(@"EventTimeUtc").HasColumnType("datetime").IsRequired();
            Property(x => x.EventTime).HasColumnName(@"EventTime").HasColumnType("datetime").IsRequired();
            Property(x => x.EventType).HasColumnName(@"EventType").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
            Property(x => x.EventSequence).HasColumnName(@"EventSequence").HasColumnType("decimal").IsRequired().HasPrecision(19,0);
            Property(x => x.EventOccurrence).HasColumnName(@"EventOccurrence").HasColumnType("decimal").IsRequired().HasPrecision(19,0);
            Property(x => x.EventCode).HasColumnName(@"EventCode").HasColumnType("int").IsRequired();
            Property(x => x.EventDetailCode).HasColumnName(@"EventDetailCode").HasColumnType("int").IsRequired();
            Property(x => x.Message).HasColumnName(@"Message").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.ApplicationPath).HasColumnName(@"ApplicationPath").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.ApplicationVirtualPath).HasColumnName(@"ApplicationVirtualPath").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.MachineName).HasColumnName(@"MachineName").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
            Property(x => x.RequestUrl).HasColumnName(@"RequestUrl").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.ExceptionType).HasColumnName(@"ExceptionType").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.Details).HasColumnName(@"Details").HasColumnType("ntext").IsOptional().IsMaxLength();
        }
    }

    // AuditLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AuditLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AuditLog>
    {
        public AuditLogConfiguration()
            : this("dbo")
        {
        }

        public AuditLogConfiguration(string schema)
        {
            ToTable("AuditLog", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(500);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasRequired(a => a.AspnetUser).WithMany(b => b.AuditLogs).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_AuditLog_aspnet_Users
        }
    }

    // DataLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class DataLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DataLog>
    {
        public DataLogConfiguration()
            : this("dbo")
        {
        }

        public DataLogConfiguration(string schema)
        {
            ToTable("DataLog", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SensorId).HasColumnName(@"SensorID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.ImportDate).HasColumnName(@"ImportDate").HasColumnType("datetime").IsRequired();
            Property(x => x.ValueDate).HasColumnName(@"ValueDate").HasColumnType("datetime").IsOptional();
            Property(x => x.ValueTime).HasColumnName(@"ValueTime").HasColumnType("datetime").IsOptional();
            Property(x => x.ValueText).HasColumnName(@"ValueText").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.TransformValueText).HasColumnName(@"TransformValueText").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.RawValue).HasColumnName(@"RawValue").HasColumnType("float").IsOptional();
            Property(x => x.DataValue).HasColumnName(@"DataValue").HasColumnType("float").IsOptional();
            Property(x => x.Comment).HasColumnName(@"Comment").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(250);
            Property(x => x.InvalidDateValue).HasColumnName(@"InvalidDateValue").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.InvalidTimeValue).HasColumnName(@"InvalidTimeValue").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.InvalidOffering).HasColumnName(@"InvalidOffering").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.InvalidUom).HasColumnName(@"InvalidUOM").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.DataSourceTransformationId).HasColumnName(@"DataSourceTransformationID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.StatusId).HasColumnName(@"StatusID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.StatusReasonId).HasColumnName(@"StatusReasonID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.ImportStatus).HasColumnName(@"ImportStatus").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(500);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.PhenomenonOfferingId).HasColumnName(@"PhenomenonOfferingID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.PhenomenonUomid).HasColumnName(@"PhenomenonUOMID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.ImportBatchId).HasColumnName(@"ImportBatchID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.RawRecordData).HasColumnName(@"RawRecordData").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(500);
            Property(x => x.RawFieldValue).HasColumnName(@"RawFieldValue").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.CorrelationId).HasColumnName(@"CorrelationID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasOptional(a => a.AspnetUser).WithMany(b => b.DataLogs).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_DataLog_aspnet_Users
            HasOptional(a => a.DataSourceTransformation).WithMany(b => b.DataLogs).HasForeignKey(c => c.DataSourceTransformationId).WillCascadeOnDelete(false); // FK_DataLog_DataSourceTransformation
            HasOptional(a => a.PhenomenonOffering).WithMany(b => b.DataLogs).HasForeignKey(c => c.PhenomenonOfferingId).WillCascadeOnDelete(false); // FK_DataLog_PhenomenonOffering
            HasOptional(a => a.PhenomenonUom).WithMany(b => b.DataLogs).HasForeignKey(c => c.PhenomenonUomid).WillCascadeOnDelete(false); // FK_DataLog_PhenomenonUOM
            HasOptional(a => a.Sensor).WithMany(b => b.DataLogs).HasForeignKey(c => c.SensorId).WillCascadeOnDelete(false); // FK_DataLog_Sensor
            HasOptional(a => a.StatusReason).WithMany(b => b.DataLogs).HasForeignKey(c => c.StatusReasonId).WillCascadeOnDelete(false); // FK_DataLog_StatusReason
            HasRequired(a => a.ImportBatch).WithMany(b => b.DataLogs).HasForeignKey(c => c.ImportBatchId).WillCascadeOnDelete(false); // FK_DataLog_ImportBatch
            HasRequired(a => a.Status).WithMany(b => b.DataLogs).HasForeignKey(c => c.StatusId).WillCascadeOnDelete(false); // FK_DataLog_Status
        }
    }

    // DataSchema
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class DataSchemaConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DataSchema>
    {
        public DataSchemaConfiguration()
            : this("dbo")
        {
        }

        public DataSchemaConfiguration(string schema)
        {
            ToTable("DataSchema", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5000);
            Property(x => x.DataSourceTypeId).HasColumnName(@"DataSourceTypeID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.IgnoreFirst).HasColumnName(@"IgnoreFirst").HasColumnType("int").IsRequired();
            Property(x => x.IgnoreLast).HasColumnName(@"IgnoreLast").HasColumnType("int").IsRequired();
            Property(x => x.Condition).HasColumnName(@"Condition").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(500);
            Property(x => x.DataSchema_).HasColumnName(@"DataSchema").HasColumnType("text").IsOptional().IsUnicode(false).HasMaxLength(2147483647);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.Delimiter).HasColumnName(@"Delimiter").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(3);
            Property(x => x.SplitSelector).HasColumnName(@"SplitSelector").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.SplitIndex).HasColumnName(@"SplitIndex").HasColumnType("int").IsOptional();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasRequired(a => a.AspnetUser).WithMany(b => b.DataSchemas).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_DataSchema_aspnet_Users
            HasRequired(a => a.DataSourceType).WithMany(b => b.DataSchemas).HasForeignKey(c => c.DataSourceTypeId).WillCascadeOnDelete(false); // FK_DataSchema_DataSourceType
        }
    }

    // DataSource
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class DataSourceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DataSource>
    {
        public DataSourceConfiguration()
            : this("dbo")
        {
        }

        public DataSourceConfiguration(string schema)
        {
            ToTable("DataSource", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5000);
            Property(x => x.Url).HasColumnName(@"Url").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(250);
            Property(x => x.DefaultNullValue).HasColumnName(@"DefaultNullValue").HasColumnType("float").IsOptional();
            Property(x => x.ErrorEstimate).HasColumnName(@"ErrorEstimate").HasColumnType("float").IsOptional();
            Property(x => x.UpdateFreq).HasColumnName(@"UpdateFreq").HasColumnType("int").IsRequired();
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.LastUpdate).HasColumnName(@"LastUpdate").HasColumnType("datetime").IsRequired();
            Property(x => x.DataSchemaId).HasColumnName(@"DataSchemaID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasOptional(a => a.DataSchema).WithMany(b => b.DataSources).HasForeignKey(c => c.DataSchemaId).WillCascadeOnDelete(false); // FK_DataSource_DataSchema
            HasRequired(a => a.AspnetUser).WithMany(b => b.DataSources).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_DataSource_aspnet_Users
        }
    }

    // DataSourceRole
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class DataSourceRoleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DataSourceRole>
    {
        public DataSourceRoleConfiguration()
            : this("dbo")
        {
        }

        public DataSourceRoleConfiguration(string schema)
        {
            ToTable("DataSourceRole", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DataSourceId).HasColumnName(@"DataSourceID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.DateStart).HasColumnName(@"DateStart").HasColumnType("datetime").IsOptional();
            Property(x => x.DateEnd).HasColumnName(@"DateEnd").HasColumnType("datetime").IsOptional();
            Property(x => x.RoleName).HasColumnName(@"RoleName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(256);
            Property(x => x.IsRoleReadOnly).HasColumnName(@"IsRoleReadOnly").HasColumnType("bit").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasOptional(a => a.AspnetUser).WithMany(b => b.DataSourceRoles).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_DataSourceRole_aspnet_Users
            HasRequired(a => a.AspnetRole).WithMany(b => b.DataSourceRoles).HasForeignKey(c => c.RoleId).WillCascadeOnDelete(false); // FK_DataSourceRole_aspnet_Roles
            HasRequired(a => a.DataSource).WithMany(b => b.DataSourceRoles).HasForeignKey(c => c.DataSourceId).WillCascadeOnDelete(false); // FK_DataSourceRole_DataSource
        }
    }

    // DataSourceTransformation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class DataSourceTransformationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DataSourceTransformation>
    {
        public DataSourceTransformationConfiguration()
            : this("dbo")
        {
        }

        public DataSourceTransformationConfiguration(string schema)
        {
            ToTable("DataSourceTransformation", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TransformationTypeId).HasColumnName(@"TransformationTypeID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.PhenomenonId).HasColumnName(@"PhenomenonID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.PhenomenonOfferingId).HasColumnName(@"PhenomenonOfferingID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.PhenomenonUomid).HasColumnName(@"PhenomenonUOMID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsRequired();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.DataSourceId).HasColumnName(@"DataSourceID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.Definition).HasColumnName(@"Definition").HasColumnType("text").IsRequired().IsUnicode(false).HasMaxLength(2147483647);
            Property(x => x.NewPhenomenonOfferingId).HasColumnName(@"NewPhenomenonOfferingID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.NewPhenomenonUomid).HasColumnName(@"NewPhenomenonUOMID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.Rank).HasColumnName(@"Rank").HasColumnType("int").IsOptional();
            Property(x => x.SensorId).HasColumnName(@"SensorID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasOptional(a => a.AspnetUser).WithMany(b => b.DataSourceTransformations).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_DataSourceTransformation_aspnet_Users
            HasOptional(a => a.NewPhenomenonOffering).WithMany(b => b.NewPhenomenonOffering).HasForeignKey(c => c.NewPhenomenonOfferingId).WillCascadeOnDelete(false); // FK_DataSourceTransformation_NewPhenomenonOffering
            HasOptional(a => a.NewPhenomenonUom).WithMany(b => b.NewPhenomenonUom).HasForeignKey(c => c.NewPhenomenonUomid).WillCascadeOnDelete(false); // FK_DataSourceTransformation_NewPhenomenonUOM
            HasOptional(a => a.PhenomenonOffering_PhenomenonOfferingId).WithMany(b => b.PhenomenonOfferingId).HasForeignKey(c => c.PhenomenonOfferingId).WillCascadeOnDelete(false); // FK_DataSourceTransformation_PhenomenonOffering
            HasOptional(a => a.PhenomenonUom_PhenomenonUomid).WithMany(b => b.PhenomenonUomid).HasForeignKey(c => c.PhenomenonUomid).WillCascadeOnDelete(false); // FK_DataSourceTransformation_PhenomenonUOM
            HasOptional(a => a.Sensor).WithMany(b => b.DataSourceTransformations).HasForeignKey(c => c.SensorId).WillCascadeOnDelete(false); // FK_DataSourceTransformation_Sensor
            HasRequired(a => a.DataSource).WithMany(b => b.DataSourceTransformations).HasForeignKey(c => c.DataSourceId).WillCascadeOnDelete(false); // FK_DataSourceTransformation_DataSource
            HasRequired(a => a.Phenomenon).WithMany(b => b.DataSourceTransformations).HasForeignKey(c => c.PhenomenonId).WillCascadeOnDelete(false); // FK_DataSourceTransformation_Phenomenon
            HasRequired(a => a.TransformationType).WithMany(b => b.DataSourceTransformations).HasForeignKey(c => c.TransformationTypeId).WillCascadeOnDelete(false); // FK_DataSourceTransformation_TransformationType
        }
    }

    // DataSourceType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class DataSourceTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DataSourceType>
    {
        public DataSourceTypeConfiguration()
            : this("dbo")
        {
        }

        public DataSourceTypeConfiguration(string schema)
        {
            ToTable("DataSourceType", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(500);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasOptional(a => a.AspnetUser).WithMany(b => b.DataSourceTypes).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_DataSourceType_aspnet_Users
        }
    }

    // ImportBatch
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class ImportBatchConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ImportBatch>
    {
        public ImportBatchConfiguration()
            : this("dbo")
        {
        }

        public ImportBatchConfiguration(string schema)
        {
            ToTable("ImportBatch", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.DataSourceId).HasColumnName(@"DataSourceID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.ImportDate).HasColumnName(@"ImportDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Status).HasColumnName(@"Status").HasColumnType("int").IsRequired();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.FileName).HasColumnName(@"FileName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(250);
            Property(x => x.LogFileName).HasColumnName(@"LogFileName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(250);
            Property(x => x.Comment).HasColumnName(@"Comment").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(8000);
            Property(x => x.StatusId).HasColumnName(@"StatusID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.StatusReasonId).HasColumnName(@"StatusReasonID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.SourceFile).HasColumnName(@"SourceFile").HasColumnType("varbinary").IsOptional();
            Property(x => x.Pass1File).HasColumnName(@"Pass1File").HasColumnType("varbinary").IsOptional();
            Property(x => x.Pass2File).HasColumnName(@"Pass2File").HasColumnType("varbinary").IsOptional();
            Property(x => x.Pass3File).HasColumnName(@"Pass3File").HasColumnType("varbinary").IsOptional();
            Property(x => x.Pass4File).HasColumnName(@"Pass4File").HasColumnType("varbinary").IsOptional();

            // Foreign keys
            HasOptional(a => a.Status_StatusId).WithMany(b => b.ImportBatches).HasForeignKey(c => c.StatusId).WillCascadeOnDelete(false); // FK_ImportBatch_Status
            HasOptional(a => a.StatusReason).WithMany(b => b.ImportBatches).HasForeignKey(c => c.StatusReasonId).WillCascadeOnDelete(false); // FK_ImportBatch_StatusReason
            HasRequired(a => a.AspnetUser).WithMany(b => b.ImportBatches).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_ImportBatch_aspnet_Users
            HasRequired(a => a.DataSource).WithMany(b => b.ImportBatches).HasForeignKey(c => c.DataSourceId).WillCascadeOnDelete(false); // FK_ImportBatch_DataSource
        }
    }

    // Instrument
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class InstrumentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Instrument>
    {
        public InstrumentConfiguration()
            : this("dbo")
        {
        }

        public InstrumentConfiguration(string schema)
        {
            ToTable("Instrument", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5000);
            Property(x => x.Url).HasColumnName(@"Url").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(250);
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasRequired(a => a.AspnetUser).WithMany(b => b.Instruments).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_Instrument_aspnet_Users
        }
    }

    // Instrument_DataSource
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class InstrumentDataSourceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InstrumentDataSource>
    {
        public InstrumentDataSourceConfiguration()
            : this("dbo")
        {
        }

        public InstrumentDataSourceConfiguration(string schema)
        {
            ToTable("Instrument_DataSource", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InstrumentId).HasColumnName(@"InstrumentID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.DataSourceId).HasColumnName(@"DataSourceID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasRequired(a => a.AspnetUser).WithMany(b => b.InstrumentDataSources).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_Instrument_DataSource_aspnet_Users
            HasRequired(a => a.DataSource).WithMany(b => b.InstrumentDataSources).HasForeignKey(c => c.DataSourceId).WillCascadeOnDelete(false); // FK_Instrument_DataSource_DataSource
            HasRequired(a => a.Instrument).WithMany(b => b.InstrumentDataSources).HasForeignKey(c => c.InstrumentId).WillCascadeOnDelete(false); // FK_Instrument_DataSource_Instrument
        }
    }

    // Instrument_Sensor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class InstrumentSensorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InstrumentSensor>
    {
        public InstrumentSensorConfiguration()
            : this("dbo")
        {
        }

        public InstrumentSensorConfiguration(string schema)
        {
            ToTable("Instrument_Sensor", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InstrumentId).HasColumnName(@"InstrumentID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.SensorId).HasColumnName(@"SensorID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasRequired(a => a.AspnetUser).WithMany(b => b.InstrumentSensors).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_Instrument_Sensor_aspnet_Users
            HasRequired(a => a.Instrument).WithMany(b => b.InstrumentSensors).HasForeignKey(c => c.InstrumentId).WillCascadeOnDelete(false); // FK_Instrument_Sensor_Instrument
            HasRequired(a => a.Sensor).WithMany(b => b.InstrumentSensors).HasForeignKey(c => c.SensorId).WillCascadeOnDelete(false); // FK_Instrument_Sensor_Sensor
        }
    }

    // Module
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class ModuleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Module>
    {
        public ModuleConfiguration()
            : this("dbo")
        {
        }

        public ModuleConfiguration(string schema)
        {
            ToTable("Module", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(500);
            Property(x => x.Url).HasColumnName(@"Url").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(250);
            Property(x => x.Icon).HasColumnName(@"Icon").HasColumnType("int").IsRequired();
            Property(x => x.ModuleId).HasColumnName(@"ModuleID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.IOrder).HasColumnName(@"iOrder").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.Module_ModuleId).WithMany(b => b.Modules).HasForeignKey(c => c.ModuleId).WillCascadeOnDelete(false); // FK_Module_Module
        }
    }

    // Observation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class ObservationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Observation>
    {
        public ObservationConfiguration()
            : this("dbo")
        {
        }

        public ObservationConfiguration(string schema)
        {
            ToTable("Observation", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SensorId).HasColumnName(@"SensorID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.ValueDate).HasColumnName(@"ValueDate").HasColumnType("datetime").IsRequired();
            Property(x => x.RawValue).HasColumnName(@"RawValue").HasColumnType("float").IsOptional();
            Property(x => x.DataValue).HasColumnName(@"DataValue").HasColumnType("float").IsOptional();
            Property(x => x.Comment).HasColumnName(@"Comment").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(250);
            Property(x => x.PhenomenonOfferingId).HasColumnName(@"PhenomenonOfferingID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.PhenomenonUomid).HasColumnName(@"PhenomenonUOMID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.ImportBatchId).HasColumnName(@"ImportBatchID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.StatusId).HasColumnName(@"StatusID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.StatusReasonId).HasColumnName(@"StatusReasonID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.CorrelationId).HasColumnName(@"CorrelationID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.AddedDate).HasColumnName(@"AddedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasOptional(a => a.Status).WithMany(b => b.Observations).HasForeignKey(c => c.StatusId).WillCascadeOnDelete(false); // FK_Observation_Status
            HasOptional(a => a.StatusReason).WithMany(b => b.Observations).HasForeignKey(c => c.StatusReasonId).WillCascadeOnDelete(false); // FK_Observation_StatusReason
            HasRequired(a => a.AspnetUser).WithMany(b => b.Observations).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_Observation_aspnet_Users
            HasRequired(a => a.ImportBatch).WithMany(b => b.Observations).HasForeignKey(c => c.ImportBatchId).WillCascadeOnDelete(false); // FK_Observation_ImportBatch
            HasRequired(a => a.PhenomenonOffering).WithMany(b => b.Observations).HasForeignKey(c => c.PhenomenonOfferingId).WillCascadeOnDelete(false); // FK_Observation_PhenomenonOffering
            HasRequired(a => a.PhenomenonUom).WithMany(b => b.Observations).HasForeignKey(c => c.PhenomenonUomid).WillCascadeOnDelete(false); // FK_Observation_PhenomenonUOM
            HasRequired(a => a.Sensor).WithMany(b => b.Observations).HasForeignKey(c => c.SensorId).WillCascadeOnDelete(false); // FK_Observation_Sensor
        }
    }

    // Offering
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class OfferingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Offering>
    {
        public OfferingConfiguration()
            : this("dbo")
        {
        }

        public OfferingConfiguration(string schema)
        {
            ToTable("Offering", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5000);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasRequired(a => a.AspnetUser).WithMany(b => b.Offerings).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_Offering_aspnet_Users
        }
    }

    // Organisation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class OrganisationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Organisation>
    {
        public OrganisationConfiguration()
            : this("dbo")
        {
        }

        public OrganisationConfiguration(string schema)
        {
            ToTable("Organisation", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5000);
            Property(x => x.Url).HasColumnName(@"Url").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(250);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasRequired(a => a.AspnetUser).WithMany(b => b.Organisations).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_Organisation_aspnet_Users
        }
    }

    // Organisation_Instrument
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class OrganisationInstrumentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OrganisationInstrument>
    {
        public OrganisationInstrumentConfiguration()
            : this("dbo")
        {
        }

        public OrganisationInstrumentConfiguration(string schema)
        {
            ToTable("Organisation_Instrument", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationId).HasColumnName(@"OrganisationID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.InstrumentId).HasColumnName(@"InstrumentID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.OrganisationRoleId).HasColumnName(@"OrganisationRoleID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasRequired(a => a.AspnetUser).WithMany(b => b.OrganisationInstruments).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_Organisation_Instrument_aspnet_Users
            HasRequired(a => a.Instrument).WithMany(b => b.OrganisationInstruments).HasForeignKey(c => c.InstrumentId).WillCascadeOnDelete(false); // FK_Organisation_Instrument_Instrument
            HasRequired(a => a.Organisation).WithMany(b => b.OrganisationInstruments).HasForeignKey(c => c.OrganisationId).WillCascadeOnDelete(false); // FK_Organisation_Instrument_Organisation
            HasRequired(a => a.OrganisationRole).WithMany(b => b.OrganisationInstruments).HasForeignKey(c => c.OrganisationRoleId).WillCascadeOnDelete(false); // FK_Organisation_Instrument_OrganisationRole
        }
    }

    // OrganisationRole
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class OrganisationRoleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OrganisationRole>
    {
        public OrganisationRoleConfiguration()
            : this("dbo")
        {
        }

        public OrganisationRoleConfiguration(string schema)
        {
            ToTable("OrganisationRole", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5000);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasRequired(a => a.AspnetUser).WithMany(b => b.OrganisationRoles).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_OrganisationRole_aspnet_Users
        }
    }

    // Organisation_Site
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class OrganisationSiteConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OrganisationSite>
    {
        public OrganisationSiteConfiguration()
            : this("dbo")
        {
        }

        public OrganisationSiteConfiguration(string schema)
        {
            ToTable("Organisation_Site", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationId).HasColumnName(@"OrganisationID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.SiteId).HasColumnName(@"SiteID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.OrganisationRoleId).HasColumnName(@"OrganisationRoleID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasRequired(a => a.AspnetUser).WithMany(b => b.OrganisationSites).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_Organisation_Site_aspnet_Users
            HasRequired(a => a.Organisation).WithMany(b => b.OrganisationSites).HasForeignKey(c => c.OrganisationId).WillCascadeOnDelete(false); // FK_Organisation_Site_Organisation
            HasRequired(a => a.OrganisationRole).WithMany(b => b.OrganisationSites).HasForeignKey(c => c.OrganisationRoleId).WillCascadeOnDelete(false); // FK_Organisation_Site_OrganisationRole
            HasRequired(a => a.Site).WithMany(b => b.OrganisationSites).HasForeignKey(c => c.SiteId).WillCascadeOnDelete(false); // FK_Organisation_Site_Site
        }
    }

    // Organisation_Station
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class OrganisationStationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OrganisationStation>
    {
        public OrganisationStationConfiguration()
            : this("dbo")
        {
        }

        public OrganisationStationConfiguration(string schema)
        {
            ToTable("Organisation_Station", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationId).HasColumnName(@"OrganisationID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.StationId).HasColumnName(@"StationID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.OrganisationRoleId).HasColumnName(@"OrganisationRoleID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasRequired(a => a.AspnetUser).WithMany(b => b.OrganisationStations).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_Organisation_Station_aspnet_Users
            HasRequired(a => a.Organisation).WithMany(b => b.OrganisationStations).HasForeignKey(c => c.OrganisationId).WillCascadeOnDelete(false); // FK_Organisation_Station_Organisation
            HasRequired(a => a.OrganisationRole).WithMany(b => b.OrganisationStations).HasForeignKey(c => c.OrganisationRoleId).WillCascadeOnDelete(false); // FK_Organisation_Station_OrganisationRole
            HasRequired(a => a.Station).WithMany(b => b.OrganisationStations).HasForeignKey(c => c.StationId).WillCascadeOnDelete(false); // FK_Organisation_Station_Station
        }
    }

    // Phenomenon
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class PhenomenonConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Phenomenon>
    {
        public PhenomenonConfiguration()
            : this("dbo")
        {
        }

        public PhenomenonConfiguration(string schema)
        {
            ToTable("Phenomenon", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5000);
            Property(x => x.Url).HasColumnName(@"Url").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(250);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasRequired(a => a.AspnetUser).WithMany(b => b.Phenomena).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_Phenomenon_aspnet_Users
        }
    }

    // PhenomenonOffering
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class PhenomenonOfferingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PhenomenonOffering>
    {
        public PhenomenonOfferingConfiguration()
            : this("dbo")
        {
        }

        public PhenomenonOfferingConfiguration(string schema)
        {
            ToTable("PhenomenonOffering", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhenomenonId).HasColumnName(@"PhenomenonID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.OfferingId).HasColumnName(@"OfferingID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasOptional(a => a.AspnetUser).WithMany(b => b.PhenomenonOfferings).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_PhenomenonOffering_aspnet_Users
            HasRequired(a => a.Offering).WithMany(b => b.PhenomenonOfferings).HasForeignKey(c => c.OfferingId).WillCascadeOnDelete(false); // FK_PhenomenonOffering_Offering
            HasRequired(a => a.Phenomenon).WithMany(b => b.PhenomenonOfferings).HasForeignKey(c => c.PhenomenonId).WillCascadeOnDelete(false); // FK_PhenomenonOffering_Phenomenon
        }
    }

    // PhenomenonUOM
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class PhenomenonUomConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PhenomenonUom>
    {
        public PhenomenonUomConfiguration()
            : this("dbo")
        {
        }

        public PhenomenonUomConfiguration(string schema)
        {
            ToTable("PhenomenonUOM", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhenomenonId).HasColumnName(@"PhenomenonID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.UnitOfMeasureId).HasColumnName(@"UnitOfMeasureID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.IsDefault).HasColumnName(@"IsDefault").HasColumnType("bit").IsRequired();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasOptional(a => a.AspnetUser).WithMany(b => b.PhenomenonUoms).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_PhenomenonUOM_aspnet_Users
            HasRequired(a => a.Phenomenon).WithMany(b => b.PhenomenonUoms).HasForeignKey(c => c.PhenomenonId).WillCascadeOnDelete(false); // FK_PhenomenonUOM_PhenomenonUOM
            HasRequired(a => a.UnitOfMeasure).WithMany(b => b.PhenomenonUoms).HasForeignKey(c => c.UnitOfMeasureId).WillCascadeOnDelete(false); // FK_PhenomenonUOM_UnitOfMeasure
        }
    }

    // Programme
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class ProgrammeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Programme>
    {
        public ProgrammeConfiguration()
            : this("dbo")
        {
        }

        public ProgrammeConfiguration(string schema)
        {
            ToTable("Programme", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5000);
            Property(x => x.Url).HasColumnName(@"Url").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(250);
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasRequired(a => a.AspnetUser).WithMany(b => b.Programmes).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_Programme_aspnet_Users
        }
    }

    // Project
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class ProjectConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Project>
    {
        public ProjectConfiguration()
            : this("dbo")
        {
        }

        public ProjectConfiguration(string schema)
        {
            ToTable("Project", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgrammeId).HasColumnName(@"ProgrammeID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5000);
            Property(x => x.Url).HasColumnName(@"Url").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(250);
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasOptional(a => a.Programme).WithMany(b => b.Projects).HasForeignKey(c => c.ProgrammeId).WillCascadeOnDelete(false); // FK_Project_Programme
            HasRequired(a => a.AspnetUser).WithMany(b => b.Projects).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_Project_aspnet_Users
        }
    }

    // ProjectSite
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class ProjectSiteConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProjectSite>
    {
        public ProjectSiteConfiguration()
            : this("dbo")
        {
        }

        public ProjectSiteConfiguration(string schema)
        {
            ToTable("ProjectSite", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(5000);
            Property(x => x.OrganisationId).HasColumnName(@"OrganisationID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.AspnetUser).WithMany(b => b.ProjectSites).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_ProjectSite_aspnet_Users
            HasRequired(a => a.Organisation).WithMany(b => b.ProjectSites).HasForeignKey(c => c.OrganisationId).WillCascadeOnDelete(false); // FK_ProjectSite_Organisation
        }
    }

    // Project_Station
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class ProjectStationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProjectStation>
    {
        public ProjectStationConfiguration()
            : this("dbo")
        {
        }

        public ProjectStationConfiguration(string schema)
        {
            ToTable("Project_Station", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProjectId).HasColumnName(@"ProjectID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.StationId).HasColumnName(@"StationID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasRequired(a => a.AspnetUser).WithMany(b => b.ProjectStations).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_Project_Station_aspnet_Users
            HasRequired(a => a.Project).WithMany(b => b.ProjectStations).HasForeignKey(c => c.ProjectId).WillCascadeOnDelete(false); // FK_Project_Station_ProjectID
            HasRequired(a => a.Station).WithMany(b => b.ProjectStations).HasForeignKey(c => c.StationId).WillCascadeOnDelete(false); // FK_Project_Station_StationID
        }
    }

    // __RefactorLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class RefactorLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RefactorLog>
    {
        public RefactorLogConfiguration()
            : this("dbo")
        {
        }

        public RefactorLogConfiguration(string schema)
        {
            ToTable("__RefactorLog", schema);
            HasKey(x => x.OperationKey);

            Property(x => x.OperationKey).HasColumnName(@"OperationKey").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // RoleModule
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class RoleModuleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RoleModule>
    {
        public RoleModuleConfiguration()
            : this("dbo")
        {
        }

        public RoleModuleConfiguration(string schema)
        {
            ToTable("RoleModule", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.ModuleId).HasColumnName(@"ModuleID").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.AspnetRole).WithMany(b => b.RoleModules).HasForeignKey(c => c.RoleId).WillCascadeOnDelete(false); // FK_RoleModule_aspnet_Roles
            HasRequired(a => a.Module).WithMany(b => b.RoleModules).HasForeignKey(c => c.ModuleId).WillCascadeOnDelete(false); // FK_RoleModule_Module
        }
    }

    // SchemaColumn
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class SchemaColumnConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SchemaColumn>
    {
        public SchemaColumnConfiguration()
            : this("dbo")
        {
        }

        public SchemaColumnConfiguration(string schema)
        {
            ToTable("SchemaColumn", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DataSchemaId).HasColumnName(@"DataSchemaID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.Number).HasColumnName(@"Number").HasColumnType("int").IsRequired();
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
            Property(x => x.SchemaColumnTypeId).HasColumnName(@"SchemaColumnTypeID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.Width).HasColumnName(@"Width").HasColumnType("int").IsOptional();
            Property(x => x.Format).HasColumnName(@"Format").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.PhenomenonId).HasColumnName(@"PhenomenonID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.PhenomenonOfferingId).HasColumnName(@"PhenomenonOfferingID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.PhenomenonUomid).HasColumnName(@"PhenomenonUOMID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.EmptyValue).HasColumnName(@"EmptyValue").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.FixedTime).HasColumnName(@"FixedTime").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasOptional(a => a.Phenomenon).WithMany(b => b.SchemaColumns).HasForeignKey(c => c.PhenomenonId).WillCascadeOnDelete(false); // FK_SchemaColumn_Phenomenon
            HasOptional(a => a.PhenomenonOffering).WithMany(b => b.SchemaColumns).HasForeignKey(c => c.PhenomenonOfferingId).WillCascadeOnDelete(false); // FK_SchemaColumn_PhenomenonOffering
            HasOptional(a => a.PhenomenonUom).WithMany(b => b.SchemaColumns).HasForeignKey(c => c.PhenomenonUomid).WillCascadeOnDelete(false); // FK_SchemaColumn_PhenomenonUOM
            HasRequired(a => a.AspnetUser).WithMany(b => b.SchemaColumns).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_SchemaColumn_aspnet_Users
            HasRequired(a => a.DataSchema).WithMany(b => b.SchemaColumns).HasForeignKey(c => c.DataSchemaId).WillCascadeOnDelete(false); // FK_SchemaColumn_DataSchema
            HasRequired(a => a.SchemaColumnType).WithMany(b => b.SchemaColumns).HasForeignKey(c => c.SchemaColumnTypeId).WillCascadeOnDelete(false); // FK_SchemaColumn_SchemaColumnType
        }
    }

    // SchemaColumnType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class SchemaColumnTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SchemaColumnType>
    {
        public SchemaColumnTypeConfiguration()
            : this("dbo")
        {
        }

        public SchemaColumnTypeConfiguration(string schema)
        {
            ToTable("SchemaColumnType", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(250);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasRequired(a => a.AspnetUser).WithMany(b => b.SchemaColumnTypes).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_SchemaColumnType_aspnet_Users
        }
    }

    // Sensor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class SensorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sensor>
    {
        public SensorConfiguration()
            : this("dbo")
        {
        }

        public SensorConfiguration(string schema)
        {
            ToTable("Sensor", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5000);
            Property(x => x.Url).HasColumnName(@"Url").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(250);
            Property(x => x.PhenomenonId).HasColumnName(@"PhenomenonID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.DataSourceId).HasColumnName(@"DataSourceID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.DataSchemaId).HasColumnName(@"DataSchemaID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasOptional(a => a.DataSchema).WithMany(b => b.Sensors).HasForeignKey(c => c.DataSchemaId).WillCascadeOnDelete(false); // FK_Sensor_DataSchema
            HasRequired(a => a.AspnetUser).WithMany(b => b.Sensors).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_Sensor_aspnet_Users
            HasRequired(a => a.DataSource).WithMany(b => b.Sensors).HasForeignKey(c => c.DataSourceId).WillCascadeOnDelete(false); // FK_Sensor_DataSource
            HasRequired(a => a.Phenomenon).WithMany(b => b.Sensors).HasForeignKey(c => c.PhenomenonId).WillCascadeOnDelete(false); // FK_Sensor_Phenomenon
        }
    }

    // Site
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class SiteConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Site>
    {
        public SiteConfiguration()
            : this("dbo")
        {
        }

        public SiteConfiguration(string schema)
        {
            ToTable("Site", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5000);
            Property(x => x.Url).HasColumnName(@"Url").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(250);
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasRequired(a => a.AspnetUser).WithMany(b => b.Sites).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_Site_aspnet_Users
        }
    }

    // Station
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class StationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Station>
    {
        public StationConfiguration()
            : this("dbo")
        {
        }

        public StationConfiguration(string schema)
        {
            ToTable("Station", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5000);
            Property(x => x.Url).HasColumnName(@"Url").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(250);
            Property(x => x.Latitude).HasColumnName(@"Latitude").HasColumnType("float").IsOptional();
            Property(x => x.Longitude).HasColumnName(@"Longitude").HasColumnType("float").IsOptional();
            Property(x => x.Elevation).HasColumnName(@"Elevation").HasColumnType("int").IsOptional();
            Property(x => x.ProjectSiteId).HasColumnName(@"ProjectSiteID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.SiteId).HasColumnName(@"SiteID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasOptional(a => a.ProjectSite).WithMany(b => b.Stations).HasForeignKey(c => c.ProjectSiteId).WillCascadeOnDelete(false); // FK_Station_ProjectSite
            HasOptional(a => a.Site).WithMany(b => b.Stations).HasForeignKey(c => c.SiteId).WillCascadeOnDelete(false); // FK_Station_Site
            HasRequired(a => a.AspnetUser).WithMany(b => b.Stations).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_Station_aspnet_Users
        }
    }

    // Station_Instrument
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class StationInstrumentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StationInstrument>
    {
        public StationInstrumentConfiguration()
            : this("dbo")
        {
        }

        public StationInstrumentConfiguration(string schema)
        {
            ToTable("Station_Instrument", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StationId).HasColumnName(@"StationID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.InstrumentId).HasColumnName(@"InstrumentID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasRequired(a => a.AspnetUser).WithMany(b => b.StationInstruments).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_Station_Instrument_aspnet_Users
            HasRequired(a => a.Instrument).WithMany(b => b.StationInstruments).HasForeignKey(c => c.InstrumentId).WillCascadeOnDelete(false); // FK_Station_Instrument_Instrument
            HasRequired(a => a.Station).WithMany(b => b.StationInstruments).HasForeignKey(c => c.StationId).WillCascadeOnDelete(false); // FK_Station_Instrument_Station
        }
    }

    // Status
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class StatusConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Status>
    {
        public StatusConfiguration()
            : this("dbo")
        {
        }

        public StatusConfiguration(string schema)
        {
            ToTable("Status", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(500);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasOptional(a => a.AspnetUser).WithMany(b => b.Status).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_Status_aspnet_Users
        }
    }

    // StatusReason
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class StatusReasonConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StatusReason>
    {
        public StatusReasonConfiguration()
            : this("dbo")
        {
        }

        public StatusReasonConfiguration(string schema)
        {
            ToTable("StatusReason", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(500);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasRequired(a => a.AspnetUser).WithMany(b => b.StatusReasons).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_StatusReason_aspnet_Users
        }
    }

    // TransformationType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class TransformationTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TransformationType>
    {
        public TransformationTypeConfiguration()
            : this("dbo")
        {
        }

        public TransformationTypeConfiguration(string schema)
        {
            ToTable("TransformationType", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(500);
            Property(x => x.Iorder).HasColumnName(@"iorder").HasColumnType("int").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasOptional(a => a.AspnetUser).WithMany(b => b.TransformationTypes).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_TransformationType_aspnet_Users
        }
    }

    // UnitOfMeasure
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class UnitOfMeasureConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<UnitOfMeasure>
    {
        public UnitOfMeasureConfiguration()
            : this("dbo")
        {
        }

        public UnitOfMeasureConfiguration(string schema)
        {
            ToTable("UnitOfMeasure", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Unit).HasColumnName(@"Unit").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
            Property(x => x.UnitSymbol).HasColumnName(@"UnitSymbol").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(20);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasRequired(a => a.AspnetUser).WithMany(b => b.UnitOfMeasures).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_UnitOfMeasure_aspnet_Users
        }
    }

    // vAuditLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VAuditLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VAuditLog>
    {
        public VAuditLogConfiguration()
            : this("dbo")
        {
        }

        public VAuditLogConfiguration(string schema)
        {
            ToTable("vAuditLog", schema);
            HasKey(x => new { x.Id, x.Description, x.UserId, x.UserName });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(500).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar").IsRequired().HasMaxLength(256).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // vDataLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VDataLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VDataLog>
    {
        public VDataLogConfiguration()
            : this("dbo")
        {
        }

        public VDataLogConfiguration(string schema)
        {
            ToTable("vDataLog", schema);
            HasKey(x => new { x.Id, x.ImportDate, x.SiteName, x.StationName, x.InstrumentName, x.SensorName, x.SensorInvalid, x.DateValueInvalid, x.TimeValueInvalid, x.ValueText, x.RawValueInvalid, x.DataValueInvalid, x.OfferingInvalid, x.UomInvalid, x.StatusId, x.Status, x.ImportBatchId, x.RawFieldValue });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ImportDate).HasColumnName(@"ImportDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SiteName).HasColumnName(@"SiteName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StationName).HasColumnName(@"StationName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InstrumentName).HasColumnName(@"InstrumentName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SensorId).HasColumnName(@"SensorID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.SensorName).HasColumnName(@"SensorName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SensorInvalid).HasColumnName(@"SensorInvalid").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ValueDate).HasColumnName(@"ValueDate").HasColumnType("datetime").IsOptional();
            Property(x => x.InvalidDateValue).HasColumnName(@"InvalidDateValue").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.DateValueInvalid).HasColumnName(@"DateValueInvalid").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InvalidTimeValue).HasColumnName(@"InvalidTimeValue").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.TimeValueInvalid).HasColumnName(@"TimeValueInvalid").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ValueTime).HasColumnName(@"ValueTime").HasColumnType("datetime").IsOptional();
            Property(x => x.RawValue).HasColumnName(@"RawValue").HasColumnType("float").IsOptional();
            Property(x => x.ValueText).HasColumnName(@"ValueText").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RawValueInvalid).HasColumnName(@"RawValueInvalid").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DataValue).HasColumnName(@"DataValue").HasColumnType("float").IsOptional();
            Property(x => x.TransformValueText).HasColumnName(@"TransformValueText").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.DataValueInvalid).HasColumnName(@"DataValueInvalid").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhenomenonOfferingId).HasColumnName(@"PhenomenonOfferingID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.OfferingInvalid).HasColumnName(@"OfferingInvalid").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhenomenonUomid).HasColumnName(@"PhenomenonUOMID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.UomInvalid).HasColumnName(@"UOMInvalid").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhenomenonName).HasColumnName(@"PhenomenonName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(150);
            Property(x => x.OfferingName).HasColumnName(@"OfferingName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(150);
            Property(x => x.Unit).HasColumnName(@"Unit").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.DataSourceTransformationId).HasColumnName(@"DataSourceTransformationID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.Transformation).HasColumnName(@"Transformation").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(150);
            Property(x => x.StatusId).HasColumnName(@"StatusID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Status).HasColumnName(@"Status").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ImportBatchId).HasColumnName(@"ImportBatchID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RawFieldValue).HasColumnName(@"RawFieldValue").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Comment).HasColumnName(@"Comment").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(250);
        }
    }

    // vDataQuery
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VDataQueryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VDataQuery>
    {
        public VDataQueryConfiguration()
            : this("dbo")
        {
        }

        public VDataQueryConfiguration(string schema)
        {
            ToTable("vDataQuery", schema);
            HasKey(x => new { x.SiteId, x.SiteName, x.StationId, x.StationName, x.InstrumentId, x.InstrumentName, x.SensorId, x.Sensor, x.PhenomenonId, x.Phenomenon, x.OfferingId, x.Offering });

            Property(x => x.SiteId).HasColumnName(@"SiteID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SiteName).HasColumnName(@"SiteName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SiteDesc).HasColumnName(@"SiteDesc").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5000);
            Property(x => x.StationId).HasColumnName(@"StationID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StationName).HasColumnName(@"StationName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StationDesc).HasColumnName(@"StationDesc").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5000);
            Property(x => x.InstrumentId).HasColumnName(@"InstrumentID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InstrumentName).HasColumnName(@"InstrumentName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InstrumentDesc).HasColumnName(@"InstrumentDesc").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5000);
            Property(x => x.SensorId).HasColumnName(@"SensorID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Sensor).HasColumnName(@"Sensor").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SensorDesc).HasColumnName(@"SensorDesc").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5000);
            Property(x => x.PhenomenonId).HasColumnName(@"PhenomenonID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Phenomenon).HasColumnName(@"Phenomenon").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhenomenonDesc).HasColumnName(@"PhenomenonDesc").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5000);
            Property(x => x.OfferingId).HasColumnName(@"OfferingID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Offering).HasColumnName(@"Offering").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OfferingDesc).HasColumnName(@"OfferingDesc").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5000);
        }
    }

    // vDataSchema
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VDataSchemaConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VDataSchema>
    {
        public VDataSchemaConfiguration()
            : this("dbo")
        {
        }

        public VDataSchemaConfiguration(string schema)
        {
            ToTable("vDataSchema", schema);
            HasKey(x => new { x.Id, x.Code, x.Name, x.UserId, x.DataSourceTypeId, x.IgnoreFirst, x.IgnoreLast, x.DataSourceTypeCode, x.DataSourceTypeDesc });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5000);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DataSourceTypeId).HasColumnName(@"DataSourceTypeID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IgnoreFirst).HasColumnName(@"IgnoreFirst").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IgnoreLast).HasColumnName(@"IgnoreLast").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Delimiter).HasColumnName(@"Delimiter").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(3);
            Property(x => x.Condition).HasColumnName(@"Condition").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(500);
            Property(x => x.SplitSelector).HasColumnName(@"SplitSelector").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.SplitIndex).HasColumnName(@"SplitIndex").HasColumnType("int").IsOptional();
            Property(x => x.DataSourceTypeCode).HasColumnName(@"DataSourceTypeCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DataSourceTypeDesc).HasColumnName(@"DataSourceTypeDesc").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(500).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // vDataSource
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VDataSourceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VDataSource>
    {
        public VDataSourceConfiguration()
            : this("dbo")
        {
        }

        public VDataSourceConfiguration(string schema)
        {
            ToTable("vDataSource", schema);
            HasKey(x => new { x.Id, x.Code, x.Name, x.Url, x.UpdateFreq, x.LastUpdate, x.UserId });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5000);
            Property(x => x.Url).HasColumnName(@"Url").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(250).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DefaultNullValue).HasColumnName(@"DefaultNullValue").HasColumnType("float").IsOptional();
            Property(x => x.ErrorEstimate).HasColumnName(@"ErrorEstimate").HasColumnType("float").IsOptional();
            Property(x => x.UpdateFreq).HasColumnName(@"UpdateFreq").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.LastUpdate).HasColumnName(@"LastUpdate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DataSchemaId).HasColumnName(@"DataSchemaID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.DataSchemaName).HasColumnName(@"DataSchemaName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
        }
    }

    // vDataSourceRole
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VDataSourceRoleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VDataSourceRole>
    {
        public VDataSourceRoleConfiguration()
            : this("dbo")
        {
        }

        public VDataSourceRoleConfiguration(string schema)
        {
            ToTable("vDataSourceRole", schema);
            HasKey(x => new { x.Id, x.DataSourceId, x.RoleId, x.DataSourceCode, x.DataSourceName, x.ActualRoleName });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DataSourceId).HasColumnName(@"DataSourceID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DateStart).HasColumnName(@"DateStart").HasColumnType("datetime").IsOptional();
            Property(x => x.DateEnd).HasColumnName(@"DateEnd").HasColumnType("datetime").IsOptional();
            Property(x => x.RoleName).HasColumnName(@"RoleName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(256);
            Property(x => x.IsRoleReadOnly).HasColumnName(@"IsRoleReadOnly").HasColumnType("bit").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.DataSourceCode).HasColumnName(@"DataSourceCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DataSourceName).HasColumnName(@"DataSourceName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ActualRoleName).HasColumnName(@"ActualRoleName").HasColumnType("nvarchar").IsRequired().HasMaxLength(256).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RoleDescription).HasColumnName(@"RoleDescription").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
        }
    }

    // vDataSourceTransformation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VDataSourceTransformationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VDataSourceTransformation>
    {
        public VDataSourceTransformationConfiguration()
            : this("dbo")
        {
        }

        public VDataSourceTransformationConfiguration(string schema)
        {
            ToTable("vDataSourceTransformation", schema);
            HasKey(x => new { x.Id, x.TransformationTypeId, x.PhenomenonId, x.StartDate, x.DataSourceId, x.Definition, x.PhenomenonName, x.TransformationName });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TransformationTypeId).HasColumnName(@"TransformationTypeID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhenomenonId).HasColumnName(@"PhenomenonID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.DataSourceId).HasColumnName(@"DataSourceID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Definition).HasColumnName(@"Definition").HasColumnType("text").IsRequired().IsUnicode(false).HasMaxLength(2147483647).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhenomenonName).HasColumnName(@"PhenomenonName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TransformationName).HasColumnName(@"TransformationName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhenomenonOfferingId).HasColumnName(@"PhenomenonOfferingId").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.OfferingName).HasColumnName(@"OfferingName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(150);
            Property(x => x.UnitOfMeasureId).HasColumnName(@"UnitOfMeasureId").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.UnitofMeasure).HasColumnName(@"UnitofMeasure").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.NewPhenomenonOfferingId).HasColumnName(@"NewPhenomenonOfferingID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.NewPhenomenonUomid).HasColumnName(@"NewPhenomenonUOMID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.Iorder).HasColumnName(@"iorder").HasColumnType("int").IsOptional();
            Property(x => x.Rank).HasColumnName(@"Rank").HasColumnType("int").IsOptional();
        }
    }

    // vImportBatch
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VImportBatchConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VImportBatch>
    {
        public VImportBatchConfiguration()
            : this("dbo")
        {
        }

        public VImportBatchConfiguration(string schema)
        {
            ToTable("vImportBatch", schema);
            HasKey(x => new { x.Id, x.Code, x.DataSourceId, x.ImportDate, x.Status, x.DataSourceName, x.UserId, x.UserName });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DataSourceId).HasColumnName(@"DataSourceID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ImportDate).HasColumnName(@"ImportDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Status).HasColumnName(@"Status").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DataSourceName).HasColumnName(@"DataSourceName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar").IsRequired().HasMaxLength(256).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StatusDescription).HasColumnName(@"StatusDescription").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(17);
            Property(x => x.FileName).HasColumnName(@"FileName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(250);
            Property(x => x.LogFileName).HasColumnName(@"LogFileName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(250);
        }
    }

    // vInstrumentDataSource
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VInstrumentDataSourceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VInstrumentDataSource>
    {
        public VInstrumentDataSourceConfiguration()
            : this("dbo")
        {
        }

        public VInstrumentDataSourceConfiguration(string schema)
        {
            ToTable("vInstrumentDataSource", schema);
            HasKey(x => new { x.Id, x.InstrumentId, x.DataSourceId, x.UserId, x.InstrumentCode, x.InstrumentName, x.DataSourceCode, x.DataSourceName });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InstrumentId).HasColumnName(@"InstrumentID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DataSourceId).HasColumnName(@"DataSourceID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.InstrumentCode).HasColumnName(@"InstrumentCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InstrumentName).HasColumnName(@"InstrumentName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DataSourceCode).HasColumnName(@"DataSourceCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DataSourceName).HasColumnName(@"DataSourceName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // vInstrumentOrganisation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VInstrumentOrganisationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VInstrumentOrganisation>
    {
        public VInstrumentOrganisationConfiguration()
            : this("dbo")
        {
        }

        public VInstrumentOrganisationConfiguration(string schema)
        {
            ToTable("vInstrumentOrganisation", schema);
            HasKey(x => new { x.Id, x.OrganisationId, x.OrganisationCode, x.OrganisationName, x.InstrumentId, x.InstrumentCode, x.InstrumentName, x.OrganisationRoleId, x.OrganisationRoleCode, x.OrganisationRoleName, x.Level, x.LevelCode, x.LevelName, x.Weight });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationId).HasColumnName(@"OrganisationID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationCode).HasColumnName(@"OrganisationCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationName).HasColumnName(@"OrganisationName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InstrumentId).HasColumnName(@"InstrumentID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InstrumentCode).HasColumnName(@"InstrumentCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InstrumentName).HasColumnName(@"InstrumentName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationRoleId).HasColumnName(@"OrganisationRoleID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationRoleCode).HasColumnName(@"OrganisationRoleCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationRoleName).HasColumnName(@"OrganisationRoleName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.Level).HasColumnName(@"Level").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(10).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LevelCode).HasColumnName(@"LevelCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LevelName).HasColumnName(@"LevelName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Weight).HasColumnName(@"Weight").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IsReadOnly).HasColumnName(@"IsReadOnly").HasColumnType("bit").IsOptional();
        }
    }

    // vInstrumentSensor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VInstrumentSensorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VInstrumentSensor>
    {
        public VInstrumentSensorConfiguration()
            : this("dbo")
        {
        }

        public VInstrumentSensorConfiguration(string schema)
        {
            ToTable("vInstrumentSensor", schema);
            HasKey(x => new { x.Id, x.InstrumentId, x.SensorId, x.UserId, x.InstrumentCode, x.InstrumentName, x.SensorCode, x.SensorName });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InstrumentId).HasColumnName(@"InstrumentID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SensorId).HasColumnName(@"SensorID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.InstrumentCode).HasColumnName(@"InstrumentCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InstrumentName).HasColumnName(@"InstrumentName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SensorCode).HasColumnName(@"SensorCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SensorName).HasColumnName(@"SensorName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // vInventory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VInventoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VInventory>
    {
        public VInventoryConfiguration()
            : this("dbo")
        {
        }

        public VInventoryConfiguration(string schema)
        {
            ToTable("vInventory", schema);
            HasKey(x => new { x.Site, x.Station, x.Instrument, x.Sensor, x.Phenomenon });

            Property(x => x.Site).HasColumnName(@"Site").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Station).HasColumnName(@"Station").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Instrument).HasColumnName(@"Instrument").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Sensor).HasColumnName(@"Sensor").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Phenomenon).HasColumnName(@"Phenomenon").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
        }
    }

    // vModuleRoleModule
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VModuleRoleModuleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VModuleRoleModule>
    {
        public VModuleRoleModuleConfiguration()
            : this("dbo")
        {
        }

        public VModuleRoleModuleConfiguration(string schema)
        {
            ToTable("vModuleRoleModule", schema);
            HasKey(x => new { x.Id, x.RoleId, x.ModuleId, x.Name, x.Description, x.Url, x.Icon });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ModuleId).HasColumnName(@"ModuleID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(500).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Url).HasColumnName(@"Url").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(250).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Icon).HasColumnName(@"Icon").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BaseModuleId).HasColumnName(@"BaseModuleID").HasColumnType("uniqueidentifier").IsOptional();
        }
    }

    // vObservation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VObservationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VObservation>
    {
        public VObservationConfiguration()
            : this("dbo")
        {
        }

        public VObservationConfiguration(string schema)
        {
            ToTable("vObservation", schema);
            HasKey(x => new { x.Id, x.SensorId, x.PhenomenonOfferingId, x.PhenomenonUomid, x.ImportBatchId, x.ValueDate, x.UserId, x.UserName, x.OfferingId, x.OfferingName, x.UnitOfMeasureId, x.UnitOfMeasureUnit, x.UnitOfMeasureSymbol, x.SensorName, x.PhenomenonId, x.PhenomenonName, x.DataSourceId, x.DataSourceName, x.InstrumentId, x.InstrumentName, x.StationId, x.StationName, x.SiteId, x.SiteName, x.OrganisationId, x.OrganisationName });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SensorId).HasColumnName(@"SensorID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhenomenonOfferingId).HasColumnName(@"PhenomenonOfferingID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhenomenonUomid).HasColumnName(@"PhenomenonUOMID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RawValue).HasColumnName(@"RawValue").HasColumnType("float").IsOptional();
            Property(x => x.DataValue).HasColumnName(@"DataValue").HasColumnType("float").IsOptional();
            Property(x => x.ImportBatchId).HasColumnName(@"ImportBatchID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ValueDate).HasColumnName(@"ValueDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Comment).HasColumnName(@"Comment").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(250);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar").IsRequired().HasMaxLength(256).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StatusName).HasColumnName(@"StatusName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(150);
            Property(x => x.StatusReasonName).HasColumnName(@"StatusReasonName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(150);
            Property(x => x.OfferingId).HasColumnName(@"OfferingID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OfferingName).HasColumnName(@"OfferingName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UnitOfMeasureId).HasColumnName(@"UnitOfMeasureID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UnitOfMeasureUnit).HasColumnName(@"UnitOfMeasureUnit").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UnitOfMeasureSymbol).HasColumnName(@"UnitOfMeasureSymbol").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SensorName).HasColumnName(@"SensorName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhenomenonId).HasColumnName(@"PhenomenonID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhenomenonName).HasColumnName(@"PhenomenonName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DataSourceId).HasColumnName(@"DataSourceID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DataSourceName).HasColumnName(@"DataSourceName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DataSchemaName).HasColumnName(@"DataSchemaName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.InstrumentId).HasColumnName(@"InstrumentID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InstrumentName).HasColumnName(@"InstrumentName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StationId).HasColumnName(@"StationID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StationName).HasColumnName(@"StationName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SiteId).HasColumnName(@"SiteID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SiteName).HasColumnName(@"SiteName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationId).HasColumnName(@"OrganisationID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationName).HasColumnName(@"OrganisationName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // vObservationRoles
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VObservationRoleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VObservationRole>
    {
        public VObservationRoleConfiguration()
            : this("dbo")
        {
        }

        public VObservationRoleConfiguration(string schema)
        {
            ToTable("vObservationRoles", schema);
            HasKey(x => new { x.Id, x.SensorId, x.PhenomenonOfferingId, x.PhenomenonUomid, x.ImportBatchId, x.ValueDate, x.UserId, x.UserName, x.OfferingId, x.OfferingName, x.UnitOfMeasureId, x.UnitOfMeasureUnit, x.UnitOfMeasureSymbol, x.SensorName, x.PhenomenonId, x.PhenomenonName, x.DataSourceId, x.DataSourceName, x.InstrumentId, x.InstrumentName, x.StationId, x.StationName, x.SiteId, x.SiteName, x.OrganisationId, x.OrganisationName, x.RoleUserId });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SensorId).HasColumnName(@"SensorID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhenomenonOfferingId).HasColumnName(@"PhenomenonOfferingID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhenomenonUomid).HasColumnName(@"PhenomenonUOMID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RawValue).HasColumnName(@"RawValue").HasColumnType("float").IsOptional();
            Property(x => x.DataValue).HasColumnName(@"DataValue").HasColumnType("float").IsOptional();
            Property(x => x.ImportBatchId).HasColumnName(@"ImportBatchID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ValueDate).HasColumnName(@"ValueDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Comment).HasColumnName(@"Comment").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(250);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar").IsRequired().HasMaxLength(256).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StatusName).HasColumnName(@"StatusName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(150);
            Property(x => x.StatusReasonName).HasColumnName(@"StatusReasonName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(150);
            Property(x => x.OfferingId).HasColumnName(@"OfferingID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OfferingName).HasColumnName(@"OfferingName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UnitOfMeasureId).HasColumnName(@"UnitOfMeasureID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UnitOfMeasureUnit).HasColumnName(@"UnitOfMeasureUnit").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UnitOfMeasureSymbol).HasColumnName(@"UnitOfMeasureSymbol").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SensorName).HasColumnName(@"SensorName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhenomenonId).HasColumnName(@"PhenomenonID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhenomenonName).HasColumnName(@"PhenomenonName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DataSourceId).HasColumnName(@"DataSourceID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DataSourceName).HasColumnName(@"DataSourceName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DataSchemaName).HasColumnName(@"DataSchemaName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.InstrumentId).HasColumnName(@"InstrumentID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InstrumentName).HasColumnName(@"InstrumentName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StationId).HasColumnName(@"StationID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StationName).HasColumnName(@"StationName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SiteId).HasColumnName(@"SiteID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SiteName).HasColumnName(@"SiteName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationId).HasColumnName(@"OrganisationID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationName).HasColumnName(@"OrganisationName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RoleUserId).HasColumnName(@"RoleUserId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // vObservationsList
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VObservationsListConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VObservationsList>
    {
        public VObservationsListConfiguration()
            : this("dbo")
        {
        }

        public VObservationsListConfiguration(string schema)
        {
            ToTable("vObservationsList", schema);
            HasKey(x => new { x.Id, x.SensorId, x.ValueDate, x.PhenomenonOfferingId, x.PhenomenonUomid, x.ImportBatchId, x.UserId, x.AddedDate, x.SensorCode, x.SensorName, x.PhenomenonCode, x.PhenomenonName, x.OfferingCode, x.OfferingName, x.UnitOfMeasureCode, x.UnitOfMeasureUnit });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SensorId).HasColumnName(@"SensorID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ValueDate).HasColumnName(@"ValueDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RawValue).HasColumnName(@"RawValue").HasColumnType("float").IsOptional();
            Property(x => x.DataValue).HasColumnName(@"DataValue").HasColumnType("float").IsOptional();
            Property(x => x.Comment).HasColumnName(@"Comment").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(250);
            Property(x => x.PhenomenonOfferingId).HasColumnName(@"PhenomenonOfferingID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhenomenonUomid).HasColumnName(@"PhenomenonUOMID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ImportBatchId).HasColumnName(@"ImportBatchID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StatusId).HasColumnName(@"StatusID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.StatusReasonId).HasColumnName(@"StatusReasonID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.CorrelationId).HasColumnName(@"CorrelationID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddedDate).HasColumnName(@"AddedDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.SensorCode).HasColumnName(@"SensorCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SensorName).HasColumnName(@"SensorName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhenomenonCode).HasColumnName(@"PhenomenonCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhenomenonName).HasColumnName(@"PhenomenonName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OfferingCode).HasColumnName(@"OfferingCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OfferingName).HasColumnName(@"OfferingName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UnitOfMeasureCode).HasColumnName(@"UnitOfMeasureCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UnitOfMeasureUnit).HasColumnName(@"UnitOfMeasureUnit").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StatusCode).HasColumnName(@"StatusCode").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.StatusName).HasColumnName(@"StatusName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(150);
            Property(x => x.StatusReasonCode).HasColumnName(@"StatusReasonCode").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.StatusReasonName).HasColumnName(@"StatusReasonName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(150);
        }
    }

    // vOrganisationInstrument
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VOrganisationInstrumentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VOrganisationInstrument>
    {
        public VOrganisationInstrumentConfiguration()
            : this("dbo")
        {
        }

        public VOrganisationInstrumentConfiguration(string schema)
        {
            ToTable("vOrganisationInstrument", schema);
            HasKey(x => new { x.Id, x.OrganisationId, x.InstrumentId, x.OrganisationRoleId, x.UserId, x.OrganisationCode, x.OrganisationName, x.InstrumentCode, x.InstrumentName, x.OrganisationRoleCode, x.OrganisationRoleName });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationId).HasColumnName(@"OrganisationID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InstrumentId).HasColumnName(@"InstrumentID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationRoleId).HasColumnName(@"OrganisationRoleID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.OrganisationCode).HasColumnName(@"OrganisationCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationName).HasColumnName(@"OrganisationName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InstrumentCode).HasColumnName(@"InstrumentCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InstrumentName).HasColumnName(@"InstrumentName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationRoleCode).HasColumnName(@"OrganisationRoleCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationRoleName).HasColumnName(@"OrganisationRoleName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // vOrganisationSite
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VOrganisationSiteConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VOrganisationSite>
    {
        public VOrganisationSiteConfiguration()
            : this("dbo")
        {
        }

        public VOrganisationSiteConfiguration(string schema)
        {
            ToTable("vOrganisationSite", schema);
            HasKey(x => new { x.Id, x.OrganisationId, x.SiteId, x.OrganisationRoleId, x.UserId, x.OrganisationCode, x.OrganisationName, x.SiteCode, x.SiteName, x.OrganisationRoleCode, x.OrganisationRoleName });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationId).HasColumnName(@"OrganisationID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SiteId).HasColumnName(@"SiteID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationRoleId).HasColumnName(@"OrganisationRoleID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.OrganisationCode).HasColumnName(@"OrganisationCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationName).HasColumnName(@"OrganisationName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SiteCode).HasColumnName(@"SiteCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SiteName).HasColumnName(@"SiteName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationRoleCode).HasColumnName(@"OrganisationRoleCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationRoleName).HasColumnName(@"OrganisationRoleName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // vOrganisationStation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VOrganisationStationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VOrganisationStation>
    {
        public VOrganisationStationConfiguration()
            : this("dbo")
        {
        }

        public VOrganisationStationConfiguration(string schema)
        {
            ToTable("vOrganisationStation", schema);
            HasKey(x => new { x.Id, x.OrganisationId, x.StationId, x.OrganisationRoleId, x.UserId, x.OrganisationCode, x.OrganisationName, x.StationCode, x.StationName, x.OrganisationRoleCode, x.OrganisationRoleName });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationId).HasColumnName(@"OrganisationID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StationId).HasColumnName(@"StationID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationRoleId).HasColumnName(@"OrganisationRoleID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.OrganisationCode).HasColumnName(@"OrganisationCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationName).HasColumnName(@"OrganisationName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StationCode).HasColumnName(@"StationCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StationName).HasColumnName(@"StationName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationRoleCode).HasColumnName(@"OrganisationRoleCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationRoleName).HasColumnName(@"OrganisationRoleName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // vProject
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VProjectConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VProject>
    {
        public VProjectConfiguration()
            : this("dbo")
        {
        }

        public VProjectConfiguration(string schema)
        {
            ToTable("vProject", schema);
            HasKey(x => new { x.Id, x.Code, x.Name, x.UserId });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgrammeId).HasColumnName(@"ProgrammeID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5000);
            Property(x => x.Url).HasColumnName(@"Url").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(250);
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.ProgrammeCode).HasColumnName(@"ProgrammeCode").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ProgrammeName).HasColumnName(@"ProgrammeName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(150);
        }
    }

    // vProjectSite
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VProjectSiteConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VProjectSite>
    {
        public VProjectSiteConfiguration()
            : this("dbo")
        {
        }

        public VProjectSiteConfiguration(string schema)
        {
            ToTable("vProjectSite", schema);
            HasKey(x => new { x.Id, x.Code, x.Name, x.Description, x.OrganisationId, x.UserId, x.OrganisationName });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(5000).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationId).HasColumnName(@"OrganisationID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationName).HasColumnName(@"OrganisationName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(203).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // vProjectStation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VProjectStationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VProjectStation>
    {
        public VProjectStationConfiguration()
            : this("dbo")
        {
        }

        public VProjectStationConfiguration(string schema)
        {
            ToTable("vProjectStation", schema);
            HasKey(x => new { x.Id, x.ProjectId, x.StationId, x.UserId, x.ProjectCode, x.ProjectName, x.StationCode, x.StationName });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProjectId).HasColumnName(@"ProjectID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StationId).HasColumnName(@"StationID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.ProjectCode).HasColumnName(@"ProjectCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProjectName).HasColumnName(@"ProjectName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StationCode).HasColumnName(@"StationCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StationName).HasColumnName(@"StationName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // vSchemaColumn
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VSchemaColumnConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VSchemaColumn>
    {
        public VSchemaColumnConfiguration()
            : this("dbo")
        {
        }

        public VSchemaColumnConfiguration(string schema)
        {
            ToTable("vSchemaColumn", schema);
            HasKey(x => new { x.Id, x.DataSchemaId, x.Number, x.Name, x.SchemaColumnTypeId, x.UserId, x.SchemaColumnTypeName });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DataSchemaId).HasColumnName(@"DataSchemaID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Number).HasColumnName(@"Number").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchemaColumnTypeId).HasColumnName(@"SchemaColumnTypeID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Width).HasColumnName(@"Width").HasColumnType("int").IsOptional();
            Property(x => x.Format).HasColumnName(@"Format").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.PhenomenonId).HasColumnName(@"PhenomenonID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.PhenomenonOfferingId).HasColumnName(@"PhenomenonOfferingID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.PhenomenonUomid).HasColumnName(@"PhenomenonUOMID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.EmptyValue).HasColumnName(@"EmptyValue").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.FixedTime).HasColumnName(@"FixedTime").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.SchemaColumnTypeName).HasColumnName(@"SchemaColumnTypeName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhenomenonName).HasColumnName(@"PhenomenonName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(150);
            Property(x => x.OfferingName).HasColumnName(@"OfferingName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(150);
            Property(x => x.UnitOfMeasureUnit).HasColumnName(@"UnitOfMeasureUnit").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
        }
    }

    // vSensor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VSensorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VSensor>
    {
        public VSensorConfiguration()
            : this("dbo")
        {
        }

        public VSensorConfiguration(string schema)
        {
            ToTable("vSensor", schema);
            HasKey(x => new { x.Id, x.Code, x.Name, x.DataSourceId, x.PhenomenonId, x.PhenomenonName, x.UserId, x.Site, x.Station, x.Instrument, x.DataSourceName });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5000);
            Property(x => x.Url).HasColumnName(@"Url").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(250);
            Property(x => x.DataSourceId).HasColumnName(@"DataSourceID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhenomenonId).HasColumnName(@"PhenomenonID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhenomenonName).HasColumnName(@"PhenomenonName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Site).HasColumnName(@"Site").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Station).HasColumnName(@"Station").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Instrument).HasColumnName(@"Instrument").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DataSourceName).HasColumnName(@"DataSourceName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DataSchemaId).HasColumnName(@"DataSchemaID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.DataSchemaName).HasColumnName(@"DataSchemaName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
        }
    }

    // vSiteOrganisation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VSiteOrganisationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VSiteOrganisation>
    {
        public VSiteOrganisationConfiguration()
            : this("dbo")
        {
        }

        public VSiteOrganisationConfiguration(string schema)
        {
            ToTable("vSiteOrganisation", schema);
            HasKey(x => new { x.Id, x.OrganisationId, x.OrganisationCode, x.OrganisationName, x.SiteCode, x.SiteName, x.OrganisationRoleId, x.OrganisationRoleCode, x.OrganisationRoleName, x.Level, x.LevelCode, x.LevelName, x.Weight });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationId).HasColumnName(@"OrganisationID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationCode).HasColumnName(@"OrganisationCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationName).HasColumnName(@"OrganisationName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SiteId).HasColumnName(@"SiteID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.SiteCode).HasColumnName(@"SiteCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SiteName).HasColumnName(@"SiteName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationRoleId).HasColumnName(@"OrganisationRoleID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationRoleCode).HasColumnName(@"OrganisationRoleCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationRoleName).HasColumnName(@"OrganisationRoleName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.Level).HasColumnName(@"Level").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(10).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LevelCode).HasColumnName(@"LevelCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LevelName).HasColumnName(@"LevelName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Weight).HasColumnName(@"Weight").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IsReadOnly).HasColumnName(@"IsReadOnly").HasColumnType("bit").IsOptional();
        }
    }

    // vStation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VStationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VStation>
    {
        public VStationConfiguration()
            : this("dbo")
        {
        }

        public VStationConfiguration(string schema)
        {
            ToTable("vStation", schema);
            HasKey(x => new { x.Id, x.Code, x.Name, x.UserId });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5000);
            Property(x => x.Url).HasColumnName(@"Url").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(250);
            Property(x => x.Latitude).HasColumnName(@"Latitude").HasColumnType("float").IsOptional();
            Property(x => x.Longitude).HasColumnName(@"Longitude").HasColumnType("float").IsOptional();
            Property(x => x.Elevation).HasColumnName(@"Elevation").HasColumnType("int").IsOptional();
            Property(x => x.ProjectSiteId).HasColumnName(@"ProjectSiteID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SiteId).HasColumnName(@"SiteID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.ProjectSiteName).HasColumnName(@"ProjectSiteName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(203);
            Property(x => x.SiteCode).HasColumnName(@"SiteCode").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.SiteName).HasColumnName(@"SiteName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(150);
        }
    }

    // vStationInstrument
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VStationInstrumentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VStationInstrument>
    {
        public VStationInstrumentConfiguration()
            : this("dbo")
        {
        }

        public VStationInstrumentConfiguration(string schema)
        {
            ToTable("vStationInstrument", schema);
            HasKey(x => new { x.Id, x.StationId, x.InstrumentId, x.UserId, x.StationCode, x.StationName, x.InstrumentCode, x.InstrumentName });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StationId).HasColumnName(@"StationID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InstrumentId).HasColumnName(@"InstrumentID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddedAt).HasColumnName(@"AddedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType("datetime").IsOptional();
            Property(x => x.StationCode).HasColumnName(@"StationCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StationName).HasColumnName(@"StationName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InstrumentCode).HasColumnName(@"InstrumentCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InstrumentName).HasColumnName(@"InstrumentName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // vStationOrganisation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VStationOrganisationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VStationOrganisation>
    {
        public VStationOrganisationConfiguration()
            : this("dbo")
        {
        }

        public VStationOrganisationConfiguration(string schema)
        {
            ToTable("vStationOrganisation", schema);
            HasKey(x => new { x.Id, x.OrganisationId, x.OrganisationCode, x.OrganisationName, x.StationId, x.StationCode, x.StationName, x.OrganisationRoleId, x.OrganisationRoleCode, x.OrganisationRoleName, x.Level, x.LevelCode, x.LevelName, x.Weight });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationId).HasColumnName(@"OrganisationID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationCode).HasColumnName(@"OrganisationCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationName).HasColumnName(@"OrganisationName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StationId).HasColumnName(@"StationID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StationCode).HasColumnName(@"StationCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StationName).HasColumnName(@"StationName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationRoleId).HasColumnName(@"OrganisationRoleID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationRoleCode).HasColumnName(@"OrganisationRoleCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OrganisationRoleName).HasColumnName(@"OrganisationRoleName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.Level).HasColumnName(@"Level").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(10).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LevelCode).HasColumnName(@"LevelCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LevelName).HasColumnName(@"LevelName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Weight).HasColumnName(@"Weight").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IsReadOnly).HasColumnName(@"IsReadOnly").HasColumnType("bit").IsOptional();
        }
    }

    // vUserInfo
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VUserInfoConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VUserInfo>
    {
        public VUserInfoConfiguration()
            : this("dbo")
        {
        }

        public VUserInfoConfiguration(string schema)
        {
            ToTable("vUserInfo", schema);
            HasKey(x => new { x.UserId, x.LastActivityDate, x.UserName, x.CreateDate });

            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LastActivityDate).HasColumnName(@"LastActivityDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar").IsRequired().HasMaxLength(256).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.Comment).HasColumnName(@"Comment").HasColumnType("ntext").IsOptional().IsMaxLength();
        }
    }

    #endregion

    #region Stored procedure return models

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetAnyDataInTablesReturnModel
    {
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
        public class ResultSetModel1
        {
            public System.String Column1 { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel1> ResultSet1;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
        public class ResultSetModel2
        {
            public System.String Column1 { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel2> ResultSet2;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
        public class ResultSetModel3
        {
            public System.String Column1 { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel3> ResultSet3;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
        public class ResultSetModel4
        {
            public System.String Column1 { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel4> ResultSet4;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
        public class ResultSetModel5
        {
            public System.String Column1 { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel5> ResultSet5;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
        public class ResultSetModel6
        {
            public System.String Column1 { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel6> ResultSet6;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
        public class ResultSetModel7
        {
            public System.String Column1 { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel7> ResultSet7;

    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetMembershipGetPasswordReturnModel
    {
        public System.String Column1 { get; set; }
        public System.Int32? Column2 { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetMembershipGetPasswordWithFormatReturnModel
    {
        public System.String Column1 { get; set; }
        public System.Int32? Column2 { get; set; }
        public System.String Column3 { get; set; }
        public System.Int32? Column4 { get; set; }
        public System.Int32? Column5 { get; set; }
        public System.Boolean? Column6 { get; set; }
        public System.DateTime? Column7 { get; set; }
        public System.DateTime? Column8 { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetMembershipGetUserByEmailReturnModel
    {
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
        public class ResultSetModel1
        {
            public System.String UserName { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel1> ResultSet1;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
        public class ResultSetModel2
        {
            public System.String UserName { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel2> ResultSet2;

    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetMembershipGetUserByNameReturnModel
    {
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
        public class ResultSetModel1
        {
            public System.String Email { get; set; }
            public System.String PasswordQuestion { get; set; }
            public System.String Comment { get; set; }
            public System.Boolean IsApproved { get; set; }
            public System.DateTime CreateDate { get; set; }
            public System.DateTime LastLoginDate { get; set; }
            public System.DateTime LastActivityDate { get; set; }
            public System.DateTime LastPasswordChangedDate { get; set; }
            public System.Guid UserId { get; set; }
            public System.Boolean IsLockedOut { get; set; }
            public System.DateTime LastLockoutDate { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel1> ResultSet1;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
        public class ResultSetModel2
        {
            public System.String Email { get; set; }
            public System.String PasswordQuestion { get; set; }
            public System.String Comment { get; set; }
            public System.Boolean IsApproved { get; set; }
            public System.DateTime CreateDate { get; set; }
            public System.DateTime LastLoginDate { get; set; }
            public System.DateTime LastActivityDate { get; set; }
            public System.DateTime LastPasswordChangedDate { get; set; }
            public System.Guid UserId { get; set; }
            public System.Boolean IsLockedOut { get; set; }
            public System.DateTime LastLockoutDate { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel2> ResultSet2;

    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetMembershipGetUserByUserIdReturnModel
    {
        public System.String Email { get; set; }
        public System.String PasswordQuestion { get; set; }
        public System.String Comment { get; set; }
        public System.Boolean IsApproved { get; set; }
        public System.DateTime CreateDate { get; set; }
        public System.DateTime LastLoginDate { get; set; }
        public System.DateTime LastActivityDate { get; set; }
        public System.DateTime LastPasswordChangedDate { get; set; }
        public System.String UserName { get; set; }
        public System.Boolean IsLockedOut { get; set; }
        public System.DateTime LastLockoutDate { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetPersonalizationAllUsersGetPageSettingsReturnModel
    {
        public System.Byte[] PageSettings { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetPersonalizationPerUserGetPageSettingsReturnModel
    {
        public System.Byte[] PageSettings { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetProfileDeleteInactiveProfilesReturnModel
    {
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
        public class ResultSetModel1
        {
            public System.Int32? Column1 { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel1> ResultSet1;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
        public class ResultSetModel2
        {
            public System.Int32? Column1 { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel2> ResultSet2;

    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetProfileDeleteProfilesReturnModel
    {
        public System.Int32? Column1 { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetProfileGetNumberOfInactiveProfilesReturnModel
    {
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
        public class ResultSetModel1
        {
            public System.Int32? Column1 { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel1> ResultSet1;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
        public class ResultSetModel2
        {
            public System.Int32? Column1 { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel2> ResultSet2;

    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetProfileGetPropertiesReturnModel
    {
        public System.String PropertyNames { get; set; }
        public System.String PropertyValuesString { get; set; }
        public System.Byte[] PropertyValuesBinary { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetRolesGetAllRolesReturnModel
    {
        public System.String RoleName { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetUsersInRolesAddUsersToRolesReturnModel
    {
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
        public class ResultSetModel1
        {
            public System.String Name { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel1> ResultSet1;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
        public class ResultSetModel2
        {
            public System.String UserName { get; set; }
            public System.String RoleName { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel2> ResultSet2;

    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetUsersInRolesFindUsersInRoleReturnModel
    {
        public System.String UserName { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetUsersInRolesGetRolesForUserReturnModel
    {
        public System.String RoleName { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetUsersInRolesGetUsersInRolesReturnModel
    {
        public System.String UserName { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AspnetUsersInRolesRemoveUsersFromRolesReturnModel
    {
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
        public class ResultSetModel1
        {
            public System.String Column1 { get; set; }
            public System.String Name { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel1> ResultSet1;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
        public class ResultSetModel2
        {
            public System.String Name { get; set; }
            public System.String Column1 { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel2> ResultSet2;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
        public class ResultSetModel3
        {
            public System.String UserName { get; set; }
            public System.String RoleName { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel3> ResultSet3;

    }

    #endregion

}
// </auto-generated>

