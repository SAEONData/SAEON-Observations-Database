/*
Deployment script for ObservationsTest

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "ObservationsTest"
:setvar DefaultFilePrefix "ObservationsTest"
:setvar DefaultDataPath "D:\Program Files\Microsoft SQL Server\MSSQL14.SAEON\MSSQL\DATA\"
:setvar DefaultLogPath "D:\Program Files\Microsoft SQL Server\MSSQL14.SAEON\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF (SELECT is_default
    FROM   [$(DatabaseName)].[sys].[filegroups]
    WHERE  [name] = N'Documents') = 0
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            MODIFY FILEGROUP [Documents] DEFAULT;
    END


GO
PRINT N'Dropping [dbo].[DF_DataLog_ID]...';


GO
ALTER TABLE [dbo].[DataLog] DROP CONSTRAINT [DF_DataLog_ID];


GO
PRINT N'Dropping [dbo].[DF_DataLog_ImportDate]...';


GO
ALTER TABLE [dbo].[DataLog] DROP CONSTRAINT [DF_DataLog_ImportDate];


GO
PRINT N'Dropping [dbo].[DF_DataLog_AddedAt]...';


GO
ALTER TABLE [dbo].[DataLog] DROP CONSTRAINT [DF_DataLog_AddedAt];


GO
PRINT N'Dropping [dbo].[DF_DataLog_UpdatedAt]...';


GO
ALTER TABLE [dbo].[DataLog] DROP CONSTRAINT [DF_DataLog_UpdatedAt];


GO
PRINT N'Dropping [dbo].[DF_Instrument_Sensor_ID]...';


GO
ALTER TABLE [dbo].[Instrument_Sensor] DROP CONSTRAINT [DF_Instrument_Sensor_ID];


GO
PRINT N'Dropping [dbo].[DF_Instrument_Sensor_AddedAt]...';


GO
ALTER TABLE [dbo].[Instrument_Sensor] DROP CONSTRAINT [DF_Instrument_Sensor_AddedAt];


GO
PRINT N'Dropping [dbo].[DF_Instrument_Sensor_UpdatedAt]...';


GO
ALTER TABLE [dbo].[Instrument_Sensor] DROP CONSTRAINT [DF_Instrument_Sensor_UpdatedAt];


GO
PRINT N'Dropping [dbo].[DF_Observation_AddedDate]...';


GO
ALTER TABLE [dbo].[Observation] DROP CONSTRAINT [DF_Observation_AddedDate];


GO
PRINT N'Dropping [dbo].[DF_Observation_AddedAt]...';


GO
ALTER TABLE [dbo].[Observation] DROP CONSTRAINT [DF_Observation_AddedAt];


GO
PRINT N'Dropping [dbo].[DF_Observation_UpdatedAt]...';


GO
ALTER TABLE [dbo].[Observation] DROP CONSTRAINT [DF_Observation_UpdatedAt];


GO
PRINT N'Dropping [dbo].[DF_Sensor_ID]...';


GO
ALTER TABLE [dbo].[Sensor] DROP CONSTRAINT [DF_Sensor_ID];


GO
PRINT N'Dropping [dbo].[DF_Sensor_AddedAt]...';


GO
ALTER TABLE [dbo].[Sensor] DROP CONSTRAINT [DF_Sensor_AddedAt];


GO
PRINT N'Dropping [dbo].[DF_Sensor_UpdatedAt]...';


GO
ALTER TABLE [dbo].[Sensor] DROP CONSTRAINT [DF_Sensor_UpdatedAt];


GO
PRINT N'Dropping [dbo].[FK_DataLog_Sensor]...';


GO
ALTER TABLE [dbo].[DataLog] DROP CONSTRAINT [FK_DataLog_Sensor];


GO
PRINT N'Dropping [dbo].[FK_DataLog_Status]...';


GO
ALTER TABLE [dbo].[DataLog] DROP CONSTRAINT [FK_DataLog_Status];


GO
PRINT N'Dropping [dbo].[FK_DataLog_StatusReason]...';


GO
ALTER TABLE [dbo].[DataLog] DROP CONSTRAINT [FK_DataLog_StatusReason];


GO
PRINT N'Dropping [dbo].[FK_DataLog_aspnet_Users]...';


GO
ALTER TABLE [dbo].[DataLog] DROP CONSTRAINT [FK_DataLog_aspnet_Users];


GO
PRINT N'Dropping [dbo].[FK_DataLog_DataSourceTransformation]...';


GO
ALTER TABLE [dbo].[DataLog] DROP CONSTRAINT [FK_DataLog_DataSourceTransformation];


GO
PRINT N'Dropping [dbo].[FK_DataLog_ImportBatch]...';


GO
ALTER TABLE [dbo].[DataLog] DROP CONSTRAINT [FK_DataLog_ImportBatch];


GO
PRINT N'Dropping [dbo].[FK_DataLog_PhenomenonOffering]...';


GO
ALTER TABLE [dbo].[DataLog] DROP CONSTRAINT [FK_DataLog_PhenomenonOffering];


GO
PRINT N'Dropping [dbo].[FK_DataLog_PhenomenonUOM]...';


GO
ALTER TABLE [dbo].[DataLog] DROP CONSTRAINT [FK_DataLog_PhenomenonUOM];


GO
PRINT N'Dropping [dbo].[FK_Instrument_Sensor_aspnet_Users]...';


GO
ALTER TABLE [dbo].[Instrument_Sensor] DROP CONSTRAINT [FK_Instrument_Sensor_aspnet_Users];


GO
PRINT N'Dropping [dbo].[FK_Instrument_Sensor_Instrument]...';


GO
ALTER TABLE [dbo].[Instrument_Sensor] DROP CONSTRAINT [FK_Instrument_Sensor_Instrument];


GO
PRINT N'Dropping [dbo].[FK_Instrument_Sensor_Sensor]...';


GO
ALTER TABLE [dbo].[Instrument_Sensor] DROP CONSTRAINT [FK_Instrument_Sensor_Sensor];


GO
PRINT N'Dropping [dbo].[FK_Observation_ImportBatch]...';


GO
ALTER TABLE [dbo].[Observation] DROP CONSTRAINT [FK_Observation_ImportBatch];


GO
PRINT N'Dropping [dbo].[FK_Observation_Status]...';


GO
ALTER TABLE [dbo].[Observation] DROP CONSTRAINT [FK_Observation_Status];


GO
PRINT N'Dropping [dbo].[FK_Observation_StatusReason]...';


GO
ALTER TABLE [dbo].[Observation] DROP CONSTRAINT [FK_Observation_StatusReason];


GO
PRINT N'Dropping [dbo].[FK_Observation_aspnet_Users]...';


GO
ALTER TABLE [dbo].[Observation] DROP CONSTRAINT [FK_Observation_aspnet_Users];


GO
PRINT N'Dropping [dbo].[FK_Observation_PhenomenonOffering]...';


GO
ALTER TABLE [dbo].[Observation] DROP CONSTRAINT [FK_Observation_PhenomenonOffering];


GO
PRINT N'Dropping [dbo].[FK_Observation_PhenomenonUOM]...';


GO
ALTER TABLE [dbo].[Observation] DROP CONSTRAINT [FK_Observation_PhenomenonUOM];


GO
PRINT N'Dropping [dbo].[FK_Observation_Sensor]...';


GO
ALTER TABLE [dbo].[Observation] DROP CONSTRAINT [FK_Observation_Sensor];


GO
PRINT N'Dropping [dbo].[FK_Sensor_aspnet_Users]...';


GO
ALTER TABLE [dbo].[Sensor] DROP CONSTRAINT [FK_Sensor_aspnet_Users];


GO
PRINT N'Dropping [dbo].[FK_Sensor_DataSchema]...';


GO
ALTER TABLE [dbo].[Sensor] DROP CONSTRAINT [FK_Sensor_DataSchema];


GO
PRINT N'Dropping [dbo].[FK_Sensor_DataSource]...';


GO
ALTER TABLE [dbo].[Sensor] DROP CONSTRAINT [FK_Sensor_DataSource];


GO
PRINT N'Dropping [dbo].[FK_Sensor_Phenomenon]...';


GO
ALTER TABLE [dbo].[Sensor] DROP CONSTRAINT [FK_Sensor_Phenomenon];


GO
PRINT N'Dropping [dbo].[FK_DataSourceTransformation_Sensor]...';


GO
ALTER TABLE [dbo].[DataSourceTransformation] DROP CONSTRAINT [FK_DataSourceTransformation_Sensor];


GO
PRINT N'Starting rebuilding table [dbo].[DataLog]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_DataLog] (
    [ID]                         UNIQUEIDENTIFIER CONSTRAINT [DF_DataLog_ID] DEFAULT newid() NOT NULL,
    [SensorID]                   UNIQUEIDENTIFIER NULL,
    [ImportDate]                 DATETIME         CONSTRAINT [DF_DataLog_ImportDate] DEFAULT (getdate()) NOT NULL,
    [ValueDate]                  DATETIME         NULL,
    [ValueTime]                  DATETIME         NULL,
    [ValueDay]                   AS               CAST (ValueDate AS DATE),
    [ValueText]                  VARCHAR (50)     NOT NULL,
    [TransformValueText]         VARCHAR (50)     NULL,
    [RawValue]                   FLOAT (53)       NULL,
    [DataValue]                  FLOAT (53)       NULL,
    [Comment]                    VARCHAR (250)    NULL,
    [InvalidDateValue]           VARCHAR (50)     NULL,
    [InvalidTimeValue]           VARCHAR (50)     NULL,
    [InvalidOffering]            VARCHAR (50)     NULL,
    [InvalidUOM]                 VARCHAR (50)     NULL,
    [DataSourceTransformationID] UNIQUEIDENTIFIER NULL,
    [StatusID]                   UNIQUEIDENTIFIER NOT NULL,
    [StatusReasonID]             UNIQUEIDENTIFIER NULL,
    [ImportStatus]               VARCHAR (500)    NOT NULL,
    [UserId]                     UNIQUEIDENTIFIER NULL,
    [PhenomenonOfferingID]       UNIQUEIDENTIFIER NULL,
    [PhenomenonUOMID]            UNIQUEIDENTIFIER NULL,
    [ImportBatchID]              UNIQUEIDENTIFIER NOT NULL,
    [RawRecordData]              VARCHAR (500)    NULL,
    [RawFieldValue]              VARCHAR (50)     NOT NULL,
    [CorrelationID]              UNIQUEIDENTIFIER NULL,
    [AddedAt]                    DATETIME         CONSTRAINT [DF_DataLog_AddedAt] DEFAULT GetDate() NULL,
    [UpdatedAt]                  DATETIME         CONSTRAINT [DF_DataLog_UpdatedAt] DEFAULT GetDate() NULL,
    [RowVersion]                 ROWVERSION       NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_DataLog1] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_UX_DataLog1] UNIQUE NONCLUSTERED ([ImportBatchID] ASC, [SensorID] ASC, [ValueDate] ASC, [RawValue] ASC, [PhenomenonOfferingID] ASC, [PhenomenonUOMID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[DataLog])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_DataLog] ([ID], [SensorID], [ImportDate], [ValueDate], [ValueTime], [ValueText], [TransformValueText], [RawValue], [DataValue], [Comment], [InvalidDateValue], [InvalidTimeValue], [InvalidOffering], [InvalidUOM], [DataSourceTransformationID], [StatusID], [StatusReasonID], [ImportStatus], [UserId], [PhenomenonOfferingID], [PhenomenonUOMID], [ImportBatchID], [RawRecordData], [RawFieldValue], [CorrelationID], [AddedAt], [UpdatedAt])
        SELECT   [ID],
                 [SensorID],
                 [ImportDate],
                 [ValueDate],
                 [ValueTime],
                 [ValueText],
                 [TransformValueText],
                 [RawValue],
                 [DataValue],
                 [Comment],
                 [InvalidDateValue],
                 [InvalidTimeValue],
                 [InvalidOffering],
                 [InvalidUOM],
                 [DataSourceTransformationID],
                 [StatusID],
                 [StatusReasonID],
                 [ImportStatus],
                 [UserId],
                 [PhenomenonOfferingID],
                 [PhenomenonUOMID],
                 [ImportBatchID],
                 [RawRecordData],
                 [RawFieldValue],
                 [CorrelationID],
                 [AddedAt],
                 [UpdatedAt]
        FROM     [dbo].[DataLog]
        ORDER BY [ID] ASC;
    END

DROP TABLE [dbo].[DataLog];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_DataLog]', N'DataLog';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_DataLog1]', N'PK_DataLog', N'OBJECT';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_UX_DataLog1]', N'UX_DataLog', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[DataLog].[IX_DataLog_ImportBatchID]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataLog_ImportBatchID]
    ON [dbo].[DataLog]([ImportBatchID] ASC);


GO
PRINT N'Creating [dbo].[DataLog].[IX_DataLog_SensorID]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataLog_SensorID]
    ON [dbo].[DataLog]([SensorID] ASC);


GO
PRINT N'Creating [dbo].[DataLog].[IX_DataLog_ValueDay]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataLog_ValueDay]
    ON [dbo].[DataLog]([ValueDay] ASC);


GO
PRINT N'Creating [dbo].[DataLog].[IX_DataLog_DataSourceTransformationID]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataLog_DataSourceTransformationID]
    ON [dbo].[DataLog]([DataSourceTransformationID] ASC);


GO
PRINT N'Creating [dbo].[DataLog].[IX_DataLog_PhenomenonOfferingID]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataLog_PhenomenonOfferingID]
    ON [dbo].[DataLog]([PhenomenonOfferingID] ASC);


GO
PRINT N'Creating [dbo].[DataLog].[IX_DataLog_PhenomenonUOMID]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataLog_PhenomenonUOMID]
    ON [dbo].[DataLog]([PhenomenonUOMID] ASC);


GO
PRINT N'Creating [dbo].[DataLog].[IX_DataLog_StatusID]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataLog_StatusID]
    ON [dbo].[DataLog]([StatusID] ASC);


GO
PRINT N'Creating [dbo].[DataLog].[IX_DataLog_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataLog_UserId]
    ON [dbo].[DataLog]([UserId] ASC);


GO
PRINT N'Creating [dbo].[DataLog].[IX_DataLog_StatusReasonID]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataLog_StatusReasonID]
    ON [dbo].[DataLog]([StatusReasonID] ASC);


GO
PRINT N'Starting rebuilding table [dbo].[Instrument_Sensor]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Instrument_Sensor] (
    [ID]           UNIQUEIDENTIFIER CONSTRAINT [DF_Instrument_Sensor_ID] DEFAULT newid() NOT NULL,
    [InstrumentID] UNIQUEIDENTIFIER NOT NULL,
    [SensorID]     UNIQUEIDENTIFIER NOT NULL,
    [StartDate]    DATE             NULL,
    [EndDate]      DATE             NULL,
    [Latitude]     FLOAT (53)       NULL,
    [Longitude]    FLOAT (53)       NULL,
    [Elevation]    FLOAT (53)       NULL,
    [UserId]       UNIQUEIDENTIFIER NOT NULL,
    [AddedAt]      DATETIME         CONSTRAINT [DF_Instrument_Sensor_AddedAt] DEFAULT GetDate() NULL,
    [UpdatedAt]    DATETIME         CONSTRAINT [DF_Instrument_Sensor_UpdatedAt] DEFAULT GetDate() NULL,
    [RowVersion]   ROWVERSION       NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Instrument_Sensor1] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_UX_Instrument_Sensor1] UNIQUE NONCLUSTERED ([InstrumentID] ASC, [SensorID] ASC, [StartDate] ASC, [EndDate] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Instrument_Sensor])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_Instrument_Sensor] ([ID], [InstrumentID], [SensorID], [StartDate], [EndDate], [UserId], [AddedAt], [UpdatedAt])
        SELECT   [ID],
                 [InstrumentID],
                 [SensorID],
                 [StartDate],
                 [EndDate],
                 [UserId],
                 [AddedAt],
                 [UpdatedAt]
        FROM     [dbo].[Instrument_Sensor]
        ORDER BY [ID] ASC;
    END

DROP TABLE [dbo].[Instrument_Sensor];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Instrument_Sensor]', N'Instrument_Sensor';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_Instrument_Sensor1]', N'PK_Instrument_Sensor', N'OBJECT';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_UX_Instrument_Sensor1]', N'UX_Instrument_Sensor', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[Instrument_Sensor].[IX_Instrument_Sensor_InstrumentID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Instrument_Sensor_InstrumentID]
    ON [dbo].[Instrument_Sensor]([InstrumentID] ASC);


GO
PRINT N'Creating [dbo].[Instrument_Sensor].[IX_Instrument_Sensor_SensorID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Instrument_Sensor_SensorID]
    ON [dbo].[Instrument_Sensor]([SensorID] ASC);


GO
PRINT N'Creating [dbo].[Instrument_Sensor].[IX_Instrument_Sensor_StartDate]...';


GO
CREATE NONCLUSTERED INDEX [IX_Instrument_Sensor_StartDate]
    ON [dbo].[Instrument_Sensor]([StartDate] ASC);


GO
PRINT N'Creating [dbo].[Instrument_Sensor].[IX_Instrument_Sensor_EndDate]...';


GO
CREATE NONCLUSTERED INDEX [IX_Instrument_Sensor_EndDate]
    ON [dbo].[Instrument_Sensor]([EndDate] ASC);


GO
PRINT N'Creating [dbo].[Instrument_Sensor].[IX_Instrument_Sensor_Latitude]...';


GO
CREATE NONCLUSTERED INDEX [IX_Instrument_Sensor_Latitude]
    ON [dbo].[Instrument_Sensor]([Latitude] ASC);


GO
PRINT N'Creating [dbo].[Instrument_Sensor].[IX_Instrument_Sensor_Longitude]...';


GO
CREATE NONCLUSTERED INDEX [IX_Instrument_Sensor_Longitude]
    ON [dbo].[Instrument_Sensor]([Longitude] ASC);


GO
PRINT N'Creating [dbo].[Instrument_Sensor].[IX_Instrument_Sensor_Elevation]...';


GO
CREATE NONCLUSTERED INDEX [IX_Instrument_Sensor_Elevation]
    ON [dbo].[Instrument_Sensor]([Elevation] ASC);


GO
PRINT N'Creating [dbo].[Instrument_Sensor].[IX_Instrument_Sensor_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Instrument_Sensor_UserId]
    ON [dbo].[Instrument_Sensor]([UserId] ASC);


GO
PRINT N'Starting rebuilding table [dbo].[Observation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Observation] (
    [ID]                   INT                  IDENTITY (1, 1) NOT NULL,
    [SensorID]             UNIQUEIDENTIFIER     NOT NULL,
    [ValueDate]            DATETIME             NOT NULL,
    [ValueDay]             AS                   CAST (ValueDate AS DATE),
    [ValueYear]            AS                   Year(ValueDate),
    [ValueDecade]          AS                   Year(ValueDate) / 10,
    [TextValue]            VARCHAR (10)         NULL,
    [RawValue]             FLOAT (53)           NULL,
    [DataValue]            FLOAT (53)           NULL,
    [Comment]              VARCHAR (250) SPARSE NULL,
    [PhenomenonOfferingID] UNIQUEIDENTIFIER     NOT NULL,
    [PhenomenonUOMID]      UNIQUEIDENTIFIER     NOT NULL,
    [ImportBatchID]        UNIQUEIDENTIFIER     NOT NULL,
    [StatusID]             UNIQUEIDENTIFIER     NULL,
    [StatusReasonID]       UNIQUEIDENTIFIER     NULL,
    [CorrelationID]        UNIQUEIDENTIFIER     NULL,
    [Latitude]             FLOAT (53)           NULL,
    [Longitude]            FLOAT (53)           NULL,
    [Elevation]            FLOAT (53)           NULL,
    [UserId]               UNIQUEIDENTIFIER     NOT NULL,
    [AddedDate]            DATETIME             CONSTRAINT [DF_Observation_AddedDate] DEFAULT getdate() NOT NULL,
    [AddedAt]              DATETIME             CONSTRAINT [DF_Observation_AddedAt] DEFAULT GetDate() NULL,
    [UpdatedAt]            DATETIME             CONSTRAINT [DF_Observation_UpdatedAt] DEFAULT GetDate() NULL,
    [RowVersion]           ROWVERSION           NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Observation1] PRIMARY KEY CLUSTERED ([ID] ASC) ON [Observations],
    CONSTRAINT [tmp_ms_xx_constraint_UX_Observation1] UNIQUE NONCLUSTERED ([SensorID] ASC, [ValueDate] ASC, [RawValue] ASC, [PhenomenonOfferingID] ASC, [PhenomenonUOMID] ASC) ON [Observations]
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Observation])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Observation] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Observation] ([ID], [SensorID], [ValueDate], [TextValue], [RawValue], [DataValue], [Comment], [PhenomenonOfferingID], [PhenomenonUOMID], [ImportBatchID], [StatusID], [StatusReasonID], [CorrelationID], [Elevation], [UserId], [AddedDate], [AddedAt], [UpdatedAt])
        SELECT   [ID],
                 [SensorID],
                 [ValueDate],
                 [TextValue],
                 [RawValue],
                 [DataValue],
                 [Comment],
                 [PhenomenonOfferingID],
                 [PhenomenonUOMID],
                 [ImportBatchID],
                 [StatusID],
                 [StatusReasonID],
                 [CorrelationID],
                 [Elevation],
                 [UserId],
                 [AddedDate],
                 [AddedAt],
                 [UpdatedAt]
        FROM     [dbo].[Observation]
        ORDER BY [ID] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Observation] OFF;
    END

DROP TABLE [dbo].[Observation];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Observation]', N'Observation';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_Observation1]', N'PK_Observation', N'OBJECT';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_UX_Observation1]', N'UX_Observation', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[Observation].[IX_Observation_ImportBatchID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Observation_ImportBatchID]
    ON [dbo].[Observation]([ImportBatchID] ASC)
    INCLUDE([ValueDate], [RawValue], [DataValue], [Comment], [CorrelationID])
    ON [Observations];


GO
PRINT N'Creating [dbo].[Observation].[IX_Observation_SensorID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Observation_SensorID]
    ON [dbo].[Observation]([SensorID] ASC)
    ON [Observations];


GO
PRINT N'Creating [dbo].[Observation].[IX_Observation_SensorID_PhenomenonOfferingID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Observation_SensorID_PhenomenonOfferingID]
    ON [dbo].[Observation]([SensorID] ASC, [PhenomenonOfferingID] ASC)
    ON [Observations];


GO
PRINT N'Creating [dbo].[Observation].[IX_Observation_SensorID_PhenomenonUOMID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Observation_SensorID_PhenomenonUOMID]
    ON [dbo].[Observation]([SensorID] ASC, [PhenomenonUOMID] ASC)
    ON [Observations];


GO
PRINT N'Creating [dbo].[Observation].[IX_Observation_PhenomenonOfferingID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Observation_PhenomenonOfferingID]
    ON [dbo].[Observation]([PhenomenonOfferingID] ASC)
    ON [Observations];


GO
PRINT N'Creating [dbo].[Observation].[IX_Observation_PhenomenonUOMID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Observation_PhenomenonUOMID]
    ON [dbo].[Observation]([PhenomenonUOMID] ASC)
    ON [Observations];


GO
PRINT N'Creating [dbo].[Observation].[IX_Observation_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Observation_UserId]
    ON [dbo].[Observation]([UserId] ASC)
    ON [Observations];


GO
PRINT N'Creating [dbo].[Observation].[IX_Observation_AddedDate]...';


GO
CREATE NONCLUSTERED INDEX [IX_Observation_AddedDate]
    ON [dbo].[Observation]([AddedDate] ASC)
    ON [Observations];


GO
PRINT N'Creating [dbo].[Observation].[IX_Observation_ValueDate]...';


GO
CREATE NONCLUSTERED INDEX [IX_Observation_ValueDate]
    ON [dbo].[Observation]([ValueDate] ASC)
    ON [Observations];


GO
PRINT N'Creating [dbo].[Observation].[IX_Observation_ValueDateDesc]...';


GO
CREATE NONCLUSTERED INDEX [IX_Observation_ValueDateDesc]
    ON [dbo].[Observation]([ValueDate] DESC)
    ON [Observations];


GO
PRINT N'Creating [dbo].[Observation].[IX_Observation_ValueDay]...';


GO
CREATE NONCLUSTERED INDEX [IX_Observation_ValueDay]
    ON [dbo].[Observation]([ValueDay] ASC);


GO
PRINT N'Creating [dbo].[Observation].[IX_Observation_ValueYear]...';


GO
CREATE NONCLUSTERED INDEX [IX_Observation_ValueYear]
    ON [dbo].[Observation]([ValueYear] ASC);


GO
PRINT N'Creating [dbo].[Observation].[IX_Observation_ValueDecade]...';


GO
CREATE NONCLUSTERED INDEX [IX_Observation_ValueDecade]
    ON [dbo].[Observation]([ValueDecade] ASC);


GO
PRINT N'Creating [dbo].[Observation].[IX_Observation_StatusID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Observation_StatusID]
    ON [dbo].[Observation]([StatusID] ASC)
    ON [Observations];


GO
PRINT N'Creating [dbo].[Observation].[IX_Observation_StatusReasonID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Observation_StatusReasonID]
    ON [dbo].[Observation]([StatusReasonID] ASC)
    ON [Observations];


GO
PRINT N'Creating [dbo].[Observation].[IX_Observation_CorrelationID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Observation_CorrelationID]
    ON [dbo].[Observation]([CorrelationID] ASC)
    ON [Observations];


GO
PRINT N'Creating [dbo].[Observation].[IX_Observation_Latitude]...';


GO
CREATE NONCLUSTERED INDEX [IX_Observation_Latitude]
    ON [dbo].[Observation]([Latitude] ASC)
    ON [Observations];


GO
PRINT N'Creating [dbo].[Observation].[IX_Observation_Longitude]...';


GO
CREATE NONCLUSTERED INDEX [IX_Observation_Longitude]
    ON [dbo].[Observation]([Longitude] ASC)
    ON [Observations];


GO
PRINT N'Creating [dbo].[Observation].[IX_Observation_Elevation]...';


GO
CREATE NONCLUSTERED INDEX [IX_Observation_Elevation]
    ON [dbo].[Observation]([Elevation] ASC)
    ON [Observations];


GO
PRINT N'Starting rebuilding table [dbo].[Sensor]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Sensor] (
    [ID]           UNIQUEIDENTIFIER CONSTRAINT [DF_Sensor_ID] DEFAULT (newid()) NOT NULL,
    [Code]         VARCHAR (50)     NOT NULL,
    [Name]         VARCHAR (150)    NOT NULL,
    [Description]  VARCHAR (5000)   NULL,
    [Url]          VARCHAR (250)    NULL,
    [PhenomenonID] UNIQUEIDENTIFIER NOT NULL,
    [DataSourceID] UNIQUEIDENTIFIER NOT NULL,
    [DataSchemaID] UNIQUEIDENTIFIER NULL,
    [Latitude]     FLOAT (53)       NULL,
    [Longitude]    FLOAT (53)       NULL,
    [Elevation]    FLOAT (53)       NULL,
    [UserId]       UNIQUEIDENTIFIER NOT NULL,
    [AddedAt]      DATETIME         CONSTRAINT [DF_Sensor_AddedAt] DEFAULT GetDate() NULL,
    [UpdatedAt]    DATETIME         CONSTRAINT [DF_Sensor_UpdatedAt] DEFAULT GetDate() NULL,
    [RowVersion]   ROWVERSION       NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Sensor1] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_UX_Sensor_Code1] UNIQUE NONCLUSTERED ([Code] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Sensor])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_Sensor] ([ID], [Code], [Name], [Description], [Url], [PhenomenonID], [DataSourceID], [DataSchemaID], [UserId], [AddedAt], [UpdatedAt])
        SELECT   [ID],
                 [Code],
                 [Name],
                 [Description],
                 [Url],
                 [PhenomenonID],
                 [DataSourceID],
                 [DataSchemaID],
                 [UserId],
                 [AddedAt],
                 [UpdatedAt]
        FROM     [dbo].[Sensor]
        ORDER BY [ID] ASC;
    END

DROP TABLE [dbo].[Sensor];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Sensor]', N'Sensor';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_Sensor1]', N'PK_Sensor', N'OBJECT';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_UX_Sensor_Code1]', N'UX_Sensor_Code', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[Sensor].[IX_Sensor_PhenomenonID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Sensor_PhenomenonID]
    ON [dbo].[Sensor]([PhenomenonID] ASC);


GO
PRINT N'Creating [dbo].[Sensor].[IX_Sensor_DataSourceID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Sensor_DataSourceID]
    ON [dbo].[Sensor]([DataSourceID] ASC);


GO
PRINT N'Creating [dbo].[Sensor].[IX_Sensor_DataSchemaID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Sensor_DataSchemaID]
    ON [dbo].[Sensor]([DataSchemaID] ASC);


GO
PRINT N'Creating [dbo].[Sensor].[IX_Sensor_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Sensor_UserId]
    ON [dbo].[Sensor]([UserId] ASC);


GO
PRINT N'Creating [dbo].[Sensor].[IX_Sensor_Latitude]...';


GO
CREATE NONCLUSTERED INDEX [IX_Sensor_Latitude]
    ON [dbo].[Sensor]([Latitude] ASC);


GO
PRINT N'Creating [dbo].[Sensor].[IX_Sensor_Longitude]...';


GO
CREATE NONCLUSTERED INDEX [IX_Sensor_Longitude]
    ON [dbo].[Sensor]([Longitude] ASC);


GO
PRINT N'Creating [dbo].[Sensor].[IX_Sensor_Elevation]...';


GO
CREATE NONCLUSTERED INDEX [IX_Sensor_Elevation]
    ON [dbo].[Sensor]([Elevation] ASC);


GO
PRINT N'Creating [dbo].[Instrument].[IX_Instrument_Elevation]...';


GO
CREATE NONCLUSTERED INDEX [IX_Instrument_Elevation]
    ON [dbo].[Instrument]([Elevation] ASC);


GO
PRINT N'Creating [dbo].[Instrument].[IX_Instrument_Latitude]...';


GO
CREATE NONCLUSTERED INDEX [IX_Instrument_Latitude]
    ON [dbo].[Instrument]([Latitude] ASC);


GO
PRINT N'Creating [dbo].[Instrument].[IX_Instrument_Longitude]...';


GO
CREATE NONCLUSTERED INDEX [IX_Instrument_Longitude]
    ON [dbo].[Instrument]([Longitude] ASC);


GO
PRINT N'Creating [dbo].[Station].[IX_Station_Elevation]...';


GO
CREATE NONCLUSTERED INDEX [IX_Station_Elevation]
    ON [dbo].[Station]([Elevation] ASC);


GO
PRINT N'Creating [dbo].[Station].[IX_Station_EndDate]...';


GO
CREATE NONCLUSTERED INDEX [IX_Station_EndDate]
    ON [dbo].[Station]([EndDate] ASC);


GO
PRINT N'Creating [dbo].[Station].[IX_Station_Latitude]...';


GO
CREATE NONCLUSTERED INDEX [IX_Station_Latitude]
    ON [dbo].[Station]([Latitude] ASC);


GO
PRINT N'Creating [dbo].[Station].[IX_Station_Longitude]...';


GO
CREATE NONCLUSTERED INDEX [IX_Station_Longitude]
    ON [dbo].[Station]([Longitude] ASC);


GO
PRINT N'Creating [dbo].[Station].[IX_Station_StartDate]...';


GO
CREATE NONCLUSTERED INDEX [IX_Station_StartDate]
    ON [dbo].[Station]([StartDate] ASC);


GO
PRINT N'Creating [dbo].[Station_Instrument].[IX_Station_Instrument_Elevation]...';


GO
CREATE NONCLUSTERED INDEX [IX_Station_Instrument_Elevation]
    ON [dbo].[Station_Instrument]([Elevation] ASC);


GO
PRINT N'Creating [dbo].[Station_Instrument].[IX_Station_Instrument_Latitude]...';


GO
CREATE NONCLUSTERED INDEX [IX_Station_Instrument_Latitude]
    ON [dbo].[Station_Instrument]([Latitude] ASC);


GO
PRINT N'Creating [dbo].[Station_Instrument].[IX_Station_Instrument_Longitude]...';


GO
CREATE NONCLUSTERED INDEX [IX_Station_Instrument_Longitude]
    ON [dbo].[Station_Instrument]([Longitude] ASC);


GO
PRINT N'Creating [dbo].[FK_DataLog_Sensor]...';


GO
ALTER TABLE [dbo].[DataLog] WITH NOCHECK
    ADD CONSTRAINT [FK_DataLog_Sensor] FOREIGN KEY ([SensorID]) REFERENCES [dbo].[Sensor] ([ID]);


GO
PRINT N'Creating [dbo].[FK_DataLog_Status]...';


GO
ALTER TABLE [dbo].[DataLog] WITH NOCHECK
    ADD CONSTRAINT [FK_DataLog_Status] FOREIGN KEY ([StatusID]) REFERENCES [dbo].[Status] ([ID]);


GO
PRINT N'Creating [dbo].[FK_DataLog_StatusReason]...';


GO
ALTER TABLE [dbo].[DataLog] WITH NOCHECK
    ADD CONSTRAINT [FK_DataLog_StatusReason] FOREIGN KEY ([StatusReasonID]) REFERENCES [dbo].[StatusReason] ([ID]);


GO
PRINT N'Creating [dbo].[FK_DataLog_aspnet_Users]...';


GO
ALTER TABLE [dbo].[DataLog] WITH NOCHECK
    ADD CONSTRAINT [FK_DataLog_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_DataLog_DataSourceTransformation]...';


GO
ALTER TABLE [dbo].[DataLog] WITH NOCHECK
    ADD CONSTRAINT [FK_DataLog_DataSourceTransformation] FOREIGN KEY ([DataSourceTransformationID]) REFERENCES [dbo].[DataSourceTransformation] ([ID]);


GO
PRINT N'Creating [dbo].[FK_DataLog_ImportBatch]...';


GO
ALTER TABLE [dbo].[DataLog] WITH NOCHECK
    ADD CONSTRAINT [FK_DataLog_ImportBatch] FOREIGN KEY ([ImportBatchID]) REFERENCES [dbo].[ImportBatch] ([ID]);


GO
PRINT N'Creating [dbo].[FK_DataLog_PhenomenonOffering]...';


GO
ALTER TABLE [dbo].[DataLog] WITH NOCHECK
    ADD CONSTRAINT [FK_DataLog_PhenomenonOffering] FOREIGN KEY ([PhenomenonOfferingID]) REFERENCES [dbo].[PhenomenonOffering] ([ID]);


GO
PRINT N'Creating [dbo].[FK_DataLog_PhenomenonUOM]...';


GO
ALTER TABLE [dbo].[DataLog] WITH NOCHECK
    ADD CONSTRAINT [FK_DataLog_PhenomenonUOM] FOREIGN KEY ([PhenomenonUOMID]) REFERENCES [dbo].[PhenomenonUOM] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Instrument_Sensor_aspnet_Users]...';


GO
ALTER TABLE [dbo].[Instrument_Sensor] WITH NOCHECK
    ADD CONSTRAINT [FK_Instrument_Sensor_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_Instrument_Sensor_Instrument]...';


GO
ALTER TABLE [dbo].[Instrument_Sensor] WITH NOCHECK
    ADD CONSTRAINT [FK_Instrument_Sensor_Instrument] FOREIGN KEY ([InstrumentID]) REFERENCES [dbo].[Instrument] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Instrument_Sensor_Sensor]...';


GO
ALTER TABLE [dbo].[Instrument_Sensor] WITH NOCHECK
    ADD CONSTRAINT [FK_Instrument_Sensor_Sensor] FOREIGN KEY ([SensorID]) REFERENCES [dbo].[Sensor] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Observation_ImportBatch]...';


GO
ALTER TABLE [dbo].[Observation] WITH NOCHECK
    ADD CONSTRAINT [FK_Observation_ImportBatch] FOREIGN KEY ([ImportBatchID]) REFERENCES [dbo].[ImportBatch] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Observation_Status]...';


GO
ALTER TABLE [dbo].[Observation] WITH NOCHECK
    ADD CONSTRAINT [FK_Observation_Status] FOREIGN KEY ([StatusID]) REFERENCES [dbo].[Status] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Observation_StatusReason]...';


GO
ALTER TABLE [dbo].[Observation] WITH NOCHECK
    ADD CONSTRAINT [FK_Observation_StatusReason] FOREIGN KEY ([StatusReasonID]) REFERENCES [dbo].[StatusReason] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Observation_aspnet_Users]...';


GO
ALTER TABLE [dbo].[Observation] WITH NOCHECK
    ADD CONSTRAINT [FK_Observation_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_Observation_PhenomenonOffering]...';


GO
ALTER TABLE [dbo].[Observation] WITH NOCHECK
    ADD CONSTRAINT [FK_Observation_PhenomenonOffering] FOREIGN KEY ([PhenomenonOfferingID]) REFERENCES [dbo].[PhenomenonOffering] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Observation_PhenomenonUOM]...';


GO
ALTER TABLE [dbo].[Observation] WITH NOCHECK
    ADD CONSTRAINT [FK_Observation_PhenomenonUOM] FOREIGN KEY ([PhenomenonUOMID]) REFERENCES [dbo].[PhenomenonUOM] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Observation_Sensor]...';


GO
ALTER TABLE [dbo].[Observation] WITH NOCHECK
    ADD CONSTRAINT [FK_Observation_Sensor] FOREIGN KEY ([SensorID]) REFERENCES [dbo].[Sensor] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Sensor_aspnet_Users]...';


GO
ALTER TABLE [dbo].[Sensor] WITH NOCHECK
    ADD CONSTRAINT [FK_Sensor_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_Sensor_DataSchema]...';


GO
ALTER TABLE [dbo].[Sensor] WITH NOCHECK
    ADD CONSTRAINT [FK_Sensor_DataSchema] FOREIGN KEY ([DataSchemaID]) REFERENCES [dbo].[DataSchema] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Sensor_DataSource]...';


GO
ALTER TABLE [dbo].[Sensor] WITH NOCHECK
    ADD CONSTRAINT [FK_Sensor_DataSource] FOREIGN KEY ([DataSourceID]) REFERENCES [dbo].[DataSource] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Sensor_Phenomenon]...';


GO
ALTER TABLE [dbo].[Sensor] WITH NOCHECK
    ADD CONSTRAINT [FK_Sensor_Phenomenon] FOREIGN KEY ([PhenomenonID]) REFERENCES [dbo].[Phenomenon] ([ID]);


GO
PRINT N'Creating [dbo].[FK_DataSourceTransformation_Sensor]...';


GO
ALTER TABLE [dbo].[DataSourceTransformation] WITH NOCHECK
    ADD CONSTRAINT [FK_DataSourceTransformation_Sensor] FOREIGN KEY ([SensorID]) REFERENCES [dbo].[Sensor] ([ID]);


GO
PRINT N'Creating [dbo].[TR_DataLog_Insert]...';


GO
CREATE TRIGGER [dbo].[TR_DataLog_Insert] ON [dbo].[DataLog]
FOR INSERT
AS
BEGIN
    SET NoCount ON
    Update 
        src 
    set 
        AddedAt = GETDATE(),
        UpdatedAt = NULL
    from
        DataLog src
        inner join inserted ins 
            on (ins.ID = src.ID)
END
GO
PRINT N'Creating [dbo].[TR_DataLog_Update]...';


GO
CREATE TRIGGER [dbo].[TR_DataLog_Update] ON [dbo].[DataLog]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update 
        src 
    set 
--> Changed 2.0.19 20161205 TimPN
--		AddedAt = del.AddedAt,
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate ()),
--< Changed 2.0.19 20161205 TimPN
        UpdatedAt = GETDATE()
    from
        DataLog src
        inner join inserted ins 
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
--< Changed 2.0.15 20161102 TimPN
--< Added 2.0.8 20160708 TimPN
GO
PRINT N'Creating [dbo].[TR_Instrument_Sensor_Insert]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TRIGGER [dbo].[TR_Instrument_Sensor_Insert] ON [dbo].[Instrument_Sensor]
FOR INSERT
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = GETDATE(),
        UpdatedAt = NULL
    from
        Instrument_Sensor src
        inner join inserted ins
            on (ins.ID = src.ID)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[TR_Instrument_Sensor_Update]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TRIGGER [dbo].[TR_Instrument_Sensor_Update] ON [dbo].[Instrument_Sensor]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
--> Changed 2.0.19 20161205 TimPN
--		AddedAt = del.AddedAt,
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate ()),
--< Changed 2.0.19 20161205 TimPN
        UpdatedAt = GETDATE()
    from
        Instrument_Sensor src
        inner join inserted ins
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
--< Changed 2.0.15 20161102 TimPN
--> Added 2.0.5 20160530 TimPN
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[TR_Observation_Insert]...';


GO
CREATE TRIGGER [dbo].[TR_Observation_Insert] ON [dbo].[Observation]
FOR INSERT
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = GETDATE(),
        UpdatedAt = NULL
    from
        Observation src
        inner join inserted ins
            on (ins.ID = src.ID)
END
GO
PRINT N'Creating [dbo].[TR_Observation_Update]...';


GO
CREATE TRIGGER [dbo].[TR_Observation_Update] ON [dbo].[Observation]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
--> Changed 2.0.19 20161205 TimPN
--		AddedAt = del.AddedAt,
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate ()),
--< Changed 2.0.19 20161205 TimPN
        UpdatedAt = GETDATE()
    from
        Observation src
        inner join inserted ins
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
--< Changed 2.0.15 20161102 TimPN
--< Added 2.0.8 20160718 TimPN
/*
--> Added 2.0.35 20170824 TimPN
GO
CREATE TRIGGER [dbo].[TR_Observation_DuplicateOfNull] ON [dbo].[Observation]
FOR INSERT
AS
BEGIN
  SET NoCount ON
  if Exists(
    Select
      *
    from
      Inserted
      inner join Observation
        on (Inserted.SensorID = Observation.SensorID) and
           (Inserted.ValueDate = Observation.ValueDate) and
           (Inserted.PhenomenonOfferingID = Observation.PhenomenonOfferingID) and
           (Inserted.PhenomenonUOMID = Observation.PhenomenonUOMID)
      where
        (Observation.RawValue is null) --and (Inserted.RawValue is not null)
      )
    Throw 55555, 'Duplicate of null', 1
END
--< Added 2.0.35 20170824 TimPN
*/
GO
PRINT N'Creating [dbo].[TR_Sensor_Insert]...';


GO
CREATE TRIGGER [dbo].[TR_Sensor_Insert] ON [dbo].[Sensor]
FOR INSERT
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = GETDATE(),
        UpdatedAt = NULL
    from
        Sensor src
        inner join inserted ins 
            on (ins.ID = src.ID)
END
GO
PRINT N'Creating [dbo].[TR_Sensor_Update]...';


GO
CREATE TRIGGER [dbo].[TR_Sensor_Update] ON [dbo].[Sensor]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
--> Changed 2.0.19 20161205 TimPN
--		AddedAt = del.AddedAt,
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate ()),
--< Changed 2.0.19 20161205 TimPN
        UpdatedAt = GETDATE()
    from
        Sensor src
        inner join inserted ins
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
--< Changed 2.0.15 20161102 TimPN
--< Added 2.0.8 20160718 TimPN
GO
PRINT N'Refreshing [dbo].[vDataLog]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vDataLog]';


GO
PRINT N'Refreshing [dbo].[vApiDataDownload]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vApiDataDownload]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[vApiDataQuery]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vApiDataQuery]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[vApiInventory]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vApiInventory]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[vApiSpacialCoverage]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vApiSpacialCoverage]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[vApiTemporalCoverage]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vApiTemporalCoverage]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[vDataQuery]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vDataQuery]';


GO
PRINT N'Refreshing [dbo].[vInstrumentSensor]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vInstrumentSensor]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[vInventory]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vInventory]';


GO
PRINT N'Refreshing [dbo].[vInventoryInstruments]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vInventoryInstruments]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[vInventoryOrganisations]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vInventoryOrganisations]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[vInventoryStations]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vInventoryStations]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[vObservation]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vObservation]';


GO
PRINT N'Refreshing [dbo].[vSensor]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vSensor]';


GO
PRINT N'Altering [dbo].[vSensorDates]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
--> Added 2.0.29 20170324 TimPN
ALTER VIEW [dbo].[vSensorDates]
AS 
Select
  Sensor.ID SensorID,
  Sensor.Name SensorName,
  Instrument_Sensor.StartDate InstrumenSensorStartDate, Instrument_Sensor.EndDate InstrumenSensorEndDate,
  Instrument.Name InstrumentName, Instrument.StartDate InstrumentStartDate, Instrument.EndDate InstrumentEndDate,
  Station_Instrument.StartDate StationInstrumentStartDate, Station_Instrument.EndDate StationInstrumentEndDate,
  Station.Name StationName, Station.StartDate StationStartDate, Station.EndDate StationEndDate,
  Site.Name SiteName, Site.StartDate SiteStartDate, Site.EndDate SiteEndDate,
--> Added 2.0.37 20180205 TimPN
  (
  Select 
    Max(v) 
  from 
    (Values (Instrument_Sensor.StartDate),(Instrument.StartDate),(Station_Instrument.StartDate),(Station.StartDate),(Site.StartDate)) as Value(v)
  ) StartDate,
  (
  Select 
    Min(v) 
  from 
    (Values (Instrument_Sensor.EndDate),(Instrument.EndDate),(Station_Instrument.EndDate),(Station.EndDate),(Site.EndDate)) as Value(v)
  ) EndDate
--< Added 2.0.37 20180205 TimPN
from
  Sensor
  left join Instrument_Sensor
    on (Instrument_Sensor.SensorID = Sensor.ID)
  left join Instrument
    on (Instrument_Sensor.InstrumentID = Instrument.ID)
  left join Station_Instrument
    on (Station_Instrument.InstrumentID = Instrument.ID)
  left join Station
    on (Station_Instrument.StationID = Station.ID)
  left join Site
    on (Station.SiteID = Site.ID)
--< Added 2.0.29 20170324 TimPN
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[vInventoryPhenomenaOfferings]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vInventoryPhenomenaOfferings]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[vInventoryTotals]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vInventoryTotals]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[vInventoryYears]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vInventoryYears]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[vObservationsList]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vObservationsList]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[vSensorThingsDatastreams]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vSensorThingsDatastreams]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vOfferingPhemomena]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
--> Added 2.0.36 20171220 TimPN
CREATE VIEW [dbo].[vOfferingPhemomena]
AS 
Select
  PhenomenonOffering.OfferingID, Phenomenon.Code, Phenomenon.Name, Phenomenon.Description
from
  PhenomenonOffering
  inner join Offering
    on (PhenomenonOffering.OfferingID = Offering.ID)
  inner join Phenomenon
    on (PhenomenonOffering.PhenomenonID = Phenomenon.ID)
--< Added 2.0.36 20171220 TimPN
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vSensorLocation]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
--> Added 2.0.37 20180202 TimPN
CREATE VIEW [dbo].[vSensorLocation]
AS
Select
  Sensor.ID SensorID,
  Coalesce(Sensor.Latitude, Instrument_Sensor.Latitude, Instrument.Latitude, Station_Instrument.Latitude, Station.Latitude) Latitude,
  Coalesce(Sensor.Longitude, Instrument_Sensor.Longitude, Instrument.Longitude, Station_Instrument.Longitude, Station.Longitude) Longitude,
  Coalesce(Sensor.Elevation, Instrument_Sensor.Elevation, Instrument.Elevation, Station_Instrument.Elevation, Station.Elevation) Elevation
from
  Station
  inner join Station_Instrument
    on (Station_Instrument.StationID = Station.ID)
  inner join Instrument
    on (Station_Instrument.InstrumentID = Instrument.ID)
  inner join Instrument_Sensor
    on (Instrument_Sensor.InstrumentID = Instrument.ID)
  inner join Sensor 
    on (Instrument_Sensor.SensorID = Sensor.ID)
--< Added 2.0.37 20180202 TimPN
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[DataLog] WITH CHECK CHECK CONSTRAINT [FK_DataLog_Sensor];

ALTER TABLE [dbo].[DataLog] WITH CHECK CHECK CONSTRAINT [FK_DataLog_Status];

ALTER TABLE [dbo].[DataLog] WITH CHECK CHECK CONSTRAINT [FK_DataLog_StatusReason];

ALTER TABLE [dbo].[DataLog] WITH CHECK CHECK CONSTRAINT [FK_DataLog_aspnet_Users];

ALTER TABLE [dbo].[DataLog] WITH CHECK CHECK CONSTRAINT [FK_DataLog_DataSourceTransformation];

ALTER TABLE [dbo].[DataLog] WITH CHECK CHECK CONSTRAINT [FK_DataLog_ImportBatch];

ALTER TABLE [dbo].[DataLog] WITH CHECK CHECK CONSTRAINT [FK_DataLog_PhenomenonOffering];

ALTER TABLE [dbo].[DataLog] WITH CHECK CHECK CONSTRAINT [FK_DataLog_PhenomenonUOM];

ALTER TABLE [dbo].[Instrument_Sensor] WITH CHECK CHECK CONSTRAINT [FK_Instrument_Sensor_aspnet_Users];

ALTER TABLE [dbo].[Instrument_Sensor] WITH CHECK CHECK CONSTRAINT [FK_Instrument_Sensor_Instrument];

ALTER TABLE [dbo].[Instrument_Sensor] WITH CHECK CHECK CONSTRAINT [FK_Instrument_Sensor_Sensor];

ALTER TABLE [dbo].[Observation] WITH CHECK CHECK CONSTRAINT [FK_Observation_ImportBatch];

ALTER TABLE [dbo].[Observation] WITH CHECK CHECK CONSTRAINT [FK_Observation_Status];

ALTER TABLE [dbo].[Observation] WITH CHECK CHECK CONSTRAINT [FK_Observation_StatusReason];

ALTER TABLE [dbo].[Observation] WITH CHECK CHECK CONSTRAINT [FK_Observation_aspnet_Users];

ALTER TABLE [dbo].[Observation] WITH CHECK CHECK CONSTRAINT [FK_Observation_PhenomenonOffering];

ALTER TABLE [dbo].[Observation] WITH CHECK CHECK CONSTRAINT [FK_Observation_PhenomenonUOM];

ALTER TABLE [dbo].[Observation] WITH CHECK CHECK CONSTRAINT [FK_Observation_Sensor];

ALTER TABLE [dbo].[Sensor] WITH CHECK CHECK CONSTRAINT [FK_Sensor_aspnet_Users];

ALTER TABLE [dbo].[Sensor] WITH CHECK CHECK CONSTRAINT [FK_Sensor_DataSchema];

ALTER TABLE [dbo].[Sensor] WITH CHECK CHECK CONSTRAINT [FK_Sensor_DataSource];

ALTER TABLE [dbo].[Sensor] WITH CHECK CHECK CONSTRAINT [FK_Sensor_Phenomenon];

ALTER TABLE [dbo].[DataSourceTransformation] WITH CHECK CHECK CONSTRAINT [FK_DataSourceTransformation_Sensor];


GO
PRINT N'Update complete.';


GO
