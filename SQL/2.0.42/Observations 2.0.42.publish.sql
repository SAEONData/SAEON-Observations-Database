/*
Deployment script for Observations

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Observations"
:setvar DefaultFilePrefix "Observations"
:setvar DefaultDataPath "D:\Program Files\Microsoft SQL Server\MSSQL14.SAEON\MSSQL\DATA\"
:setvar DefaultLogPath "D:\Program Files\Microsoft SQL Server\MSSQL14.SAEON\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF (SELECT is_default
    FROM   [$(DatabaseName)].[sys].[filegroups]
    WHERE  [name] = N'Documents') = 0
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            MODIFY FILEGROUP [Documents] DEFAULT;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Dropping [dbo].[DataSourceRoleOld]...';


GO
DROP TABLE [dbo].[DataSourceRoleOld];


GO
PRINT N'Dropping [dbo].[vOfferingPhemomena]...';


GO
DROP VIEW [dbo].[vOfferingPhemomena];


GO
PRINT N'Dropping [dbo].[vOfferingPhenomena]...';


GO
DROP VIEW [dbo].[vOfferingPhenomena];



GO
PRINT N'Dropping [dbo].[DataLog].[IX_DataLog_ValueDay]...';


GO
DROP INDEX [IX_DataLog_ValueDay]
    ON [dbo].[DataLog];


GO
PRINT N'Dropping [dbo].[Observation].[IX_Observation_ValueDay]...';


GO
DROP INDEX [IX_Observation_ValueDay]
    ON [dbo].[Observation];


GO
PRINT N'Dropping [dbo].[Observation].[IX_Observation_ValueDecade]...';


GO
DROP INDEX [IX_Observation_ValueDecade]
    ON [dbo].[Observation];


GO
PRINT N'Dropping [dbo].[Observation].[IX_Observation_ValueYear]...';


GO
DROP INDEX [IX_Observation_ValueYear]
    ON [dbo].[Observation];


GO
PRINT N'Dropping Permission...';


GO
REVOKE SELECT
    ON OBJECT::[dbo].[vw_aspnet_Applications] TO [aspnet_Membership_ReportingAccess] CASCADE
    AS [dbo];


GO
PRINT N'Dropping Permission...';


GO
REVOKE SELECT
    ON OBJECT::[dbo].[vw_aspnet_Applications] TO [aspnet_Profile_ReportingAccess] CASCADE
    AS [dbo];


GO
PRINT N'Dropping Permission...';


GO
REVOKE SELECT
    ON OBJECT::[dbo].[vw_aspnet_Applications] TO [aspnet_Roles_ReportingAccess] CASCADE
    AS [dbo];


GO
PRINT N'Dropping Permission...';


GO
REVOKE SELECT
    ON OBJECT::[dbo].[vw_aspnet_Applications] TO [aspnet_Personalization_ReportingAccess] CASCADE
    AS [dbo];


GO
PRINT N'Dropping Permission...';


GO
REVOKE SELECT
    ON OBJECT::[dbo].[vw_aspnet_MembershipUsers] TO [aspnet_Membership_ReportingAccess] CASCADE
    AS [dbo];


GO
PRINT N'Dropping Permission...';


GO
REVOKE SELECT
    ON OBJECT::[dbo].[vw_aspnet_Profiles] TO [aspnet_Profile_ReportingAccess] CASCADE
    AS [dbo];


GO
PRINT N'Dropping Permission...';


GO
REVOKE SELECT
    ON OBJECT::[dbo].[vw_aspnet_Roles] TO [aspnet_Roles_ReportingAccess] CASCADE
    AS [dbo];


GO
PRINT N'Dropping Permission...';


GO
REVOKE SELECT
    ON OBJECT::[dbo].[vw_aspnet_Users] TO [aspnet_Membership_ReportingAccess] CASCADE
    AS [dbo];


GO
PRINT N'Dropping Permission...';


GO
REVOKE SELECT
    ON OBJECT::[dbo].[vw_aspnet_Users] TO [aspnet_Profile_ReportingAccess] CASCADE
    AS [dbo];


GO
PRINT N'Dropping Permission...';


GO
REVOKE SELECT
    ON OBJECT::[dbo].[vw_aspnet_Users] TO [aspnet_Roles_ReportingAccess] CASCADE
    AS [dbo];


GO
PRINT N'Dropping Permission...';


GO
REVOKE SELECT
    ON OBJECT::[dbo].[vw_aspnet_Users] TO [aspnet_Personalization_ReportingAccess] CASCADE
    AS [dbo];


GO
PRINT N'Dropping Permission...';


GO
REVOKE SELECT
    ON OBJECT::[dbo].[vw_aspnet_UsersInRoles] TO [aspnet_Roles_ReportingAccess] CASCADE
    AS [dbo];


GO
PRINT N'Dropping Permission...';


GO
REVOKE SELECT
    ON OBJECT::[dbo].[vw_aspnet_WebPartState_Paths] TO [aspnet_Personalization_ReportingAccess] CASCADE
    AS [dbo];


GO
PRINT N'Dropping Permission...';


GO
REVOKE SELECT
    ON OBJECT::[dbo].[vw_aspnet_WebPartState_Shared] TO [aspnet_Personalization_ReportingAccess] CASCADE
    AS [dbo];


GO
PRINT N'Dropping Permission...';


GO
REVOKE SELECT
    ON OBJECT::[dbo].[vw_aspnet_WebPartState_User] TO [aspnet_Personalization_ReportingAccess] CASCADE
    AS [dbo];


GO
PRINT N'Dropping [dbo].[vw_aspnet_Applications]...';


GO
DROP VIEW [dbo].[vw_aspnet_Applications];


GO
PRINT N'Dropping [dbo].[vw_aspnet_MembershipUsers]...';


GO
DROP VIEW [dbo].[vw_aspnet_MembershipUsers];


GO
PRINT N'Dropping [dbo].[vw_aspnet_Profiles]...';


GO
DROP VIEW [dbo].[vw_aspnet_Profiles];


GO
PRINT N'Dropping [dbo].[vw_aspnet_Roles]...';


GO
DROP VIEW [dbo].[vw_aspnet_Roles];


GO
PRINT N'Dropping [dbo].[vw_aspnet_Users]...';


GO
DROP VIEW [dbo].[vw_aspnet_Users];


GO
PRINT N'Dropping [dbo].[vw_aspnet_UsersInRoles]...';


GO
DROP VIEW [dbo].[vw_aspnet_UsersInRoles];


GO
PRINT N'Dropping [dbo].[vw_aspnet_WebPartState_Paths]...';


GO
DROP VIEW [dbo].[vw_aspnet_WebPartState_Paths];


GO
PRINT N'Dropping [dbo].[vw_aspnet_WebPartState_Shared]...';


GO
DROP VIEW [dbo].[vw_aspnet_WebPartState_Shared];


GO
PRINT N'Dropping [dbo].[vw_aspnet_WebPartState_User]...';


GO
DROP VIEW [dbo].[vw_aspnet_WebPartState_User];

GO
PRINT N'Dropping [dbo].[vDataLog]...';


GO
DROP VIEW [dbo].[vDataLog];


GO
PRINT N'Altering [dbo].[DataLog]...';


GO
ALTER TABLE [dbo].[DataLog] DROP COLUMN [ValueDay];


GO
ALTER TABLE [dbo].[DataLog]
    ADD [ValueDay] AS (CONVERT (DATE, [ValueDate]));


GO
PRINT N'Creating [dbo].[DataLog].[IX_DataLog_ValueDay]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataLog_ValueDay]
    ON [dbo].[DataLog]([ValueDay] ASC);


GO
PRINT N'Altering [dbo].[ImportBatchSummary]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER TABLE [dbo].[ImportBatchSummary]
    ADD [StartDate] DATETIME NULL,
        [EndDate]   DATETIME NULL;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[Observation]...';


GO
ALTER TABLE [dbo].[Observation] DROP COLUMN [ValueDecade], COLUMN [ValueYear], COLUMN [ValueDay];


GO
ALTER TABLE [dbo].[Observation]
    ADD [ValueDay]    AS (CONVERT (DATE, [ValueDate])),
        [ValueYear]   AS (datepart(year, [ValueDate])),
        [ValueDecade] AS (datepart(year, [ValueDate]) / (10));


GO
PRINT N'Creating [dbo].[Observation].[IX_Observation_ValueDay]...';


GO
CREATE NONCLUSTERED INDEX [IX_Observation_ValueDay]
    ON [dbo].[Observation]([ValueDay] ASC)
    ON [Observations];


GO
PRINT N'Creating [dbo].[Observation].[IX_Observation_ValueDecade]...';

GO
CREATE NONCLUSTERED INDEX [IX_Observation_ValueDecade]
    ON [dbo].[Observation]([ValueDecade] ASC)
    ON [Observations];

GO
PRINT N'Creating [dbo].[Observation].[IX_Observation_ValueYear]...';


CREATE NONCLUSTERED INDEX [IX_Observation_ValueYear]
    ON [dbo].[Observation]([ValueYear] ASC)
    ON [Observations];
GO

--GO
--PRINT N'Creating [dbo].[DF_Observation_AddedAt]...';


--GO
--ALTER TABLE [dbo].[Observation]
--    ADD CONSTRAINT [DF_Observation_AddedAt] DEFAULT (getdate()) FOR [AddedAt];


--GO
--PRINT N'Creating [dbo].[DF_Observation_AddedDate]...';


--GO
--ALTER TABLE [dbo].[Observation]
--    ADD CONSTRAINT [DF_Observation_AddedDate] DEFAULT (getdate()) FOR [AddedDate];


--GO
--PRINT N'Creating [dbo].[DF_Observation_UpdatedAt]...';


--GO
--ALTER TABLE [dbo].[Observation]
--    ADD CONSTRAINT [DF_Observation_UpdatedAt] DEFAULT (getdate()) FOR [UpdatedAt];


GO
PRINT N'Altering [dbo].[TR_Observation_Insert]...';


GO
ALTER TRIGGER [dbo].[TR_Observation_Insert] ON [dbo].[Observation]
FOR INSERT
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = GetDate(),
        UpdatedAt = NULL
    from
        Observation src
        inner join inserted ins
            on (ins.ID = src.ID)
END
GO
PRINT N'Altering [dbo].[TR_Observation_Update]...';


GO
ALTER TRIGGER [dbo].[TR_Observation_Update] ON [dbo].[Observation]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        Observation src
        inner join inserted ins
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
PRINT N'Altering [dbo].[TR_AuditLog_Update]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER TRIGGER [dbo].[TR_AuditLog_Update] ON [dbo].[AuditLog]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update 
        src 
    set 
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        AuditLog src
        inner join inserted ins 
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[TR_DataLog_Update]...';


GO
ALTER TRIGGER [dbo].[TR_DataLog_Update] ON [dbo].[DataLog]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update 
        src 
    set 
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        DataLog src
        inner join inserted ins 
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
PRINT N'Altering [dbo].[TR_DataSchema_Update]...';


GO
ALTER TRIGGER [dbo].[TR_DataSchema_Update] ON [dbo].[DataSchema]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update 
        src 
    set 
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        DataSchema src
        inner join inserted ins 
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
PRINT N'Altering [dbo].[TR_DataSource_Update]...';


GO
ALTER TRIGGER [dbo].[TR_DataSource_Update] ON [dbo].[DataSource]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        DataSource src
        inner join inserted ins
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
PRINT N'Altering [dbo].[TR_DataSourceTransformation_Update]...';


GO
ALTER TRIGGER [dbo].[TR_DataSourceTransformation_Update] ON [dbo].[DataSourceTransformation]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        DataSourceTransformation src
        inner join inserted ins
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
PRINT N'Altering [dbo].[TR_DataSourceType_Update]...';


GO
ALTER TRIGGER [dbo].[TR_DataSourceType_Update] ON [dbo].[DataSourceType]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        DataSourceType src
        inner join inserted ins
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
PRINT N'Altering [dbo].[TR_ImportBatch_Update]...';


GO
ALTER TRIGGER [dbo].[TR_ImportBatch_Update] ON [dbo].[ImportBatch]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        ImportBatch src
        inner join inserted ins
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
PRINT N'Altering [dbo].[TR_Instrument_Update]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER TRIGGER [dbo].[TR_Instrument_Update] ON [dbo].[Instrument]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update 
        src 
    set 
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        Instrument src
        inner join inserted ins 
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[TR_Instrument_Sensor_Update]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER TRIGGER [dbo].[TR_Instrument_Sensor_Update] ON [dbo].[Instrument_Sensor]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        Instrument_Sensor src
        inner join inserted ins
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[TR_Offering_Update]...';


GO
ALTER TRIGGER [dbo].[TR_Offering_Update] ON [dbo].[Offering]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        Offering src
        inner join inserted ins
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
PRINT N'Altering [dbo].[TR_Organisation_Update]...';


GO
ALTER TRIGGER [dbo].[TR_Organisation_Update] ON [dbo].[Organisation]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update 
        src 
    set 
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        Organisation src
        inner join inserted ins 
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
PRINT N'Altering [dbo].[TR_Organisation_Instrument_Update]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER TRIGGER [dbo].[TR_Organisation_Instrument_Update] ON [dbo].[Organisation_Instrument]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        Organisation_Instrument src
        inner join inserted ins
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[TR_Organisation_Site_Update]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER TRIGGER [dbo].[TR_Organisation_Site_Update] ON [dbo].[Organisation_Site]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        Organisation_Site src
        inner join inserted ins
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[TR_Organisation_Station_Update]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER TRIGGER [dbo].[TR_Organisation_Station_Update] ON [dbo].[Organisation_Station]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        Organisation_Station src
        inner join inserted ins
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[TR_OrganisationRole_Update]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER TRIGGER [dbo].[TR_OrganisationRole_Update] ON [dbo].[OrganisationRole]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        OrganisationRole src
        inner join inserted ins
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[TR_Phenomenon_Update]...';


GO
ALTER TRIGGER [dbo].[TR_Phenomenon_Update] ON [dbo].[Phenomenon]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        Phenomenon src
        inner join inserted ins
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
PRINT N'Altering [dbo].[TR_PhenomenonOffering_Update]...';


GO
ALTER TRIGGER [dbo].[TR_PhenomenonOffering_Update] ON [dbo].[PhenomenonOffering]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        PhenomenonOffering src
        inner join inserted ins
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
PRINT N'Altering [dbo].[TR_PhenomenonUOM_Update]...';


GO
ALTER TRIGGER [dbo].[TR_PhenomenonUOM_Update] ON [dbo].[PhenomenonUOM]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        PhenomenonUOM src
        inner join inserted ins
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
PRINT N'Altering [dbo].[TR_Programme_Update]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER TRIGGER [dbo].[TR_Programme_Update] ON [dbo].[Programme]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update 
        src 
    set 
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        Programme src
        inner join inserted ins 
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[TR_Project_Update]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER TRIGGER [dbo].[TR_Project_Update] ON [dbo].[Project]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update 
        src 
    set 
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        Project src
        inner join inserted ins 
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[TR_Project_Station_Update]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER TRIGGER [dbo].[TR_Project_Station_Update] ON [dbo].[Project_Station]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update 
        src 
    set 
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        Project_Station src
        inner join inserted ins 
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[TR_SchemaColumn_Update]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER TRIGGER [dbo].[TR_SchemaColumn_Update] ON [dbo].[SchemaColumn]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        SchemaColumn src
        inner join inserted ins
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[TR_SchemaColumnType_Update]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER TRIGGER [dbo].[TR_SchemaColumnType_Update] ON [dbo].[SchemaColumnType]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        SchemaColumnType src
        inner join inserted ins
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[TR_Sensor_Update]...';


GO
ALTER TRIGGER [dbo].[TR_Sensor_Update] ON [dbo].[Sensor]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        Sensor src
        inner join inserted ins
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
PRINT N'Altering [dbo].[TR_Site_Update]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER TRIGGER [dbo].[TR_Site_Update] ON [dbo].[Site]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update 
        src 
    set 
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        Site src
        inner join inserted ins 
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[TR_Station_Update]...';


GO
ALTER TRIGGER [dbo].[TR_Station_Update] ON [dbo].[Station]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        Station src
        inner join inserted ins
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
PRINT N'Altering [dbo].[TR_Station_Instrument_Update]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER TRIGGER [dbo].[TR_Station_Instrument_Update] ON [dbo].[Station_Instrument]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        Station_Instrument src
        inner join inserted ins
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[TR_Status_Update]...';


GO
ALTER TRIGGER [dbo].[TR_Status_Update] ON [dbo].[Status]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        Status src
        inner join inserted ins 
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
PRINT N'Altering [dbo].[TR_StatusReason_Update]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER TRIGGER [dbo].[TR_StatusReason_Update] ON [dbo].[StatusReason]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        StatusReason src
        inner join inserted ins
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[TR_TransformationType_Update]...';


GO
ALTER TRIGGER [dbo].[TR_TransformationType_Update] ON [dbo].[TransformationType]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        TransformationType src
        inner join inserted ins
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
PRINT N'Altering [dbo].[TR_UnitOfMeasure_Update]...';


GO
ALTER TRIGGER [dbo].[TR_UnitOfMeasure_Update] ON [dbo].[UnitOfMeasure]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
        UpdatedAt = GETDATE()
    from
        UnitOfMeasure src
        inner join inserted ins
            on (ins.ID = src.ID)
        inner join deleted del
            on (del.ID = src.ID)
END
GO
PRINT N'Altering [dbo].[TR_UserDownloads_Update]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER TRIGGER [dbo].[TR_UserDownloads_Update] ON [dbo].[UserDownloads]
FOR UPDATE
AS
BEGIN
  SET NoCount ON
  Update
      src
  set
    AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
    UpdatedAt = GetDate()
  from
    UserDownloads src
    inner join inserted ins
      on (ins.ID = src.ID)
    inner join deleted del
      on (del.ID = src.ID)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[TR_UserQueries_Update]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER TRIGGER [dbo].[TR_UserQueries_Update] ON [dbo].[UserQueries]
FOR UPDATE
AS
BEGIN
  SET NoCount ON
  Update
      src
  set
    AddedAt = Coalesce(del.AddedAt, ins.AddedAt, GetDate()),
    UpdatedAt = GetDate()
  from
    UserQueries src
    inner join inserted ins
      on (ins.ID = src.ID)
    inner join deleted del
      on (del.ID = src.ID)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vDataLog]...';


GO
CREATE VIEW [dbo].[vDataLog]
AS

SELECT 
d.ID, 
d.ImportDate,
Site.Name SiteName,
Station.Name StationName,
Instrument.Name InstrumentName,
d.SensorID,
Sensor.Name SensorName,
CASE 
    WHEN d.SensorID is null then 1
    ELSE 0
END SensorInvalid,

d.ValueDate,
d.InvalidDateValue, 
CASE 
    WHEN ValueDate is null then 1
    ELSE 0
END DateValueInvalid,

d.InvalidTimeValue, 
CASE 
    WHEN InvalidTimeValue is not null then 1
    ELSE 0
END TimeValueInvalid,

CASE 
    WHEN InvalidDateValue is null AND InvalidTimeValue IS NULL Then ValueDate
    WHEN ValueTime is not null then ValueTime 
END ValueTime,


d.RawValue,
d.ValueText,
CASE
    WHEN d.RawValue is null then 1
    ELSE 0
END RawValueInvalid,	

d.DataValue,
d.TransformValueText, 
CASE
    WHEN d.DataValue is null then 1
    ELSE 0
END DataValueInvalid,

d.PhenomenonOfferingID, 
CASE
    WHEN d.PhenomenonOfferingID is null then 1
    ELSE 0
END OfferingInvalid,

d.PhenomenonUOMID, 
CASE
    WHEN d.PhenomenonUOMID is null then 1
    ELSE 0
END UOMInvalid,

p.Name PhenomenonName,
o.Name OfferingName,
uom.Unit,

d.DataSourceTransformationID,
tt.Name Transformation,
d.StatusID,
s.Name [Status],
d.ImportBatchID,
d.RawFieldValue,
d.Comment

FROM DataLog d
  left join Sensor 
    on (d.SensorID = Sensor.ID) 
  left join Instrument_Sensor
    on (Instrument_Sensor.SensorID = Sensor.ID) and
       ((Instrument_Sensor.StartDate is null) or (d.ValueDate >= Instrument_Sensor.StartDate)) and
       ((Instrument_Sensor.EndDate is null) or (d.ValueDate <= Instrument_Sensor.EndDate))
  left join Instrument
    on (Instrument_Sensor.InstrumentID = Instrument.ID) and
       ((Instrument.StartDate is null) or (d.ValueDay >= Instrument.StartDate )) and
       ((Instrument.EndDate is null) or (d.ValueDay <= Instrument.EndDate))
  left join Station_Instrument
    on (Station_Instrument.InstrumentID = Instrument.ID) and
       ((Station_Instrument.StartDate is null) or (d.ValueDay >= Station_Instrument.StartDate)) and
       ((Station_Instrument.EndDate is null) or (d.ValueDay <= Station_Instrument.EndDate))
  left join Station 
    on (Station_Instrument.StationID = Station.ID) and
       ((Station.StartDate is null) or (d.ValueDay >= Station.StartDate)) and
       ((Station.EndDate is null) or (d.ValueDay <= Station.EndDate))
  left join Site
    on (Station.SiteID = Site.ID) and
       ((Site.StartDate is null) or  (d.ValueDay >= Site.StartDate)) and
       ((Site.EndDate is null) or  (d.ValueDay <= Site.EndDate))
LEFT JOIN PhenomenonOffering po
 ON d.PhenomenonOfferingID = po.ID
LEFT JOIN Phenomenon p
    on po.PhenomenonID = p.ID
LEFT JOIN Offering o
    on po.OfferingID = o.ID
LEFT JOIN PhenomenonUOM pu
    on d.PhenomenonUOMID = pu.ID
LEFT JOIN UnitOfMeasure uom
    on pu.UnitOfMeasureID = uom.ID
LEFT JOIN DataSourceTransformation ds
    on d.DataSourceTransformationID = ds.ID
LEFT JOIN TransformationType tt
    on ds.TransformationTypeID = tt.ID
INNER JOIN [Status] s
    on d.StatusID = s.ID
GO
PRINT N'Altering [dbo].[vImportBatchSummary]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER VIEW [dbo].[vImportBatchSummary]
AS 
Select
  ImportBatchSummary.*, 
  Phenomenon.Code PhenomenonCode, Phenomenon.Name PhenomenonName,
  Offering.Code OfferingCode, Offering.Name OfferingName,
  UnitOfMeasure.Code UnitOfMeasureCode, UnitOfMeasure.Unit UnitOfMeasureUnit, UnitOfMeasure.UnitSymbol UnitOfMeasureSymbol,
  Sensor.Code SensorCode, Sensor.Name SensorName,
  Instrument.Code InstrumentCode, Instrument.Name InstrumentName,
  Station.Code StationCode, Station.Name StationName,
  Site.Code SiteCode, Site.Name SiteName
From
  ImportBatchSummary
  inner join Sensor
    on (ImportBatchSummary.SensorID = Sensor.ID)
  inner join Instrument
    on (ImportBatchSummary.InstrumentID = Instrument.ID)
  inner join Station
    on (ImportBatchSummary.StationID = Station.ID)
  inner join Site
    on (ImportBatchSummary.SiteID = Site.ID)
  inner join PhenomenonOffering
    on (ImportBatchSummary.PhenomenonOfferingID = PhenomenonOffering.ID)
  inner join Phenomenon
    on (PhenomenonOffering.PhenomenonID = Phenomenon.ID)
  inner join Offering
    on (PhenomenonOffering.OfferingID = Offering.ID)
  inner join PhenomenonUOM
    on (ImportBatchSummary.PhenomenonUOMID = PhenomenonUOM.ID)
  inner join UnitOfMeasure
    on (PhenomenonUOM.UnitOfMeasureID = UnitOfMeasure.ID)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[vInventory]...';


GO
ALTER VIEW [dbo].[vInventory]
AS
Select 
  Site.Name Site,
  Station.Name Station,
  Instrument.Name Instrument,
  Sensor.Name Sensor,
  p.Name Phenomenon,
  d.StartDate,
  d.EndDate
from
  Sensor 
  INNER JOIN 
  (
     SELECT SensorID,MIN(Cast(ValueDate as Date)) StartDate,MAX(Cast(ValueDate as Date)) EndDate
     FROM Observation
     Group By SensorID
  ) d
    ON (Sensor.ID = d.SensorID)
  inner join Instrument_Sensor
    on (Instrument_Sensor.SensorID = Sensor.ID) and
       ((Instrument_Sensor.StartDate is null) or (d.StartDate >= Instrument_Sensor.StartDate)) and
       ((Instrument_Sensor.EndDate is null) or (d.EndDate <= Instrument_Sensor.EndDate))
  inner join Instrument
    on (Instrument_Sensor.InstrumentID = Instrument.ID) and
       ((Instrument.StartDate is null) or (d.StartDate >= Instrument.StartDate )) and
       ((Instrument.EndDate is null) or (d.EndDate <= Instrument.EndDate))
  inner join Station_Instrument
    on (Station_Instrument.InstrumentID = Instrument.ID) and
       ((Station_Instrument.StartDate is null) or (d.StartDate >= Station_Instrument.StartDate)) and
       ((Station_Instrument.EndDate is null) or (d.EndDate <= Station_Instrument.EndDate))
  inner join Station 
    on (Station_Instrument.StationID = Station.ID) and
       ((Station.StartDate is null) or (d.StartDate >= Station.StartDate)) and
       ((Station.EndDate is null) or (d.EndDate <= Station.EndDate))
  inner join Site
    on (Station.SiteID = Site.ID) and
       ((Site.StartDate is null) or  (d.StartDate >= Site.StartDate)) and
       ((Site.EndDate is null) or  (d.EndDate <= Site.EndDate))
  inner join Phenomenon p 
   on (Sensor.PhenomenonID = p.ID )
GO
PRINT N'Altering [dbo].[vInventoryPhenomenaOfferings]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER VIEW [dbo].[vInventoryPhenomenaOfferings]
AS
Select
  Phenomenon.Name+'~'+Offering.Name+'~'+IsNull(Status.Name,'') SurrogateKey,
  Phenomenon.Name Phenomenon, Offering.Name Offering, IsNull(Status.Name,'No status') Status, 
  Count(*) Count, Min(DataValue) Minimum, Max(DataValue) Maximum, Avg(DataValue) Average, StDev(DataValue) StandardDeviation, Var(DataValue) Variance
from  
  Observation
  inner join Sensor
    on (Observation.SensorID = Sensor.ID)
  inner join Instrument_Sensor
    on (Instrument_Sensor.SensorID = Sensor.ID) and
       ((Instrument_Sensor.StartDate is null) or (Observation.ValueDay >= Instrument_Sensor.StartDate)) and
       ((Instrument_Sensor.EndDate is null) or (Observation.ValueDay <= Instrument_Sensor.EndDate))
  inner join Instrument
    on (Instrument_Sensor.InstrumentID = Instrument.ID) and
       ((Instrument.StartDate is null) or (Observation.ValueDay >= Instrument.StartDate )) and
       ((Instrument.EndDate is null) or (Observation.ValueDay <= Instrument.EndDate))
  inner join Station_Instrument
    on (Station_Instrument.InstrumentID = Instrument.ID) and
       ((Station_Instrument.StartDate is null) or (Observation.ValueDay >= Station_Instrument.StartDate)) and
       ((Station_Instrument.EndDate is null) or (Observation.ValueDay <= Station_Instrument.EndDate))
  inner join Station
    on (Station_Instrument.StationID = Station.ID) and
       ((Station.StartDate is null) or (Observation.ValueDay >= Station.StartDate)) and
       ((Station.EndDate is null) or (Observation.ValueDay <= Station.EndDate))
  inner join PhenomenonOffering
    on (Observation.PhenomenonOfferingID = PhenomenonOffering.ID)
  inner join Phenomenon
    on (PhenomenonOffering.PhenomenonID = Phenomenon.ID)
  inner join Offering
    on (PhenomenonOffering.OfferingID = Offering.ID)
  left join Status
    on (Observation.StatusID = Status.ID)
group by 
  Phenomenon.Name, Offering.Name, Status.Name
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[vInventoryStations]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER VIEW [dbo].[vInventoryStations]
AS
Select
  Station.Name+'~'+IsNull(Status.Name,'') SurrogateKey,
  Station.ID, Station.Name, Station.Latitude, Station.Longitude, IsNull(Status.Name,'No status') Status, 
  Count(*) Count, Min(DataValue) Minimum, Max(DataValue) Maximum, Avg(DataValue) Average, StDev(DataValue) StandardDeviation, Var(DataValue) Variance
from  
  Observation
  inner join Sensor
    on (Observation.SensorID = Sensor.ID)
  inner join Instrument_Sensor
    on (Instrument_Sensor.SensorID = Sensor.ID) and
       ((Instrument_Sensor.StartDate is null) or (Observation.ValueDay >= Instrument_Sensor.StartDate)) and
       ((Instrument_Sensor.EndDate is null) or (Observation.ValueDay <= Instrument_Sensor.EndDate))
  inner join Instrument
    on (Instrument_Sensor.InstrumentID = Instrument.ID) and
       ((Instrument.StartDate is null) or (Observation.ValueDay >= Instrument.StartDate )) and
       ((Instrument.EndDate is null) or (Observation.ValueDay <= Instrument.EndDate))
  inner join Station_Instrument
    on (Station_Instrument.InstrumentID = Instrument.ID) and
       ((Station_Instrument.StartDate is null) or (Observation.ValueDay >= Station_Instrument.StartDate)) and
       ((Station_Instrument.EndDate is null) or (Observation.ValueDay <= Station_Instrument.EndDate))
  inner join Station
    on (Station_Instrument.StationID = Station.ID) and
       ((Station.StartDate is null) or (Observation.ValueDay >= Station.StartDate)) and
       ((Station.EndDate is null) or (Observation.ValueDay <= Station.EndDate))
  left join Status
    on (Observation.StatusID = Status.ID)
group by 
  Station.ID, Station.Name, Station.Latitude, Station.Longitude, Status.Name
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[vObservationExpansion]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER VIEW [dbo].[vObservationExpansion]
AS
Select
  Observation.ID, Observation.ImportBatchID,  
  Observation.ValueDate, Observation.ValueDay, Observation.ValueYear, Observation.ValueDecade, 
  Observation.RawValue, Observation.DataValue, Observation.TextValue, 
  Observation.Comment, Observation.CorrelationID,
  Site.ID SiteID, Site.Code SiteCode, Site.Name SiteName, Site.Description SiteDescription, Site.Url SiteUrl,
  Station.ID StationID, Station.Code StationCode, Station.Name StationName, Station.Description StationDescription, Station.Url StationUrl,
  Instrument.ID InstrumentID, Instrument.Code InstrumentCode, Instrument.Name InstrumentName, Instrument.Description InstrumentDescription, Instrument.Url InstrumentUrl,
  Observation.SensorID, Sensor.Code SensorCode, Sensor.Name SensorName, Sensor.Description SensorDescription, Sensor.Url SensorUrl,
  Coalesce(Observation.Latitude, Sensor.Latitude, Instrument_Sensor.Latitude, Instrument.Latitude, Station_Instrument.Latitude, Station.Latitude) Latitude,
  Coalesce(Observation.Longitude, Sensor.Longitude, Instrument_Sensor.Longitude, Instrument.Longitude, Station_Instrument.Longitude, Station.Longitude) Longitude,
  Coalesce(Observation.Elevation, Sensor.Elevation, Instrument_Sensor.Elevation, Instrument.Elevation, Station_Instrument.Elevation, Station.Elevation) Elevation,
  Observation.PhenomenonOfferingID, Phenomenon.ID PhenomenonID, Phenomenon.Code PhenomenonCode, Phenomenon.Name PhenomenonName, Phenomenon.Description PhenomenonDescription, Phenomenon.Url PhenomenonUrl,
  Offering.ID OfferingID, Offering.Code OfferingCode, Offering.Name OfferingName, Offering.Description OfferingDescription,
  Observation.PhenomenonUOMID, UnitOfMeasure.ID UnitOfMeasureID, UnitOfMeasure.Code UnitOfMeasureCode, UnitOfMeasure.Unit UnitOfMeasureUnit, UnitOfMeasure.UnitSymbol UnitOfMeasureSymbol,
  Observation.StatusID, Status.Code StatusCode, Status.Name StatusName, Status.Description StatusDescription,
  Observation.StatusReasonID, StatusReason.Code StatusReasonCode, StatusReason.Name StatusReasonName, StatusReason.Description StatusReasonDescription
from
  Observation
  inner join Sensor
    on (Observation.SensorID = Sensor.ID)
  inner join Instrument_Sensor
    on (Observation.SensorID = Instrument_Sensor.SensorID) and
       ((Instrument_Sensor.StartDate is null) or (Observation.ValueDate >= Instrument_Sensor.StartDate)) and
       ((Instrument_Sensor.EndDate is null) or (Observation.ValueDate <= Instrument_Sensor.EndDate))
  inner join Instrument
    on (Instrument_Sensor.InstrumentID = Instrument.ID) and
       ((Instrument.StartDate is null) or (Observation.ValueDay >= Instrument.StartDate)) and
       ((Instrument.EndDate is null) or (Observation.ValueDay <= Instrument.EndDate))
  inner join Station_Instrument
    on (Station_Instrument.InstrumentID = Instrument_Sensor.InstrumentID) and
       ((Station_Instrument.StartDate is null) or (Observation.ValueDay >= Station_Instrument.StartDate)) and
       ((Station_Instrument.EndDate is null) or (Observation.ValueDay <= Station_Instrument.EndDate))
  inner join Station
    on (Station_Instrument.StationID = Station.ID) and
       ((Station.StartDate is null) or (Observation.ValueDay >= Station.StartDate))  and
       ((Station.EndDate is null) or (Observation.ValueDay <= Station.EndDate))
  inner join Site
    on (Station.SiteID = Site.ID) and
       ((Site.StartDate is null) or (Observation.ValueDay >= Site.StartDate)) and
       ((Site.EndDate is null) or (Observation.ValueDay <= Site.EndDate))
  inner join PhenomenonOffering
    on (Observation.PhenomenonOfferingID = PhenomenonOffering.ID)
  inner join Phenomenon
    on (PhenomenonOffering.PhenomenonID = Phenomenon.ID)
  inner join Offering
    on (PhenomenonOffering.OfferingID = Offering.ID)
  inner join PhenomenonUOM
    on (Observation.PhenomenonUOMID = PhenomenonUOM.ID)
  inner join UnitOfMeasure
    on (PhenomenonUOM.UnitOfMeasureID = UnitOfMeasure.ID)
  left join Status
    on (Observation.StatusID = Status.ID)
  left join StatusReason
    on (Observation.StatusReasonID = StatusReason.ID)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[vSensorThingsDatastreams]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER VIEW [dbo].[vSensorThingsDatastreams]
AS
Select distinct
  PhenomenonOffering.ID, Sensor.ID SensorID, Sensor.Name Sensor, Phenomenon.Name Phenomenon, Offering.Name Offering, UnitOfMeasure.Unit, UnitOfMeasure.UnitSymbol Symbol, Phenomenon.Url
from
  Observation
  inner join Sensor
    on (Observation.SensorID = Sensor.ID)
  inner join PhenomenonOffering
    on (Observation.PhenomenonOfferingID = PhenomenonOffering.ID)
  inner join Phenomenon
    on (PhenomenonOffering.PhenomenonID = Phenomenon.ID)
  inner join Offering
    on (PhenomenonOffering.OfferingID = Offering.ID)
  inner join PhenomenonUOM
    on (Observation.PhenomenonUOMID = PhenomenonUOM.ID)
  inner join UnitOfMeasure
    on (PhenomenonUOM.UnitOfMeasureID = UnitOfMeasure.ID)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[vApiDataDownload]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER VIEW [dbo].[vApiDataDownload]
AS
Select
  vObservationExpansion.*,
  PhenomenonName + ', ' + OfferingName + ', ' + UnitOfMeasureSymbol FeatureCaption,
  Replace(PhenomenonName + '_' + OfferingName + '_' + UnitOfMeasureUnit,' ','') FeatureName,
  IsNull(StatusName, 'No Status') Status
from
  vObservationExpansion 
where
  (StatusName = 'Verified')
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[vApiDataQuery]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER VIEW [dbo].[vApiDataQuery]
AS
Select
  vObservationExpansion.*,
  PhenomenonName + ', ' + OfferingName + ', ' + UnitOfMeasureSymbol FeatureCaption,
  Replace(PhenomenonName + '_' + OfferingName + '_' + UnitOfMeasureUnit,' ','') FeatureName,
  IsNull(StatusName, 'No Status') Status
from
  vObservationExpansion
where
  (StatusName = 'Verified')
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[vApiInventory]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER VIEW [dbo].[vApiInventory]
AS
Select
  vObservationExpansion.*,
  Replace(PhenomenonName + '_' + OfferingName + '_' + UnitOfMeasureUnit,' ','') FeatureName,
  IsNull(StatusName, 'No Status') Status
from
  vObservationExpansion
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[vApiSpacialCoverage]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER VIEW [dbo].[vApiSpacialCoverage]
AS
Select
  vObservationExpansion.*,
  PhenomenonName + ', ' + OfferingName + ', ' + UnitOfMeasureSymbol FeatureCaption,
  Replace(PhenomenonName + '_' + OfferingName + '_' + UnitOfMeasureUnit,' ','') FeatureName,
  Status = case 
    when StatusName is Null then 'No Status'
    when StatusName = 'Verified' then StatusName
    when StatusName = 'Unverified' then StatusName
    else 'Being Verified'
  end 
from
  vObservationExpansion
where
  (Latitude is not null) and (Longitude is not null)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[vApiTemporalCoverage]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER VIEW [dbo].[vApiTemporalCoverage]
AS
Select
  vObservationExpansion.*,
  Status = case 
    when StatusName is Null then 'No Status'
    when StatusName = 'Verified' then StatusName
    when StatusName = 'Unverified' then StatusName
    else 'Being Verified'
  end 
from
  vObservationExpansion
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[vInventoryInstruments]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER VIEW [dbo].[vInventoryInstruments]
AS 
Select
  InstrumentName+'~'+IsNull(StatusName,'') SurrogateKey,
  InstrumentName, IsNull(StatusName,'No status') Status, 
  Count(DataValue) Count, Min(DataValue) Minimum, Max(DataValue) Maximum, Avg(DataValue) Average, StDev(DataValue) StandardDeviation, Var(DataValue) Variance
from
  vObservationExpansion
group by
  InstrumentName, StatusName
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[vInventoryOrganisations]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER VIEW [dbo].[vInventoryOrganisations]
AS 
Select
  Coalesce(InstrumentOrganisation.Name, StationOrganisation.Name, SiteOrganisation.Name)+'~'+IsNull(StatusName,'') SurrogateKey,
  Coalesce(InstrumentOrganisation.Name, StationOrganisation.Name, SiteOrganisation.Name) Name, IsNull(StatusName,'No status') Status, 
  Count(*) Count, Min(DataValue) Minimum, Max(DataValue) Maximum, Avg(DataValue) Average, StDev(DataValue) StandardDeviation, Var(DataValue) Variance
from
  vObservationExpansion
  left join Organisation_Site
    on (Organisation_Site.SiteID = vObservationExpansion.SiteID) and
       ((Organisation_Site.StartDate is null) or (ValueDay >= Organisation_Site.StartDate )) and
       ((Organisation_Site.EndDate is null) or (ValueDay <= Organisation_Site.EndDate))
  left join Organisation SiteOrganisation
    on (Organisation_Site.OrganisationID = SiteOrganisation.ID)  		
  left join Organisation_Station
    on (Organisation_Station.StationID = vObservationExpansion.StationID) and
       ((Organisation_Station.StartDate is null) or (ValueDay >= Organisation_Station.StartDate )) and
       ((Organisation_Station.EndDate is null) or (ValueDay <= Organisation_Station.EndDate))
  left join Organisation StationOrganisation
    on (Organisation_Station.OrganisationID = vObservationExpansion.StationID)  		
  left join Organisation_Instrument
    on (Organisation_Instrument.InstrumentID = vObservationExpansion.InstrumentID) and
       ((Organisation_Instrument.StartDate is null) or (ValueDay >= Organisation_Instrument.StartDate )) and
       ((Organisation_Instrument.EndDate is null) or (ValueDay <= Organisation_Instrument.EndDate))
  left join Organisation InstrumentOrganisation
    on (Organisation_Instrument.OrganisationID = vObservationExpansion.InstrumentID)  		
where 
  (Coalesce(InstrumentOrganisation.Name, StationOrganisation.Name, SiteOrganisation.Name) is not null)
group by
  Coalesce(InstrumentOrganisation.Name, StationOrganisation.Name, SiteOrganisation.Name),
  StatusName
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[vInventoryTotals]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER VIEW [dbo].[vInventoryTotals]
AS 
Select
  IsNull(StatusName,'') SurrogateKey,
  IsNull(StatusName,'No status') Status, 
  Count(*) Count, Min(DataValue) Minimum, Max(DataValue) Maximum, Avg(DataValue) Average, StDev(DataValue) StandardDeviation, Var(DataValue) Variance
from  
  vObservationExpansion
group by 
  StatusName
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[vInventoryYears]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER VIEW [dbo].[vInventoryYears]
AS 
Select
  Cast(ValueYear as VarChar(10))+'~'+IsNull(StatusName,'') SurrogateKey,
  ValueYear Year, IsNull(StatusName,'No status') Status, 
  Count(*) Count, Min(DataValue) Minimum, Max(DataValue) Maximum, Avg(DataValue) Average, StDev(DataValue) StandardDeviation, Var(DataValue) Variance
from
  vObservationExpansion
group by
  ValueYear, StatusName
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[vObservation]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vObservation]';


GO
PRINT N'Refreshing [dbo].[vObservationsList]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vObservationsList]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[vDataQuery]...';


GO
ALTER VIEW [dbo].[vDataQuery]
AS
SELECT Top (100) Percent    
  Site.ID SiteID, Site.Name SiteName, Site.Description SiteDesc,
  Station.ID StationID, Station.Name StationName, Station.Description StationDesc,
  Instrument.ID InstrumentID, Instrument.Name InstrumentName, Instrument.Description InstrumentDesc,
  Sensor.ID SensorID, Sensor.Name Sensor, Sensor.Description SensorDesc, 
  Phenomenon.ID PhenomenonID, Phenomenon.Name Phenomenon, Phenomenon.Description PhenomenonDesc, 
  Offering.ID OfferingID, Offering.Name Offering, Offering.Description OfferingDesc
FROM
  Sensor 
  inner join Instrument_Sensor
    on (Instrument_Sensor.SensorID = Sensor.ID) 
  inner join Instrument
    on (Instrument_Sensor.InstrumentID = Instrument.ID)
  inner join Station_Instrument
    on (Station_Instrument.InstrumentID = Instrument.ID)
  inner join Station 
    on (Station_Instrument.StationID = Station.ID)
  inner join Site
    on (Station.SiteID = Site.ID)
  INNER JOIN Phenomenon ON Phenomenon.ID = Sensor.PhenomenonID 
  INNER JOIN PhenomenonOffering ON PhenomenonOffering.PhenomenonID = Phenomenon.ID 
  INNER JOIN Offering ON Offering.ID = PhenomenonOffering.OfferingID 
ORDER BY 
  Site.Name, Station.Name, Instrument.Name, Sensor, Phenomenon, Offering
GO
PRINT N'Altering [dbo].[vDataSchema]...';


GO
ALTER VIEW [dbo].[vDataSchema]
AS 
select
  d.*,
  t.Code AS DataSourceTypeCode,
  t.[Description] as DataSourceTypeDesc
FROM 
  DataSchema d
  INNER JOIN DataSourceType t
    ON (d.DataSourceTypeID = t.ID)
GO
PRINT N'Altering [dbo].[vDataSourceTransformation]...';


GO
ALTER VIEW [dbo].[vDataSourceTransformation]
AS
Select dt.ID,
       dt.TransformationTypeID,
       dt.PhenomenonID,
       dt.StartDate,
       dt.EndDate,
       dt.DataSourceID,
       dt.[Definition],
       p.Name as PhenomenonName,
       tt.Name as TransformationName,
       po.ID as PhenomenonOfferingId,
       o.Name as OfferingName,
       pu.ID as UnitOfMeasureId,
       uom.Unit as UnitOfMeasureUnit,
       dt.NewPhenomenonOfferingID,
        NewOffering.Name NewOfferingName,
       dt.NewPhenomenonUOMID,
        NewUnitOfMeasure.Unit NewUnitOfMeasureUnit,
       tt.iorder,
       dt.Rank
       
From DataSourceTransformation dt
 INNER JOIN DataSource ds
    on dt.DataSourceID = ds.ID
 INNER JOIN TransformationType tt
    on dt.TransformationTypeID = tt.ID
 INNER JOIN Phenomenon p
    on dt.PhenomenonID = p.ID
 LEFT JOIN PhenomenonOffering po
    on dt.PhenomenonOfferingID = po.ID
 LEFT JOIN Offering o
    on po.OfferingID = o.ID
 LEFT JOIN PhenomenonUOM pu
    on dt.PhenomenonUOMID = pu.ID
 LEFT JOIN UnitOfMeasure uom
    on pu.UnitOfMeasureID = uom.ID
  left join PhenomenonOffering NewPhenomenonOffering
    on (dt.NewPhenomenonOfferingID = NewPhenomenonOffering.ID)
  left join Offering NewOffering
    on (NewPhenomenonOffering.OfferingID = NewOffering.ID)
  left join PhenomenonUOM NewPhenomenonUOM
    on (dt.NewPhenomenonUOMID = NewPhenomenonUOM.ID)
  left join UnitOfMeasure NewUnitOfMeasure
    on (NewPhenomenonUOM.UnitOfMeasureID = NewUnitOfMeasure.ID)
GO
PRINT N'Altering [dbo].[vImportBatch]...';


GO
ALTER VIEW [dbo].[vImportBatch]
AS

SELECT 
b.ID,
b.Code,
b.DataSourceID,
b.ImportDate, 
b.[Status],
d.Name DataSourceName,
b.UserId,
u.UserName,
CASE b.[Status]
    WHEN 0 THEN 'Errors in Datalog'
    WHEN 1 THEN 'No Errors in Log'
    WHEN 2 THEN 'Moved to Datalog'
END StatusDescription,
b.[FileName],
b.LogFileName,
b.Issues

FROM ImportBatch b
INNER JOIN DataSource d
    on b.DataSourceID = d.ID
INNER JOIN aspnet_Users u
  on b.UserId = u.UserId
GO
PRINT N'Altering [dbo].[vInstrumentOrganisation]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER VIEW [dbo].[vInstrumentOrganisation]
AS
Select
  [Organisation_Site].ID,
  OrganisationID,
  [Organisation].Code OrganisationCode,
  [Organisation].Name OrganisationName,
  [Instrument].ID InstrumentID,
  [Instrument].Code InstrumentCode,
  [Instrument].Name InstrumentName,
  OrganisationRoleID, 
  [OrganisationRole].Code OrganisationRoleCode,
  [OrganisationRole].Name OrganisationRoleName,
  [Organisation_Site].StartDate,
  [Organisation_Site].EndDate,
  'Site' [Level],
  [Site].Code LevelCode,
  [Site].Name LevelName,
  0 [Weight],
  CAST(1 as bit) [IsReadOnly]
from
  [Organisation_Site]
  inner join [Site]
    on ([Organisation_Site].SiteID = [Site].ID)
  inner join [Organisation]
    on ([Organisation_Site].OrganisationID = [Organisation].ID)
  inner join [Station] 
    on ([Organisation_Site].SiteID = [Station].SiteID)
  inner join [Station_Instrument]
    on ([Station_Instrument].StationID = [Station].ID)
  inner join [Instrument]
    on ([Station_Instrument].InstrumentID = [Instrument].ID)
  inner join [OrganisationRole]
    on ([Organisation_Site].OrganisationRoleID = [OrganisationRole].ID)
union
Select 
  [Organisation_Station].ID,
  OrganisationID,
  [Organisation].Code OrganisationCode,
  [Organisation].Name OrganisationName,
  InstrumentID,
  [Instrument].Code InstrumentCode,
  [Instrument].Name InstrumentName,
  OrganisationRoleID,
  [OrganisationRole].Code OrganisationRoleCode,
  [OrganisationRole].Name OrganisationRoleName,
  [Organisation_Station].StartDate,
  [Organisation_Station].EndDate,
  'Station' [Level],
  [Station].Code LevelCode,
  [Station].Name LevelName,
  1 [Weight],
  CAST(1 as bit) [IsReadOnly]
from 
  [Organisation_Station]
  inner join [Station] 
    on ([Organisation_Station].StationID = [Station].ID)
  inner join [Station_Instrument]
    on ([Organisation_Station].StationID = [Station_Instrument].StationID)
  inner join Instrument
    on ([Station_Instrument].InstrumentID = [Instrument].ID)
  inner join [Organisation]
    on ([Organisation_Station].OrganisationID = [Organisation].ID)
  inner join [OrganisationRole]
    on ([Organisation_Station].OrganisationRoleID = [OrganisationRole].ID)
union
Select
  [Organisation_Instrument].ID,
  OrganisationID,
  [Organisation].Code OrganisationCode,
  [Organisation].Name OrganisationName,
  InstrumentID,
  [Instrument].Code InstrumentCode,
  [Instrument].Name InstrumentName,
  OrganisationRoleID,
  [OrganisationRole].Code OrganisationRoleCode,
  [OrganisationRole].Name OrganisationRoleName,
  [Organisation_Instrument].StartDate,
  [Organisation_Instrument].EndDate,
  'Instrument' [Level],
  [Instrument].Code LevelCode,
  [Instrument].Name LevelName,
  2 [Weight],
  CAST(0 as bit) [IsReadOnly]
from
  [Organisation_Instrument]
  inner join [Instrument]
    on ( [Organisation_Instrument].InstrumentID = [Instrument].ID)
  inner join [Organisation]
    on ( [Organisation_Instrument].OrganisationID = [Organisation].ID)
  inner join [OrganisationRole]
    on ( [Organisation_Instrument].OrganisationRoleID = [OrganisationRole].ID)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[vInstrumentSensor]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER VIEW [dbo].[vInstrumentSensor] AS 
SELECT 
  src.*, 
  [Instrument].Code InstrumentCode,
  [Instrument].Name InstrumentName,
  [Sensor].Code SensorCode,
  [Sensor].Name SensorName
FROM 
  [Instrument_Sensor] src
  inner join [Instrument] 
    on (src.InstrumentID = [Instrument].ID)
  inner join [Sensor]
    on (src.SensorID = [Sensor].ID)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vOfferingPhenomena]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE VIEW [dbo].[vOfferingPhenomena]
AS 
Select
  PhenomenonOffering.OfferingID, Phenomenon.Code, Phenomenon.Name, Phenomenon.Description
from
  PhenomenonOffering
  inner join Offering
    on (PhenomenonOffering.OfferingID = Offering.ID)
  inner join Phenomenon
    on (PhenomenonOffering.PhenomenonID = Phenomenon.ID)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[vOrganisationInstrument]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER VIEW [dbo].[vOrganisationInstrument]
AS 
SELECT 
  src.*,
  [Organisation].Code OrganisationCode,
  [Organisation].Name OrganisationName,
  [Instrument].Code InstrumentCode,
  [Instrument].Name InstrumentName,
  [OrganisationRole].Code OrganisationRoleCode,
  [OrganisationRole].Name OrganisationRoleName
FROM 
  [Organisation_Instrument] src
  inner join [Organisation]
    on (src.OrganisationID = [Organisation].ID)
  inner join [Instrument]
    on (src.InstrumentID = [Instrument].ID)
  inner join [OrganisationRole]
    on (src.OrganisationRoleID = [OrganisationRole].ID)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[vOrganisationSite]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER VIEW [dbo].[vOrganisationSite]
AS 
SELECT 
  src.*,
  [Organisation].Code OrganisationCode,
  [Organisation].Name OrganisationName,
  [Site].Code SiteCode,
  [Site].Name SiteName,
  [OrganisationRole].Code OrganisationRoleCode,
  [OrganisationRole].Name OrganisationRoleName
FROM 
  [Organisation_Site] src
  inner join [Organisation]
    on (src.OrganisationID = [Organisation].ID)
  inner join [Site]
    on (src.SiteID = [Site].ID)
  inner join [OrganisationRole]
    on (src.OrganisationRoleID = [OrganisationRole].ID)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[vOrganisationStation]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER VIEW [dbo].[vOrganisationStation]
AS 
SELECT 
  src.*,
  [Organisation].Code OrganisationCode,
  [Organisation].Name OrganisationName,
  [Station].Code StationCode,
  [Station].Name StationName,
  [OrganisationRole].Code OrganisationRoleCode,
  [OrganisationRole].Name OrganisationRoleName
FROM 
  [Organisation_Station] src
  inner join [Organisation]
    on (src.OrganisationID = [Organisation].ID)
  inner join [Station]
    on (src.StationID = [Station].ID)
  inner join [OrganisationRole]
    on (src.OrganisationRoleID = [OrganisationRole].ID)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[vProject]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER VIEW [dbo].[vProject]
AS
SELECT 
  src.*, 
  [Programme].Code ProgrammeCode,
  [Programme].Name ProgrammeName
FROM 
  [Project] src
  left join [Programme]
    on (src.ProgrammeID = [Programme].ID)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[vProjectStation]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER VIEW [dbo].[vProjectStation]
AS
SELECT 
  src.*, 
  [Project].Code ProjectCode,
  [Project].Name ProjectName,
  [Station].Code StationCode,
  [Station].Name StationName
FROM 
  [Project_Station] src
  inner join [Project]
    on (src.ProjectID = [Project].ID)
  inner join [Station]
    on (src.StationID = [Station].ID)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[vSchemaColumn]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER VIEW [dbo].[vSchemaColumn]
AS 
SELECT 
  SchemaColumn.*,
  SchemaColumnType.Name SchemaColumnTypeName, 
  Phenomenon.Name PhenomenonName,
  Offering.Name OfferingName,
  UnitOfMeasure.Unit UnitOfMeasureUnit
FROM 
  SchemaColumn
  inner join SchemaColumnType 
    on (SchemaColumn.SchemaColumnTypeID = SchemaColumnType.ID)
  left join Phenomenon
    on (SchemaColumn.PhenomenonID = Phenomenon.ID)
  left join PhenomenonOffering
    on (SchemaColumn.PhenomenonOfferingID = PhenomenonOffering.ID)
  left join Offering
    on (PhenomenonOffering.OfferingID = Offering.ID)
  left join PhenomenonUOM 
    on (SchemaColumn.PhenomenonUOMID = PhenomenonUOM.ID)
  left join  UnitOfMeasure
    on (PhenomenonUOM.UnitOfMeasureID = UnitOfMeasure.ID)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[vSensor]...';


GO
ALTER VIEW [dbo].[vSensor]
AS
SELECT 
  Sensor.ID,
  Sensor.Code,
  Sensor.Name,
  Sensor.[Description],
  Sensor.Url,
  Sensor.DataSourceID,
  Sensor.PhenomenonID,
  [Phenomenon].Name PhenomenonName,
  Sensor.UserId,
  Site.Name Site,
  Station.Name Station,
  Instrument.Name Instrument,
  d.Name AS DataSourceName,
  Sensor.DataSchemaID,
  ds.[Name] DataSchemaName
FROM 
  Sensor 
  left join Instrument_Sensor
    on (Instrument_Sensor.SensorID = Sensor.ID)
  left join Instrument
    on (Instrument_Sensor.InstrumentID = Instrument.ID)
  left join Station_Instrument
    on (Station_Instrument.InstrumentID = Instrument.ID)
  left join Station 
    on (Station_Instrument.StationID = Station.ID)
  left join Site
    on (Station.SiteID = Site.ID)
INNER JOIN DataSource d
    on Sensor.DataSourceID = d.ID
LEFT JOIN DataSchema ds
    on Sensor.DataSchemaID = ds.ID
  inner join [Phenomenon]
    on (Sensor.PhenomenonID = [Phenomenon].ID)
GO
PRINT N'Altering [dbo].[vSensorDates]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER VIEW [dbo].[vSensorDates]
AS 
Select
  Sensor.ID SensorID,
  Sensor.Name SensorName,
  Instrument_Sensor.StartDate InstrumenSensorStartDate, Instrument_Sensor.EndDate InstrumenSensorEndDate,
  Instrument.Name InstrumentName, Instrument.StartDate InstrumentStartDate, Instrument.EndDate InstrumentEndDate,
  Station_Instrument.StartDate StationInstrumentStartDate, Station_Instrument.EndDate StationInstrumentEndDate,
  Station.Name StationName, Station.StartDate StationStartDate, Station.EndDate StationEndDate,
  Site.Name SiteName, Site.StartDate SiteStartDate, Site.EndDate SiteEndDate,
  (
  Select 
    Max(v) 
  from 
    (Values (Instrument_Sensor.StartDate),(Instrument.StartDate),(Station_Instrument.StartDate),(Station.StartDate),(Site.StartDate)) as Value(v)
  ) StartDate,
  (
  Select 
    Min(v) 
  from 
    (Values (Instrument_Sensor.EndDate),(Instrument.EndDate),(Station_Instrument.EndDate),(Station.EndDate),(Site.EndDate)) as Value(v)
  ) EndDate
from
  Sensor
  left join Instrument_Sensor
    on (Instrument_Sensor.SensorID = Sensor.ID)
  left join Instrument
    on (Instrument_Sensor.InstrumentID = Instrument.ID)
  left join Station_Instrument
    on (Station_Instrument.InstrumentID = Instrument.ID)
  left join Station
    on (Station_Instrument.StationID = Station.ID)
  inner join Site
    on (Station.SiteID = Site.ID)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[vSensorLocation]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER VIEW [dbo].[vSensorLocation]
AS
Select
  Sensor.ID SensorID,
  Coalesce(Sensor.Latitude, Instrument_Sensor.Latitude, Instrument.Latitude, Station_Instrument.Latitude, Station.Latitude) Latitude,
  Coalesce(Sensor.Longitude, Instrument_Sensor.Longitude, Instrument.Longitude, Station_Instrument.Longitude, Station.Longitude) Longitude,
  Coalesce(Sensor.Elevation, Instrument_Sensor.Elevation, Instrument.Elevation, Station_Instrument.Elevation, Station.Elevation) Elevation
from
  Station
  inner join Station_Instrument
    on (Station_Instrument.StationID = Station.ID)
  inner join Instrument
    on (Station_Instrument.InstrumentID = Instrument.ID)
  inner join Instrument_Sensor
    on (Instrument_Sensor.InstrumentID = Instrument.ID)
  inner join Sensor 
    on (Instrument_Sensor.SensorID = Sensor.ID)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[vSiteOrganisation]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER VIEW [dbo].[vSiteOrganisation]
AS 
Select
  [Organisation_Site].ID,
  OrganisationID,
  [Organisation].Code OrganisationCode,
  [Organisation].Name OrganisationName,
  SiteID,
  [Site].Code SiteCode,
  [Site].Name SiteName,
  OrganisationRoleID, 
  [OrganisationRole].Code OrganisationRoleCode,
  [OrganisationRole].Name OrganisationRoleName,
  [Organisation_Site].StartDate,
  [Organisation_Site].EndDate,
  'Site' [Level],
  [Site].Code LevelCode,
  [Site].Name LevelName,
  0 [Weight],
  CAST(0 as bit) [IsReadOnly]
from
  [Organisation_Site]
  inner join [Site]
    on ([Organisation_Site].SiteID = [Site].ID)
  inner join [Organisation]
    on ([Organisation_Site].OrganisationID = [Organisation].ID)
  inner join [OrganisationRole]
    on ([Organisation_Site].OrganisationRoleID = [OrganisationRole].ID)
union
Select
  [Organisation_Station].ID,
  OrganisationID,
  [Organisation].Code OrganisationCode,
  [Organisation].Name OrganisationName,
  SiteID,
  [Site].Code SiteCode,
  [Site].Name SiteName,
  OrganisationRoleID,
  [OrganisationRole].Code OrganisationRoleCode,
  [OrganisationRole].Name OrganisationRoleName,
  [Organisation_Station].StartDate,
  [Organisation_Station].EndDate,
  'Station' [Level],
  [Station].Code LevelCode,
  [Station].Name LevelName,
  1 [Weight],
  CAST(1 as bit) [IsReadOnly]
from
  [Organisation_Station]
  inner join [Station]
    on ([Organisation_Station].StationID = [Station].ID)
  inner join [Organisation]
    on ([Organisation_Station].OrganisationID = [Organisation].ID)
  inner join [Site]
    on ([Station].SiteID = [Site].ID)
  inner join [OrganisationRole]
    on ([Organisation_Station].OrganisationRoleID = [OrganisationRole].ID)
union
Select
  [Organisation_Instrument].ID,
  OrganisationID,
  [Organisation].Code OrganisationCode,
  [Organisation].Name OrganisationName,
  SiteID,
  [Site].Code SiteCode,
  [Site].Name SiteName,
  OrganisationRoleID,
  [OrganisationRole].Code OrganisationRoleCode,
  [OrganisationRole].Name OrganisationRoleName,
  [Organisation_Instrument].StartDate,
  [Organisation_Instrument].EndDate,
  'Instrument' [Level],
  [Instrument].Code LevelCode,
  [Instrument].Name LevelName,
  2 [Weight],
  CAST(1 as bit) [IsReadOnly]
from
  [Organisation_Instrument]
  inner join [Instrument]
    on ([Organisation_Instrument].InstrumentID = [Instrument].ID)
  inner join [Organisation]
    on ([Organisation_Instrument].OrganisationID = [Organisation].ID)
  inner join [Station_Instrument]
    on ([Organisation_Instrument].InstrumentID = [Station_Instrument].InstrumentID)
  inner join [Station]
    on ([Station_Instrument].StationID = [Station].ID)
  inner join [Site]
    on ([Station].SiteID = [Site].ID)
  inner join [OrganisationRole]
    on ([Organisation_Instrument].OrganisationRoleID = [OrganisationRole].ID)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[vStation]...';


GO
ALTER VIEW [dbo].[vStation]
AS
SELECT 
  Station.*,
  s.Code SiteCode,
  s.Name SiteName
FROM 
  Station
  INNER JOIN [Site] s 
    on (Station.SiteID = s.ID)
GO
PRINT N'Altering [dbo].[vStationInstrument]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER VIEW [dbo].[vStationInstrument] AS 
SELECT 
  src.*, 
  [Station].Code StationCode,
  [Station].Name StationName,
  [Instrument].Code InstrumentCode,
  [Instrument].Name InstrumentName
FROM 
  [Station_Instrument] src
  inner join [Station]
    on (src.StationID = [Station].ID)
  inner join [Instrument] 
    on (src.InstrumentID = [Instrument].ID)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[vStationOrganisation]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER VIEW [dbo].[vStationOrganisation]
AS
Select
  [Organisation_Site].ID,
  OrganisationID,
  [Organisation].Code OrganisationCode,
  [Organisation].Name OrganisationName,
  [Station].ID StationID,
  [Station].Code StationCode,
  [Station].Name StationName,
  OrganisationRoleID, 
  [OrganisationRole].Code OrganisationRoleCode,
  [OrganisationRole].Name OrganisationRoleName,
  [Organisation_Site].StartDate,
  [Organisation_Site].EndDate,
  'Site' [Level],
  [Site].Code LevelCode,
  [Site].Name LevelName,
  0 [Weight],
  CAST(1 as bit) [IsReadOnly]
from
  [Organisation_Site]
  inner join [Site]
    on ([Organisation_Site].SiteID = [Site].ID)
  inner join [Organisation]
    on ([Organisation_Site].OrganisationID = [Organisation].ID)
  inner join [Station] 
    on ([Organisation_Site].SiteID = [Station].SiteID)
  inner join [OrganisationRole]
    on ([Organisation_Site].OrganisationRoleID = [OrganisationRole].ID)
union
Select 
  [Organisation_Station].ID,
  OrganisationID,
  [Organisation].Code OrganisationCode,
  [Organisation].Name OrganisationName,
  StationID,
  [Station].Code StationCode,
  [Station].Name StationName,
  OrganisationRoleID,
  [OrganisationRole].Code OrganisationRoleCode,
  [OrganisationRole].Name OrganisationRoleName,
  [Organisation_Station].StartDate,
  [Organisation_Station].EndDate,
  'Station' [Level],
  [Station].Code LevelCode,
  [Station].Name LevelName,
  1 [Weight],
  CAST(0 as bit) [IsReadOnly]
from 
  [Organisation_Station]
  inner join [Station] 
    on ([Organisation_Station].StationID = [Station].ID)
  inner join [Organisation]
    on ([Organisation_Station].OrganisationID = [Organisation].ID)
  inner join [OrganisationRole]
    on ([Organisation_Station].OrganisationRoleID = [OrganisationRole].ID)
union
Select
  [Organisation_Instrument].ID,
  OrganisationID,
  [Organisation].Code OrganisationCode,
  [Organisation].Name OrganisationName,
  [Station].ID StationID,
  [Station].Code StationCode,
  [Station].Name StationName,
  OrganisationRoleID,
  [OrganisationRole].Code OrganisationRoleCode,
  [OrganisationRole].Name OrganisationRoleName,
  [Organisation_Instrument].StartDate,
  [Organisation_Instrument].EndDate,
  'Instrument' [Level],
  [Instrument].Code LevelCode,
  [Instrument].Name LevelName,
  2 [Weight],
  CAST(1 as bit) [IsReadOnly]
from
  [Organisation_Instrument]
  inner join [Instrument]
    on ([Organisation_Instrument].InstrumentID = [Instrument].ID)
  inner join [Organisation]
    on ( [Organisation_Instrument].OrganisationID = [Organisation].ID)
  inner join [Station_Instrument]
    on ( [Organisation_Instrument].InstrumentID = [Station_Instrument].InstrumentID)
  inner join [Station]
    on ( [Station_Instrument].StationID = [Station].ID)
  inner join [OrganisationRole]
    on ( [Organisation_Instrument].OrganisationRoleID = [OrganisationRole].ID)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[vUnitOfMeasurePhenomena]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER VIEW [dbo].[vUnitOfMeasurePhenomena]
AS 
Select
  PhenomenonUOM.UnitOfMeasureID, Phenomenon.Code, Phenomenon.Name, Phenomenon.Description
from
  PhenomenonUOM
  inner join UnitOfMeasure
    on (PhenomenonUOM.UnitOfMeasureID = UnitOfMeasure.ID)
  inner join Phenomenon
    on (PhenomenonUOM.PhenomenonID = Phenomenon.ID)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Update complete.';


GO
