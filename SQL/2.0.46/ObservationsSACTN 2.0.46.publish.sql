/*
Deployment script for ObservationsSACTN

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "ObservationsSACTN"
:setvar DefaultFilePrefix "ObservationsSACTN"
:setvar DefaultDataPath "D:\Program Files\Microsoft SQL Server\MSSQL14.SAEON\MSSQL\DATA\"
:setvar DefaultLogPath "D:\Program Files\Microsoft SQL Server\MSSQL14.SAEON\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF (SELECT is_default
    FROM   [$(DatabaseName)].[sys].[filegroups]
    WHERE  [name] = N'Documents') = 0
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            MODIFY FILEGROUP [Documents] DEFAULT;
    END


--GO
--IF EXISTS (SELECT 1
--           FROM   [master].[dbo].[sysdatabases]
--           WHERE  [name] = N'$(DatabaseName)')
--    BEGIN
--        ALTER DATABASE [$(DatabaseName)]
--            SET TEMPORAL_HISTORY_RETENTION ON 
--            WITH ROLLBACK IMMEDIATE;
--    END


GO
PRINT N'Altering [dbo].[vInventory]...';


GO
ALTER VIEW [dbo].[vInventory]
AS
Select
  Row_Number() over (order by SiteName, StationName, InstrumentName, SensorName, PhenomenonName, OfferingName, UnitOfMeasureUnit) ID, s.*
from
(
Select
  SiteID, SiteCode, SiteName, 
  StationID, StationCode, StationName, 
  InstrumentID, InstrumentCode, InstrumentName, 
  SensorID, SensorCode, SensorName, 
  PhenomenonCode, PhenomenonName, 
  PhenomenonOfferingID, OfferingCode, OfferingName, 
  PhenomenonUOMID, UnitOfMeasureCode, UnitOfMeasureUnit, 
  Sum(Count) Count, Min(StartDate) StartDate, Max(EndDate) EndDate,
  Max(TopLatitude) TopLatitude, Min(BottomLatitude) BottomLatitude,
  Min(LeftLongitude) LeftLongitude, Max(RightLongitude) RightLongitude
from
  vImportBatchSummary
group by
  SiteID, SiteCode, SiteName, StationID, StationCode, StationName, InstrumentID, InstrumentCode, InstrumentName, 
  SensorID, SensorCode, SensorName, PhenomenonCode, PhenomenonName, 
  PhenomenonOfferingID, OfferingCode, OfferingName, 
  PhenomenonUOMID, UnitOfMeasureCode, UnitOfMeasureUnit
) s
GO
PRINT N'Creating [dbo].[vFeatures]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE VIEW [dbo].[vFeatures]
AS 
Select
  Phenomenon.ID PhenomenonID, Phenomenon.Name PhenomenonName, 
  PhenomenonOffering.ID PhenomenonOfferingID, Offering.ID OfferingID, Offering.Name OfferingName, 
  PhenomenonUOM.ID PhenomenonUOMID, UnitOfMeasure.ID UnitOfMeasureID, UnitOfMeasure.Unit UnitOfMeasureUnit
from
  Phenomenon
  inner join PhenomenonOffering
    on (PhenomenonOffering.PhenomenonID = Phenomenon.ID)
  inner join Offering
    on (PhenomenonOffering.OfferingID = Offering.ID)
  inner join PhenomenonUOM
    on (PhenomenonUOM.PhenomenonID = Phenomenon.ID)
  inner join UnitOfMeasure
    on (PhenomenonUOM.UnitOfMeasureID = UnitOfMeasure.ID)
where
  Exists(Select * from ImportBatchSummary where (PhenomenonOfferingID = PhenomenonOffering.ID) and (PhenomenonUOMID = PhenomenonUOM.ID))
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vLocations]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE VIEW [dbo].[vLocations]
AS
-- Organisation Stations from Sites
Select
  OrganisationID, Organisation.Name OrganisationName, Station.SiteID, Site.Name SiteName, Station.ID StationID, Station.Name StationName, Station.Latitude, Station.Longitude, Station.Elevation, Station.Url
from
  Organisation_Site
  inner join Organisation
    on (Organisation_Site.OrganisationID = Organisation.ID)
  inner join Site  
    on (Organisation_Site.SiteID = Site.ID)
  inner join Station
    on (Organisation_Site.SiteID = Station.SiteID)
where
  Exists(Select * from ImportBatchSummary where (SiteID = Station.SiteID) and (StationID = Station.ID))
union
-- Organisation Stations
Select
  OrganisationID, Organisation.Name OrganisationName, SiteID, Site.Name SiteName, StationID, Station.Name StationName, Station.Latitude, Station.Longitude, Station.Elevation, Station.Url
from
  Organisation_Station
  inner join Organisation
    on (Organisation_Station.OrganisationID = Organisation.ID)
  inner join Station
    on (Organisation_Station.StationID = Station.ID)
  inner join Site
    on (Station.SiteID = Site.ID)
where
  Exists(Select * from ImportBatchSummary where (SiteID = Station.SiteID) and (StationID = Station.ID))
union
-- Organisation Stations from Instruments
Select
  OrganisationID, Organisation.Name OrganisationName, SiteID, Site.Name SiteName, StationID, Station.Name StationName, Station.Latitude, Station.Longitude, Station.Elevation, Station.Url
from
  Organisation_Instrument
  inner join Organisation
    on (Organisation_Instrument.OrganisationID = Organisation.ID)
  inner join Station_Instrument
    on (Organisation_Instrument.InstrumentID = Station_Instrument.InstrumentID)
  inner join Station
    on (Station_Instrument.StationID = Station.ID)
  inner join Site
    on (Station.SiteID = Site.ID)
where
  Exists(Select * from ImportBatchSummary where (SiteID = Station.SiteID) and (StationID = Station.ID))
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;

GO
PRINT N'Update complete.';


GO
