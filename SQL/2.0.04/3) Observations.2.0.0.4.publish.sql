/*
Deployment script for Observations

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Observations"
:setvar DefaultFilePrefix "Observations"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SAEON\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SAEON\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET RECOVERY SIMPLE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Rename refactoring operation with key 05cd2faa-7c23-4e5f-9264-81298f8ceefe is skipped, element [dbo].[EventLog].[Id] (SqlSimpleColumn) will not be renamed to ID';


GO
PRINT N'Rename refactoring operation with key fee5307d-8a4a-429b-9921-bf8139f25a56, 276a2e24-039a-4bf7-a9ce-cce5ceb4e50c, 256144d4-2f99-4700-b150-0c257126c337, 43448c07-d402-400f-bf6d-9d87395cfab3, 049cdc54-9501-4b6d-a846-45c27db04a39, 4ebff796-fe28-4feb-906f-bcee8e078946, f76c9143-8c8e-41cc-974a-cb6b1304c4c4 is skipped, element [dbo].[AuditLog].[When] (SqlSimpleColumn) will not be renamed to AddedAt';


GO
PRINT N'Rename refactoring operation with key 231c3cc6-48ee-4187-bb05-d713c8d495c3, 96fcdfa7-cde1-4b86-aa45-f7389ce65f94 is skipped, element [dbo].[AuditLog].[Where] (SqlSimpleColumn) will not be renamed to Location';


GO
PRINT N'Rename refactoring operation with key a80503a6-5c20-478a-b2eb-a1fc057457c6 is skipped, element [dbo].[AuditLog].[What] (SqlSimpleColumn) will not be renamed to Description';


GO
PRINT N'Rename refactoring operation with key 512e36e1-6b21-47b7-b7db-82e6cf040e34 is skipped, element [dbo].[Progress].[SensorProcedureID] (SqlSimpleColumn) will not be renamed to SensorID';


GO
PRINT N'Rename refactoring operation with key e29eb5f4-8a30-4346-b3bc-c84664baf1b8 is skipped, element [dbo].[FK_Progress_SensorProcedure] (SqlForeignKeyConstraint) will not be renamed to [FK_Progress_Sensor]';


GO
PRINT N'Rename refactoring operation with key f214d16e-5d6e-4329-a8ea-6f7d561778ec is skipped, element [dbo].[Progress].[IX_Progress_SensorProcedureID] (SqlIndex) will not be renamed to [IX_Progress_SensorID]';


GO
PRINT N'Creating [aspnet_Membership_BasicAccess]...';


GO
CREATE ROLE [aspnet_Membership_BasicAccess]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [aspnet_Membership_FullAccess]...';


GO
CREATE ROLE [aspnet_Membership_FullAccess]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [aspnet_Membership_ReportingAccess]...';


GO
CREATE ROLE [aspnet_Membership_ReportingAccess]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [aspnet_Personalization_BasicAccess]...';


GO
CREATE ROLE [aspnet_Personalization_BasicAccess]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [aspnet_Personalization_FullAccess]...';


GO
CREATE ROLE [aspnet_Personalization_FullAccess]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [aspnet_Personalization_ReportingAccess]...';


GO
CREATE ROLE [aspnet_Personalization_ReportingAccess]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [aspnet_Profile_BasicAccess]...';


GO
CREATE ROLE [aspnet_Profile_BasicAccess]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [aspnet_Profile_FullAccess]...';


GO
CREATE ROLE [aspnet_Profile_FullAccess]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [aspnet_Profile_ReportingAccess]...';


GO
CREATE ROLE [aspnet_Profile_ReportingAccess]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [aspnet_Roles_BasicAccess]...';


GO
CREATE ROLE [aspnet_Roles_BasicAccess]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [aspnet_Roles_FullAccess]...';


GO
CREATE ROLE [aspnet_Roles_FullAccess]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [aspnet_Roles_ReportingAccess]...';


GO
CREATE ROLE [aspnet_Roles_ReportingAccess]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [aspnet_WebEvent_FullAccess]...';


GO
CREATE ROLE [aspnet_WebEvent_FullAccess]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'aspnet_Membership_BasicAccess', @membername = N'aspnet_Membership_FullAccess';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'aspnet_Membership_ReportingAccess', @membername = N'aspnet_Membership_FullAccess';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'aspnet_Personalization_BasicAccess', @membername = N'aspnet_Personalization_FullAccess';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'aspnet_Personalization_ReportingAccess', @membername = N'aspnet_Personalization_FullAccess';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'aspnet_Profile_BasicAccess', @membername = N'aspnet_Profile_FullAccess';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'aspnet_Profile_ReportingAccess', @membername = N'aspnet_Profile_FullAccess';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'aspnet_Roles_BasicAccess', @membername = N'aspnet_Roles_FullAccess';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'aspnet_Roles_ReportingAccess', @membername = N'aspnet_Roles_FullAccess';


GO
PRINT N'Creating [aspnet_Membership_BasicAccess]...';


GO
CREATE SCHEMA [aspnet_Membership_BasicAccess]
    AUTHORIZATION [aspnet_Membership_BasicAccess];


GO
PRINT N'Creating [aspnet_Membership_FullAccess]...';


GO
CREATE SCHEMA [aspnet_Membership_FullAccess]
    AUTHORIZATION [aspnet_Membership_FullAccess];


GO
PRINT N'Creating [aspnet_Membership_ReportingAccess]...';


GO
CREATE SCHEMA [aspnet_Membership_ReportingAccess]
    AUTHORIZATION [aspnet_Membership_ReportingAccess];


GO
PRINT N'Creating [aspnet_Personalization_BasicAccess]...';


GO
CREATE SCHEMA [aspnet_Personalization_BasicAccess]
    AUTHORIZATION [aspnet_Personalization_BasicAccess];


GO
PRINT N'Creating [aspnet_Personalization_FullAccess]...';


GO
CREATE SCHEMA [aspnet_Personalization_FullAccess]
    AUTHORIZATION [aspnet_Personalization_FullAccess];


GO
PRINT N'Creating [aspnet_Personalization_ReportingAccess]...';


GO
CREATE SCHEMA [aspnet_Personalization_ReportingAccess]
    AUTHORIZATION [aspnet_Personalization_ReportingAccess];


GO
PRINT N'Creating [aspnet_Profile_BasicAccess]...';


GO
CREATE SCHEMA [aspnet_Profile_BasicAccess]
    AUTHORIZATION [aspnet_Profile_BasicAccess];


GO
PRINT N'Creating [aspnet_Profile_FullAccess]...';


GO
CREATE SCHEMA [aspnet_Profile_FullAccess]
    AUTHORIZATION [aspnet_Profile_FullAccess];


GO
PRINT N'Creating [aspnet_Profile_ReportingAccess]...';


GO
CREATE SCHEMA [aspnet_Profile_ReportingAccess]
    AUTHORIZATION [aspnet_Profile_ReportingAccess];


GO
PRINT N'Creating [aspnet_Roles_BasicAccess]...';


GO
CREATE SCHEMA [aspnet_Roles_BasicAccess]
    AUTHORIZATION [aspnet_Roles_BasicAccess];


GO
PRINT N'Creating [aspnet_Roles_FullAccess]...';


GO
CREATE SCHEMA [aspnet_Roles_FullAccess]
    AUTHORIZATION [aspnet_Roles_FullAccess];


GO
PRINT N'Creating [aspnet_Roles_ReportingAccess]...';


GO
CREATE SCHEMA [aspnet_Roles_ReportingAccess]
    AUTHORIZATION [aspnet_Roles_ReportingAccess];


GO
PRINT N'Creating [aspnet_WebEvent_FullAccess]...';


GO
CREATE SCHEMA [aspnet_WebEvent_FullAccess]
    AUTHORIZATION [aspnet_WebEvent_FullAccess];


GO
PRINT N'Altering [dbo].[aspnet_Membership]...';


GO
EXECUTE sp_tableoption N'[dbo].[aspnet_Membership]', 'text in row', '3000';


GO
PRINT N'Creating [dbo].[aspnet_Membership].[aspnet_Membership_index]...';


GO
CREATE CLUSTERED INDEX [aspnet_Membership_index]
    ON [dbo].[aspnet_Membership]([ApplicationId] ASC, [LoweredEmail] ASC);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Membership]...';


GO
ALTER TABLE [dbo].[aspnet_Membership]
    ADD PRIMARY KEY NONCLUSTERED ([UserId] ASC);


GO
PRINT N'Altering [dbo].[aspnet_PersonalizationAllUsers]...';


GO
EXECUTE sp_tableoption N'[dbo].[aspnet_PersonalizationAllUsers]', 'text in row', '6000';


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_PersonalizationAllUsers]...';


GO
ALTER TABLE [dbo].[aspnet_PersonalizationAllUsers]
    ADD PRIMARY KEY CLUSTERED ([PathId] ASC);


GO
PRINT N'Altering [dbo].[aspnet_PersonalizationPerUser]...';


GO
EXECUTE sp_tableoption N'[dbo].[aspnet_PersonalizationPerUser]', 'text in row', '6000';


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationPerUser].[aspnet_PersonalizationPerUser_index1]...';


GO
CREATE UNIQUE CLUSTERED INDEX [aspnet_PersonalizationPerUser_index1]
    ON [dbo].[aspnet_PersonalizationPerUser]([PathId] ASC, [UserId] ASC);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_PersonalizationPerUser]...';


GO
ALTER TABLE [dbo].[aspnet_PersonalizationPerUser]
    ADD PRIMARY KEY NONCLUSTERED ([Id] ASC);


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationPerUser].[aspnet_PersonalizationPerUser_ncindex2]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [aspnet_PersonalizationPerUser_ncindex2]
    ON [dbo].[aspnet_PersonalizationPerUser]([UserId] ASC, [PathId] ASC);


GO
PRINT N'Altering [dbo].[aspnet_Profile]...';


GO
EXECUTE sp_tableoption N'[dbo].[aspnet_Profile]', 'text in row', '6000';


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Profile]...';


GO
ALTER TABLE [dbo].[aspnet_Profile]
    ADD PRIMARY KEY CLUSTERED ([UserId] ASC);


GO
PRINT N'Starting rebuilding table [dbo].[DataLog]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_DataLog] (
    [ID]                         INT              IDENTITY (1, 1) NOT NULL,
    [SensorID]                   UNIQUEIDENTIFIER NULL,
    [ImportDate]                 DATETIME         CONSTRAINT [DF_DataLog_ImportDate] DEFAULT (getdate()) NOT NULL,
    [ValueDate]                  DATETIME         NULL,
    [ValueTime]                  DATETIME         NULL,
    [ValueText]                  VARCHAR (50)     NOT NULL,
    [TransformValueText]         VARCHAR (50)     NULL,
    [RawValue]                   FLOAT (53)       NULL,
    [DataValue]                  FLOAT (53)       NULL,
    [Comment]                    VARCHAR (250)    NULL,
    [InvalidDateValue]           VARCHAR (50)     NULL,
    [InvalidTimeValue]           VARCHAR (50)     NULL,
    [InvalidOffering]            VARCHAR (50)     NULL,
    [InvalidUOM]                 VARCHAR (50)     NULL,
    [DataSourceTransformationID] UNIQUEIDENTIFIER NULL,
    [StatusID]                   UNIQUEIDENTIFIER NOT NULL,
    [ImportStatus]               VARCHAR (500)    NOT NULL,
    [UserId]                     UNIQUEIDENTIFIER NULL,
    [PhenomenonOfferingID]       UNIQUEIDENTIFIER NULL,
    [PhenomenonUOMID]            UNIQUEIDENTIFIER NULL,
    [ImportBatchID]              INT              NOT NULL,
    [RawRecordData]              VARCHAR (500)    NULL,
    [RawFieldValue]              VARCHAR (50)     NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_DataLog1] PRIMARY KEY CLUSTERED ([ID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[DataLog])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_DataLog] ON;
        INSERT INTO [dbo].[tmp_ms_xx_DataLog] ([ID], [SensorID], [ImportDate], [ValueDate], [ValueTime], [ValueText], [TransformValueText], [RawValue], [DataValue], [Comment], [InvalidDateValue], [InvalidTimeValue], [InvalidOffering], [InvalidUOM], [DataSourceTransformationID], [StatusID], [ImportStatus], [UserId], [PhenomenonOfferingID], [PhenomenonUOMID], [ImportBatchID], [RawRecordData], [RawFieldValue])
        SELECT   [ID],
                 [SensorID],
                 [ImportDate],
                 [ValueDate],
                 [ValueTime],
                 [ValueText],
                 [TransformValueText],
                 [RawValue],
                 [DataValue],
                 [Comment],
                 [InvalidDateValue],
                 [InvalidTimeValue],
                 [InvalidOffering],
                 [InvalidUOM],
                 [DataSourceTransformationID],
                 [StatusID],
                 [ImportStatus],
                 [UserId],
                 [PhenomenonOfferingID],
                 [PhenomenonUOMID],
                 [ImportBatchID],
                 [RawRecordData],
                 [RawFieldValue]
        FROM     [dbo].[DataLog]
        ORDER BY [ID] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_DataLog] OFF;
    END

DROP TABLE [dbo].[DataLog];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_DataLog]', N'DataLog';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_DataLog1]', N'PK_DataLog', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[DataLog].[IX_DataLog]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataLog]
    ON [dbo].[DataLog]([ImportBatchID] ASC);


GO
PRINT N'Creating [dbo].[DataLog].[IX_DataLog_SensorID]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataLog_SensorID]
    ON [dbo].[DataLog]([SensorID] ASC);


GO
PRINT N'Creating [dbo].[DataLog].[IX_DataLog_DataSourceTransformationID]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataLog_DataSourceTransformationID]
    ON [dbo].[DataLog]([DataSourceTransformationID] ASC);


GO
PRINT N'Creating [dbo].[DataLog].[IX_DataLog_PhenomenonOfferingID]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataLog_PhenomenonOfferingID]
    ON [dbo].[DataLog]([PhenomenonOfferingID] ASC);


GO
PRINT N'Creating [dbo].[DataLog].[IX_DataLog_PhenomenonUOMID]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataLog_PhenomenonUOMID]
    ON [dbo].[DataLog]([PhenomenonUOMID] ASC);


GO
PRINT N'Creating [dbo].[DataLog].[IX_DataLog_StatusID]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataLog_StatusID]
    ON [dbo].[DataLog]([StatusID] ASC);


GO
PRINT N'Creating [dbo].[DataLog].[IX_DataLog_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataLog_UserId]
    ON [dbo].[DataLog]([UserId] ASC);


GO
PRINT N'Starting rebuilding table [dbo].[DataSource]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_DataSource] (
    [ID]               UNIQUEIDENTIFIER CONSTRAINT [DF_DataSource_ID] DEFAULT (newid()) NOT NULL,
    [Code]             VARCHAR (50)     NOT NULL,
    [Name]             VARCHAR (150)    NOT NULL,
    [Description]      VARCHAR (5000)   NULL,
    [Url]              VARCHAR (250)    NOT NULL,
    [DefaultNullValue] FLOAT (53)       NULL,
    [ErrorEstimate]    FLOAT (53)       NULL,
    [UpdateFreq]       INT              NOT NULL,
    [StartDate]        DATETIME         NULL,
    [EndDate]          DATETIME         NULL,
    [LastUpdate]       DATETIME         NOT NULL,
    [DataSchemaID]     UNIQUEIDENTIFIER NULL,
    [UserId]           UNIQUEIDENTIFIER NOT NULL,
    [AddedAt]          DATETIME         CONSTRAINT [DF_DataSource_AddedAt] DEFAULT GetDate() NULL,
    [UpdatedAt]        DATETIME         CONSTRAINT [DF_DataSource_UpdatedAt] DEFAULT GetDate() NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_DataSource1] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_UX_DataSource_Code1] UNIQUE NONCLUSTERED ([Code] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_UX_DataSource_Name1] UNIQUE NONCLUSTERED ([Name] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[DataSource])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_DataSource] ([ID], [Code], [Name], [Description], [Url], [DefaultNullValue], [ErrorEstimate], [UpdateFreq], [StartDate], [LastUpdate], [DataSchemaID], [UserId])
        SELECT   [ID],
                 [Code],
                 [Name],
                 [Description],
                 [Url],
                 [DefaultNullValue],
                 [ErrorEstimate],
                 [UpdateFreq],
                 [StartDate],
                 [LastUpdate],
                 [DataSchemaID],
                 [UserId]
        FROM     [dbo].[DataSource]
        ORDER BY [ID] ASC;
    END

DROP TABLE [dbo].[DataSource];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_DataSource]', N'DataSource';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_DataSource1]', N'PK_DataSource', N'OBJECT';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_UX_DataSource_Code1]', N'UX_DataSource_Code', N'OBJECT';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_UX_DataSource_Name1]', N'UX_DataSource_Name', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[DataSource].[IX_DataSource_DataSchemaID]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataSource_DataSchemaID]
    ON [dbo].[DataSource]([DataSchemaID] ASC);


GO
PRINT N'Creating [dbo].[DataSource].[IX_DataSource_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataSource_UserId]
    ON [dbo].[DataSource]([UserId] ASC);


GO
PRINT N'Creating [dbo].[DataSource].[IX_DataSource_StartDate]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataSource_StartDate]
    ON [dbo].[DataSource]([StartDate] ASC);


GO
PRINT N'Creating [dbo].[DataSource].[IX_DataSource_EndDate]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataSource_EndDate]
    ON [dbo].[DataSource]([EndDate] ASC);


GO
PRINT N'Altering [dbo].[DataSourceRole]...';


GO
ALTER TABLE [dbo].[DataSourceRole]
    ADD [UserId] UNIQUEIDENTIFIER NULL;


GO
PRINT N'Creating [dbo].[PK_DataSourceRole]...';


GO
ALTER TABLE [dbo].[DataSourceRole]
    ADD CONSTRAINT [PK_DataSourceRole] PRIMARY KEY CLUSTERED ([ID] ASC);


GO
PRINT N'Creating [dbo].[DataSourceRole].[IX_DataSourceRole_DataSourceID]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataSourceRole_DataSourceID]
    ON [dbo].[DataSourceRole]([DataSourceID] ASC);


GO
PRINT N'Creating [dbo].[DataSourceRole].[IX_DataSourceRole_RoleId]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataSourceRole_RoleId]
    ON [dbo].[DataSourceRole]([RoleId] ASC);


GO
PRINT N'Creating [dbo].[DataSourceRole].[IX_DataSourceRole_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataSourceRole_UserId]
    ON [dbo].[DataSourceRole]([UserId] ASC);


GO
PRINT N'Altering [dbo].[DataSourceTransformation]...';


GO
ALTER TABLE [dbo].[DataSourceTransformation] ALTER COLUMN [Rank] INT NULL;


GO
ALTER TABLE [dbo].[DataSourceTransformation]
    ADD [UserId] UNIQUEIDENTIFIER NULL;


GO
PRINT N'Creating [dbo].[PK_DataSourceTransformation]...';


GO
ALTER TABLE [dbo].[DataSourceTransformation]
    ADD CONSTRAINT [PK_DataSourceTransformation] PRIMARY KEY CLUSTERED ([ID] ASC);


GO
PRINT N'Creating [dbo].[DataSourceTransformation].[IX_DataSourceTransformation_DataSourceID]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataSourceTransformation_DataSourceID]
    ON [dbo].[DataSourceTransformation]([DataSourceID] ASC);


GO
PRINT N'Creating [dbo].[DataSourceTransformation].[IX_DataSourceTransformation_NewPhenomenonOfferingID]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataSourceTransformation_NewPhenomenonOfferingID]
    ON [dbo].[DataSourceTransformation]([NewPhenomenonOfferingID] ASC);


GO
PRINT N'Creating [dbo].[DataSourceTransformation].[IX_DataSourceTransformation_NewPhenomenonUOMID]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataSourceTransformation_NewPhenomenonUOMID]
    ON [dbo].[DataSourceTransformation]([NewPhenomenonUOMID] ASC);


GO
PRINT N'Creating [dbo].[DataSourceTransformation].[IX_DataSourceTransformation_PhenomenonID]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataSourceTransformation_PhenomenonID]
    ON [dbo].[DataSourceTransformation]([PhenomenonID] ASC);


GO
PRINT N'Creating [dbo].[DataSourceTransformation].[IX_DataSourceTransformation_PhenomenonOfferingID]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataSourceTransformation_PhenomenonOfferingID]
    ON [dbo].[DataSourceTransformation]([PhenomenonOfferingID] ASC);


GO
PRINT N'Creating [dbo].[DataSourceTransformation].[IX_DataSourceTransformation_PhenomenonUOMID]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataSourceTransformation_PhenomenonUOMID]
    ON [dbo].[DataSourceTransformation]([PhenomenonUOMID] ASC);


GO
PRINT N'Creating [dbo].[DataSourceTransformation].[IX_DataSourceTransformation_SensorID]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataSourceTransformation_SensorID]
    ON [dbo].[DataSourceTransformation]([SensorID] ASC);


GO
PRINT N'Creating [dbo].[DataSourceTransformation].[IX_DataSourceTransformation_TransformationTypeID]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataSourceTransformation_TransformationTypeID]
    ON [dbo].[DataSourceTransformation]([TransformationTypeID] ASC);


GO
PRINT N'Creating [dbo].[DataSourceTransformation].[IX_DataSourceTransformation_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataSourceTransformation_UserId]
    ON [dbo].[DataSourceTransformation]([UserId] ASC);


GO
PRINT N'Altering [dbo].[DataSourceType]...';


GO
ALTER TABLE [dbo].[DataSourceType]
    ADD [UserId] UNIQUEIDENTIFIER NULL;


GO
PRINT N'Creating [dbo].[PK_DataSourceType]...';


GO
ALTER TABLE [dbo].[DataSourceType]
    ADD CONSTRAINT [PK_DataSourceType] PRIMARY KEY CLUSTERED ([ID] ASC);


GO
PRINT N'Creating [dbo].[UX_DataSourceType_Code]...';


GO
ALTER TABLE [dbo].[DataSourceType]
    ADD CONSTRAINT [UX_DataSourceType_Code] UNIQUE NONCLUSTERED ([Code] ASC);


GO
PRINT N'Creating [dbo].[DataSourceType].[IX_DataSourceType_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataSourceType_UserId]
    ON [dbo].[DataSourceType]([UserId] ASC);


GO
PRINT N'Starting rebuilding table [dbo].[ImportBatch]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_ImportBatch] (
    [ID]           INT              IDENTITY (1, 1) NOT NULL,
    [Guid]         UNIQUEIDENTIFIER CONSTRAINT [DF_ImportBatch_Guid] DEFAULT (newid()) NOT NULL,
    [DataSourceID] UNIQUEIDENTIFIER NOT NULL,
    [ImportDate]   DATETIME         CONSTRAINT [DF_ImportBatch_ImportDate] DEFAULT (getdate()) NOT NULL,
    [Status]       INT              NOT NULL,
    [UserId]       UNIQUEIDENTIFIER NOT NULL,
    [FileName]     VARCHAR (250)    NULL,
    [LogFileName]  VARCHAR (250)    NULL,
    [Comment]      VARCHAR (8000)   NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_ImportBatch1] PRIMARY KEY CLUSTERED ([ID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[ImportBatch])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_ImportBatch] ON;
        INSERT INTO [dbo].[tmp_ms_xx_ImportBatch] ([ID], [Guid], [DataSourceID], [ImportDate], [Status], [UserId], [FileName], [LogFileName], [Comment])
        SELECT   [ID],
                 [Guid],
                 [DataSourceID],
                 [ImportDate],
                 [Status],
                 [UserId],
                 [FileName],
                 [LogFileName],
                 [Comment]
        FROM     [dbo].[ImportBatch]
        ORDER BY [ID] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_ImportBatch] OFF;
    END

DROP TABLE [dbo].[ImportBatch];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_ImportBatch]', N'ImportBatch';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_ImportBatch1]', N'PK_ImportBatch', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[ImportBatch].[IX_ImportBatch_DataSourceID]...';


GO
CREATE NONCLUSTERED INDEX [IX_ImportBatch_DataSourceID]
    ON [dbo].[ImportBatch]([DataSourceID] ASC);


GO
PRINT N'Creating [dbo].[ImportBatch].[IX_ImportBatch_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_ImportBatch_UserId]
    ON [dbo].[ImportBatch]([UserId] ASC);


GO
PRINT N'Starting rebuilding table [dbo].[Observation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Observation] (
    [ID]                   INT              IDENTITY (1, 1) NOT NULL,
    [SensorID]             UNIQUEIDENTIFIER NOT NULL,
    [ValueDate]            DATETIME         NOT NULL,
    [RawValue]             FLOAT (53)       NULL,
    [DataValue]            FLOAT (53)       NULL,
    [Comment]              VARCHAR (250)    NULL,
    [PhenomenonOfferingID] UNIQUEIDENTIFIER NOT NULL,
    [PhenomenonUOMID]      UNIQUEIDENTIFIER NOT NULL,
    [ImportBatchID]        INT              NOT NULL,
    [UserId]               UNIQUEIDENTIFIER NOT NULL,
    [AddedDate]            DATETIME         CONSTRAINT [DF_Observation_AddedDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Observation1] PRIMARY KEY CLUSTERED ([ID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Observation])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Observation] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Observation] ([ID], [SensorID], [ValueDate], [RawValue], [DataValue], [Comment], [PhenomenonOfferingID], [PhenomenonUOMID], [ImportBatchID], [UserId], [AddedDate])
        SELECT   [ID],
                 [SensorID],
                 [ValueDate],
                 [RawValue],
                 [DataValue],
                 [Comment],
                 [PhenomenonOfferingID],
                 [PhenomenonUOMID],
                 [ImportBatchID],
                 [UserId],
                 [AddedDate]
        FROM     [dbo].[Observation]
        ORDER BY [ID] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Observation] OFF;
    END

DROP TABLE [dbo].[Observation];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Observation]', N'Observation';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_Observation1]', N'PK_Observation', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[Observation].[IX_Observation]...';


GO
CREATE NONCLUSTERED INDEX [IX_Observation]
    ON [dbo].[Observation]([SensorID] ASC, [ValueDate] ASC, [RawValue] ASC);


GO
PRINT N'Creating [dbo].[Observation].[IX_Observation_ImportBatchID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Observation_ImportBatchID]
    ON [dbo].[Observation]([ImportBatchID] ASC);


GO
PRINT N'Creating [dbo].[Observation].[IX_Observation_SensorID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Observation_SensorID]
    ON [dbo].[Observation]([SensorID] ASC);


GO
PRINT N'Creating [dbo].[Observation].[IX_Observation_PhenomenonOfferingID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Observation_PhenomenonOfferingID]
    ON [dbo].[Observation]([PhenomenonOfferingID] ASC);


GO
PRINT N'Creating [dbo].[Observation].[IX_Observation_PhenomenonUOMID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Observation_PhenomenonUOMID]
    ON [dbo].[Observation]([PhenomenonUOMID] ASC);


GO
PRINT N'Creating [dbo].[Observation].[IX_Observation_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Observation_UserId]
    ON [dbo].[Observation]([UserId] ASC);


GO
PRINT N'Starting rebuilding table [dbo].[Organisation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Organisation] (
    [ID]          UNIQUEIDENTIFIER CONSTRAINT [DF_Table_1_Organisation] DEFAULT (newid()) NOT NULL,
    [Code]        VARCHAR (50)     NOT NULL,
    [Name]        VARCHAR (150)    NOT NULL,
    [Description] VARCHAR (5000)   NULL,
    [Url]         VARCHAR (250)    NULL,
    [UserId]      UNIQUEIDENTIFIER NOT NULL,
    [AddedAt]     DATETIME         CONSTRAINT [DF_Organisation_AddedAt] DEFAULT GetDate() NULL,
    [UpdatedAt]   DATETIME         CONSTRAINT [DF_Organisation_UpdatedAt] DEFAULT GetDate() NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Organisation1] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_UX_Organisation_Code1] UNIQUE NONCLUSTERED ([Code] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_UX_Organisation_Name1] UNIQUE NONCLUSTERED ([Name] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Organisation])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_Organisation] ([ID], [Code], [Name], [Description], [UserId])
        SELECT   [ID],
                 [Code],
                 [Name],
                 [Description],
                 [UserId]
        FROM     [dbo].[Organisation]
        ORDER BY [ID] ASC;
    END

DROP TABLE [dbo].[Organisation];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Organisation]', N'Organisation';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_Organisation1]', N'PK_Organisation', N'OBJECT';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_UX_Organisation_Code1]', N'UX_Organisation_Code', N'OBJECT';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_UX_Organisation_Name1]', N'UX_Organisation_Name', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[Organisation].[IX_Organisation_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Organisation_UserId]
    ON [dbo].[Organisation]([UserId] ASC);


GO
PRINT N'Altering [dbo].[PhenomenonOffering]...';


GO
ALTER TABLE [dbo].[PhenomenonOffering]
    ADD [UserId] UNIQUEIDENTIFIER NULL;


GO
PRINT N'Creating [dbo].[PK_PhenomenonOffering]...';


GO
ALTER TABLE [dbo].[PhenomenonOffering]
    ADD CONSTRAINT [PK_PhenomenonOffering] PRIMARY KEY CLUSTERED ([ID] ASC);


GO
PRINT N'Creating [dbo].[UX_PhenomenonOffering]...';


GO
ALTER TABLE [dbo].[PhenomenonOffering]
    ADD CONSTRAINT [UX_PhenomenonOffering] UNIQUE NONCLUSTERED ([PhenomenonID] ASC, [OfferingID] ASC);


GO
PRINT N'Creating [dbo].[PhenomenonOffering].[IX_PhenomenonOffering_OfferingID]...';


GO
CREATE NONCLUSTERED INDEX [IX_PhenomenonOffering_OfferingID]
    ON [dbo].[PhenomenonOffering]([OfferingID] ASC);


GO
PRINT N'Creating [dbo].[PhenomenonOffering].[IX_PhenomenonOffering_PhenomenonID]...';


GO
CREATE NONCLUSTERED INDEX [IX_PhenomenonOffering_PhenomenonID]
    ON [dbo].[PhenomenonOffering]([PhenomenonID] ASC);


GO
PRINT N'Creating [dbo].[PhenomenonOffering].[IX_PhenomenonOffering_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_PhenomenonOffering_UserId]
    ON [dbo].[PhenomenonOffering]([UserId] ASC);


GO
PRINT N'Altering [dbo].[PhenomenonUOM]...';


GO
ALTER TABLE [dbo].[PhenomenonUOM]
    ADD [UserId] UNIQUEIDENTIFIER NULL;


GO
PRINT N'Creating [dbo].[PK_PhenomenonUOM]...';


GO
ALTER TABLE [dbo].[PhenomenonUOM]
    ADD CONSTRAINT [PK_PhenomenonUOM] PRIMARY KEY CLUSTERED ([ID] ASC);


GO
PRINT N'Creating [dbo].[UX_PhenomenonUOM]...';


GO
ALTER TABLE [dbo].[PhenomenonUOM]
    ADD CONSTRAINT [UX_PhenomenonUOM] UNIQUE NONCLUSTERED ([PhenomenonID] ASC, [UnitOfMeasureID] ASC);


GO
PRINT N'Creating [dbo].[PhenomenonUOM].[IX_PhenomenonUOM_PhenomenonID]...';


GO
CREATE NONCLUSTERED INDEX [IX_PhenomenonUOM_PhenomenonID]
    ON [dbo].[PhenomenonUOM]([PhenomenonID] ASC);


GO
PRINT N'Creating [dbo].[PhenomenonUOM].[IX_PhenomenonUOM_UnitOfMeasureID]...';


GO
CREATE NONCLUSTERED INDEX [IX_PhenomenonUOM_UnitOfMeasureID]
    ON [dbo].[PhenomenonUOM]([UnitOfMeasureID] ASC);


GO
PRINT N'Creating [dbo].[PhenomenonUOM].[IX_PhenomenonUOM_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_PhenomenonUOM_UserId]
    ON [dbo].[PhenomenonUOM]([UserId] ASC);


GO
PRINT N'Starting rebuilding table [dbo].[Sensor]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Sensor] (
    [ID]           UNIQUEIDENTIFIER CONSTRAINT [DF_Sensor_ID] DEFAULT (newid()) NOT NULL,
    [Code]         VARCHAR (50)     NOT NULL,
    [Name]         VARCHAR (150)    NOT NULL,
    [Description]  VARCHAR (5000)   NULL,
    [Url]          VARCHAR (250)    NULL,
    [StationID]    UNIQUEIDENTIFIER NOT NULL,
    [PhenomenonID] UNIQUEIDENTIFIER NOT NULL,
    [DataSourceID] UNIQUEIDENTIFIER NOT NULL,
    [DataSchemaID] UNIQUEIDENTIFIER NULL,
    [InstrumentID] UNIQUEIDENTIFIER NULL,
    [UserId]       UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Sensor1] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_UX_Sensor_Code1] UNIQUE NONCLUSTERED ([Code] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Sensor])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_Sensor] ([ID], [Code], [Name], [Description], [Url], [StationID], [PhenomenonID], [DataSourceID], [DataSchemaID], [UserId])
        SELECT   [ID],
                 [Code],
                 [Name],
                 [Description],
                 [Url],
                 [StationID],
                 [PhenomenonID],
                 [DataSourceID],
                 [DataSchemaID],
                 [UserId]
        FROM     [dbo].[Sensor]
        ORDER BY [ID] ASC;
    END

DROP TABLE [dbo].[Sensor];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Sensor]', N'Sensor';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_Sensor1]', N'PK_Sensor', N'OBJECT';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_UX_Sensor_Code1]', N'UX_Sensor_Code', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[Sensor].[IX_Sensor_StationID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Sensor_StationID]
    ON [dbo].[Sensor]([StationID] ASC);


GO
PRINT N'Creating [dbo].[Sensor].[IX_Sensor_PhenomenonID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Sensor_PhenomenonID]
    ON [dbo].[Sensor]([PhenomenonID] ASC);


GO
PRINT N'Creating [dbo].[Sensor].[IX_Sensor_DataSourceID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Sensor_DataSourceID]
    ON [dbo].[Sensor]([DataSourceID] ASC);


GO
PRINT N'Creating [dbo].[Sensor].[IX_Sensor_DataSchemaID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Sensor_DataSchemaID]
    ON [dbo].[Sensor]([DataSchemaID] ASC);


GO
PRINT N'Creating [dbo].[Sensor].[IX_Sensor_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Sensor_UserId]
    ON [dbo].[Sensor]([UserId] ASC);


GO
PRINT N'Creating [dbo].[Sensor].[IX_Sensor_InstrumentID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Sensor_InstrumentID]
    ON [dbo].[Sensor]([InstrumentID] ASC);


GO
PRINT N'Altering [dbo].[Station]...';


GO
ALTER TABLE [dbo].[Station] ALTER COLUMN [ProjectSiteID] UNIQUEIDENTIFIER NULL;


GO
ALTER TABLE [dbo].[Station]
    ADD [SiteID]    UNIQUEIDENTIFIER NULL,
        [StartDate] DATETIME         NULL,
        [EndDate]   DATETIME         NULL,
        [AddedAt]   DATETIME         CONSTRAINT [DF_Station_AddedAt] DEFAULT GetDate() NULL,
        [UpdatedAt] DATETIME         CONSTRAINT [DF_Station_UpdatedAt] DEFAULT GetDate() NULL;


GO
PRINT N'Creating [dbo].[PKStation]...';


GO
ALTER TABLE [dbo].[Station]
    ADD CONSTRAINT [PKStation] PRIMARY KEY CLUSTERED ([ID] ASC);


GO
PRINT N'Creating [dbo].[UX_Station_Code]...';


GO
ALTER TABLE [dbo].[Station]
    ADD CONSTRAINT [UX_Station_Code] UNIQUE NONCLUSTERED ([Code] ASC);


GO
PRINT N'Creating [dbo].[UX_Station_Name]...';


GO
ALTER TABLE [dbo].[Station]
    ADD CONSTRAINT [UX_Station_Name] UNIQUE NONCLUSTERED ([Name] ASC);


GO
PRINT N'Creating [dbo].[Station].[IX_Station_ProjectSiteID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Station_ProjectSiteID]
    ON [dbo].[Station]([ProjectSiteID] ASC);


GO
PRINT N'Creating [dbo].[Station].[IX_Station_SiteID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Station_SiteID]
    ON [dbo].[Station]([SiteID] ASC);


GO
PRINT N'Creating [dbo].[Station].[IX_Station_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Station_UserId]
    ON [dbo].[Station]([UserId] ASC);


GO
PRINT N'Altering [dbo].[Status]...';


GO
ALTER TABLE [dbo].[Status]
    ADD [UserId] UNIQUEIDENTIFIER NULL;


GO
PRINT N'Creating [dbo].[PK_Status]...';


GO
ALTER TABLE [dbo].[Status]
    ADD CONSTRAINT [PK_Status] PRIMARY KEY CLUSTERED ([ID] ASC);


GO
PRINT N'Creating [dbo].[UX_Status_Code]...';


GO
ALTER TABLE [dbo].[Status]
    ADD CONSTRAINT [UX_Status_Code] UNIQUE NONCLUSTERED ([Code] ASC);


GO
PRINT N'Creating [dbo].[UX_Status_Name]...';


GO
ALTER TABLE [dbo].[Status]
    ADD CONSTRAINT [UX_Status_Name] UNIQUE NONCLUSTERED ([Name] ASC);


GO
PRINT N'Creating [dbo].[Status].[IX_Status_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Status_UserId]
    ON [dbo].[Status]([UserId] ASC);


GO
PRINT N'Altering [dbo].[TransformationType]...';


GO
ALTER TABLE [dbo].[TransformationType]
    ADD [UserId] UNIQUEIDENTIFIER NULL;


GO
PRINT N'Creating [dbo].[PK_TransformationType]...';


GO
ALTER TABLE [dbo].[TransformationType]
    ADD CONSTRAINT [PK_TransformationType] PRIMARY KEY CLUSTERED ([ID] ASC);


GO
PRINT N'Creating [dbo].[UX_TransformationType_Code]...';


GO
ALTER TABLE [dbo].[TransformationType]
    ADD CONSTRAINT [UX_TransformationType_Code] UNIQUE NONCLUSTERED ([Code] ASC);


GO
PRINT N'Creating [dbo].[UX_TransformationType_Name]...';


GO
ALTER TABLE [dbo].[TransformationType]
    ADD CONSTRAINT [UX_TransformationType_Name] UNIQUE NONCLUSTERED ([Name] ASC);


GO
PRINT N'Creating [dbo].[TransformationType].[IX_TransformationType_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_TransformationType_UserId]
    ON [dbo].[TransformationType]([UserId] ASC);


GO
PRINT N'Creating [dbo].[AuditLog]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[AuditLog] (
    [ID]          UNIQUEIDENTIFIER NOT NULL,
    [Description] VARCHAR (500)    NOT NULL,
    [UserId]      UNIQUEIDENTIFIER NOT NULL,
    [AddedAt]     DATETIME         NULL,
    [UpdatedAt]   DATETIME         NULL,
    CONSTRAINT [PK_AuditLog] PRIMARY KEY NONCLUSTERED ([ID] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[AuditLog].[IX_AuditLog_AddedAt]...';


GO
CREATE CLUSTERED INDEX [IX_AuditLog_AddedAt]
    ON [dbo].[AuditLog]([AddedAt] ASC);


GO
PRINT N'Creating [dbo].[AuditLog].[IX_AuditLog_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_AuditLog_UserId]
    ON [dbo].[AuditLog]([UserId] ASC);


GO
PRINT N'Creating [dbo].[Instrument]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[Instrument] (
    [ID]          UNIQUEIDENTIFIER NOT NULL,
    [StationID]   UNIQUEIDENTIFIER NULL,
    [Code]        VARCHAR (50)     NOT NULL,
    [Name]        VARCHAR (150)    NOT NULL,
    [Description] VARCHAR (5000)   NULL,
    [Url]         VARCHAR (250)    NULL,
    [StartDate]   DATETIME         NULL,
    [EndDate]     DATETIME         NULL,
    [UserId]      UNIQUEIDENTIFIER NOT NULL,
    [AddedAt]     DATETIME         NULL,
    [UpdatedAt]   DATETIME         NULL,
    CONSTRAINT [PK_Instrument] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UX_Instrument_Code] UNIQUE NONCLUSTERED ([Code] ASC),
    CONSTRAINT [UX_Instrument_Name] UNIQUE NONCLUSTERED ([Name] ASC),
    CONSTRAINT [UX_Instrument_StationID_Code] UNIQUE NONCLUSTERED ([StationID] ASC, [Code] ASC),
    CONSTRAINT [UX_Instrument_StationID_Name] UNIQUE NONCLUSTERED ([StationID] ASC, [Name] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[Instrument_Organisation]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[Instrument_Organisation] (
    [ID]                 UNIQUEIDENTIFIER NOT NULL,
    [InstrumentID]       UNIQUEIDENTIFIER NOT NULL,
    [OrganisationID]     UNIQUEIDENTIFIER NOT NULL,
    [OrganisationRoleID] UNIQUEIDENTIFIER NOT NULL,
    [StartDate]          DATETIME         NULL,
    [EndDate]            DATETIME         NULL,
    [UserId]             UNIQUEIDENTIFIER NOT NULL,
    [AddedAt]            DATETIME         NULL,
    [UpdatedAt]          DATETIME         NULL,
    CONSTRAINT [PK_Instrument_Organisation] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UX_Instrument_Organisation] UNIQUE NONCLUSTERED ([InstrumentID] ASC, [OrganisationID] ASC, [OrganisationRoleID] ASC, [StartDate] ASC, [EndDate] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[Instrument_Organisation].[IX_Instrument_Organisation_InstrumentID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Instrument_Organisation_InstrumentID]
    ON [dbo].[Instrument_Organisation]([InstrumentID] ASC);


GO
PRINT N'Creating [dbo].[Instrument_Organisation].[IX_Instrument_Organisation_OrganisationID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Instrument_Organisation_OrganisationID]
    ON [dbo].[Instrument_Organisation]([OrganisationID] ASC);


GO
PRINT N'Creating [dbo].[Instrument_Organisation].[IX_Instrument_Organisation_OrganisationRoleID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Instrument_Organisation_OrganisationRoleID]
    ON [dbo].[Instrument_Organisation]([OrganisationRoleID] ASC);


GO
PRINT N'Creating [dbo].[Instrument_Organisation].[IX_Instrument_Organisation_StartDate]...';


GO
CREATE NONCLUSTERED INDEX [IX_Instrument_Organisation_StartDate]
    ON [dbo].[Instrument_Organisation]([StartDate] ASC);


GO
PRINT N'Creating [dbo].[Instrument_Organisation].[IX_Instrument_Organisation_EndDate]...';


GO
CREATE NONCLUSTERED INDEX [IX_Instrument_Organisation_EndDate]
    ON [dbo].[Instrument_Organisation]([EndDate] ASC);


GO
PRINT N'Creating [dbo].[Instrument_Organisation].[IX_Instrument_Organisation_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Instrument_Organisation_UserId]
    ON [dbo].[Instrument_Organisation]([UserId] ASC);


GO
PRINT N'Creating [dbo].[OrganisationRole]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[OrganisationRole] (
    [ID]          UNIQUEIDENTIFIER NOT NULL,
    [Code]        VARCHAR (50)     NOT NULL,
    [Name]        VARCHAR (150)    NOT NULL,
    [Description] VARCHAR (5000)   NULL,
    [UserId]      UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_OrganisationRole] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UX_OrganisationRole_Code] UNIQUE NONCLUSTERED ([Code] ASC),
    CONSTRAINT [UX_OrganisationRole_Name] UNIQUE NONCLUSTERED ([Name] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[OrganisationRole].[IX_OrganisationRole_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_OrganisationRole_UserId]
    ON [dbo].[OrganisationRole]([UserId] ASC);


GO
PRINT N'Creating [dbo].[Site]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[Site] (
    [ID]          UNIQUEIDENTIFIER NOT NULL,
    [Code]        VARCHAR (50)     NOT NULL,
    [Name]        VARCHAR (150)    NOT NULL,
    [Description] VARCHAR (5000)   NULL,
    [Url]         VARCHAR (250)    NULL,
    [StartDate]   DATETIME         NULL,
    [EndDate]     DATETIME         NULL,
    [UserId]      UNIQUEIDENTIFIER NOT NULL,
    [AddedAt]     DATETIME         NULL,
    [UpdatedAt]   DATETIME         NULL,
    CONSTRAINT [PK_Site] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UX_Site_Code] UNIQUE NONCLUSTERED ([Code] ASC),
    CONSTRAINT [UX_Site_Name] UNIQUE NONCLUSTERED ([Name] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[Site].[IX_Instrument_StartDate]...';


GO
CREATE NONCLUSTERED INDEX [IX_Instrument_StartDate]
    ON [dbo].[Site]([StartDate] ASC);


GO
PRINT N'Creating [dbo].[Site].[IX_Instrument_EndDate]...';


GO
CREATE NONCLUSTERED INDEX [IX_Instrument_EndDate]
    ON [dbo].[Site]([EndDate] ASC);


GO
PRINT N'Creating [dbo].[Site].[IX_Instrument_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Instrument_UserId]
    ON [dbo].[Site]([UserId] ASC);


GO
PRINT N'Creating [dbo].[Site].[IX_Site_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Site_UserId]
    ON [dbo].[Site]([UserId] ASC);


GO
PRINT N'Creating [dbo].[Site].[IX_Site_StartDate]...';


GO
CREATE NONCLUSTERED INDEX [IX_Site_StartDate]
    ON [dbo].[Site]([StartDate] ASC);


GO
PRINT N'Creating [dbo].[Site].[IX_Site_EndDate]...';


GO
CREATE NONCLUSTERED INDEX [IX_Site_EndDate]
    ON [dbo].[Site]([EndDate] ASC);


GO
PRINT N'Creating [dbo].[Site_Organisation]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[Site_Organisation] (
    [ID]                 UNIQUEIDENTIFIER NOT NULL,
    [SiteID]             UNIQUEIDENTIFIER NOT NULL,
    [OrganisationID]     UNIQUEIDENTIFIER NOT NULL,
    [OrganisationRoleID] UNIQUEIDENTIFIER NOT NULL,
    [StartDate]          DATETIME         NULL,
    [EndDate]            DATETIME         NULL,
    [UserId]             UNIQUEIDENTIFIER NOT NULL,
    [AddedAt]            DATETIME         NULL,
    [UpdatedAt]          DATETIME         NULL,
    CONSTRAINT [PK_Site_Organisation] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UX_Site_Organisation] UNIQUE NONCLUSTERED ([SiteID] ASC, [OrganisationID] ASC, [OrganisationRoleID] ASC, [StartDate] ASC, [EndDate] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[Site_Organisation].[IX_Site_Organisation_SiteID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Site_Organisation_SiteID]
    ON [dbo].[Site_Organisation]([SiteID] ASC);


GO
PRINT N'Creating [dbo].[Site_Organisation].[IX_Site_Organisation_OrganisationID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Site_Organisation_OrganisationID]
    ON [dbo].[Site_Organisation]([OrganisationID] ASC);


GO
PRINT N'Creating [dbo].[Site_Organisation].[IX_Site_Organisation_OrganisationRoleID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Site_Organisation_OrganisationRoleID]
    ON [dbo].[Site_Organisation]([OrganisationRoleID] ASC);


GO
PRINT N'Creating [dbo].[Site_Organisation].[IX_Site_Organisation_StartDate]...';


GO
CREATE NONCLUSTERED INDEX [IX_Site_Organisation_StartDate]
    ON [dbo].[Site_Organisation]([StartDate] ASC);


GO
PRINT N'Creating [dbo].[Site_Organisation].[IX_Site_Organisation_EndDate]...';


GO
CREATE NONCLUSTERED INDEX [IX_Site_Organisation_EndDate]
    ON [dbo].[Site_Organisation]([EndDate] ASC);


GO
PRINT N'Creating [dbo].[Site_Organisation].[IX_Site_Organisation_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Site_Organisation_UserId]
    ON [dbo].[Site_Organisation]([UserId] ASC);


GO
PRINT N'Creating [dbo].[Station_Organisation]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[Station_Organisation] (
    [ID]                 UNIQUEIDENTIFIER NOT NULL,
    [StationID]          UNIQUEIDENTIFIER NOT NULL,
    [OrganisationID]     UNIQUEIDENTIFIER NOT NULL,
    [OrganisationRoleID] UNIQUEIDENTIFIER NOT NULL,
    [StartDate]          DATETIME         NULL,
    [EndDate]            DATETIME         NULL,
    [UserId]             UNIQUEIDENTIFIER NOT NULL,
    [AddedAt]            DATETIME         NULL,
    [UpdatedAt]          DATETIME         NULL,
    CONSTRAINT [PK_Station_Organisation] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UX_Station_Organisation] UNIQUE NONCLUSTERED ([StationID] ASC, [OrganisationID] ASC, [OrganisationRoleID] ASC, [StartDate] ASC, [EndDate] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[Station_Organisation].[IX_Station_Organisation_StationID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Station_Organisation_StationID]
    ON [dbo].[Station_Organisation]([StationID] ASC);


GO
PRINT N'Creating [dbo].[Station_Organisation].[IX_Station_Organisation_OrganisationID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Station_Organisation_OrganisationID]
    ON [dbo].[Station_Organisation]([OrganisationID] ASC);


GO
PRINT N'Creating [dbo].[Station_Organisation].[IX_Station_Organisation_OrganisationRoleID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Station_Organisation_OrganisationRoleID]
    ON [dbo].[Station_Organisation]([OrganisationRoleID] ASC);


GO
PRINT N'Creating [dbo].[Station_Organisation].[IX_Station_Organisation_StartDate]...';


GO
CREATE NONCLUSTERED INDEX [IX_Station_Organisation_StartDate]
    ON [dbo].[Station_Organisation]([StartDate] ASC);


GO
PRINT N'Creating [dbo].[Station_Organisation].[IX_Station_Organisation_EndDate]...';


GO
CREATE NONCLUSTERED INDEX [IX_Station_Organisation_EndDate]
    ON [dbo].[Station_Organisation]([EndDate] ASC);


GO
PRINT N'Creating [dbo].[Station_Organisation].[IX_Station_Organisation_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Station_Organisation_UserId]
    ON [dbo].[Station_Organisation]([UserId] ASC);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Paths]...';


GO
ALTER TABLE [dbo].[aspnet_Paths]
    ADD PRIMARY KEY NONCLUSTERED ([PathId] ASC);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Roles]...';


GO
ALTER TABLE [dbo].[aspnet_Roles]
    ADD PRIMARY KEY NONCLUSTERED ([RoleId] ASC);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_SchemaVersions]...';


GO
ALTER TABLE [dbo].[aspnet_SchemaVersions]
    ADD PRIMARY KEY CLUSTERED ([Feature] ASC, [CompatibleSchemaVersion] ASC);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_UsersInRoles]...';


GO
ALTER TABLE [dbo].[aspnet_UsersInRoles]
    ADD PRIMARY KEY CLUSTERED ([UserId] ASC, [RoleId] ASC);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_WebEvent_Events]...';


GO
ALTER TABLE [dbo].[aspnet_WebEvent_Events]
    ADD PRIMARY KEY CLUSTERED ([EventId] ASC);


GO
PRINT N'Creating [dbo].[PK_DataSchema]...';


GO
ALTER TABLE [dbo].[DataSchema]
    ADD CONSTRAINT [PK_DataSchema] PRIMARY KEY CLUSTERED ([ID] ASC);


GO
PRINT N'Creating [dbo].[UX_DataSchema_Code]...';


GO
ALTER TABLE [dbo].[DataSchema]
    ADD CONSTRAINT [UX_DataSchema_Code] UNIQUE NONCLUSTERED ([Code] ASC);


GO
PRINT N'Creating [dbo].[UX_DataSchema_Name]...';


GO
ALTER TABLE [dbo].[DataSchema]
    ADD CONSTRAINT [UX_DataSchema_Name] UNIQUE NONCLUSTERED ([Name] ASC);


GO
PRINT N'Creating [dbo].[DataSchema].[IX_DataSchema_DataSourceTypeID]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataSchema_DataSourceTypeID]
    ON [dbo].[DataSchema]([DataSourceTypeID] ASC);


GO
PRINT N'Creating [dbo].[DataSchema].[IX_DataSchema_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_DataSchema_UserId]
    ON [dbo].[DataSchema]([UserId] ASC);


GO
PRINT N'Creating [dbo].[PK_Module]...';


GO
ALTER TABLE [dbo].[Module]
    ADD CONSTRAINT [PK_Module] PRIMARY KEY CLUSTERED ([ID] ASC);


GO
PRINT N'Creating [dbo].[PK_Offering]...';


GO
ALTER TABLE [dbo].[Offering]
    ADD CONSTRAINT [PK_Offering] PRIMARY KEY CLUSTERED ([ID] ASC);


GO
PRINT N'Creating [dbo].[UX_Offering_Code]...';


GO
ALTER TABLE [dbo].[Offering]
    ADD CONSTRAINT [UX_Offering_Code] UNIQUE NONCLUSTERED ([Code] ASC);


GO
PRINT N'Creating [dbo].[UX_Offering_Name]...';


GO
ALTER TABLE [dbo].[Offering]
    ADD CONSTRAINT [UX_Offering_Name] UNIQUE NONCLUSTERED ([Name] ASC);


GO
PRINT N'Creating [dbo].[Offering].[IX_Offering_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Offering_UserId]
    ON [dbo].[Offering]([UserId] ASC);


GO
PRINT N'Creating [dbo].[PK_Phenomenon]...';


GO
ALTER TABLE [dbo].[Phenomenon]
    ADD CONSTRAINT [PK_Phenomenon] PRIMARY KEY CLUSTERED ([ID] ASC);


GO
PRINT N'Creating [dbo].[UX_Phenomenon_Code]...';


GO
ALTER TABLE [dbo].[Phenomenon]
    ADD CONSTRAINT [UX_Phenomenon_Code] UNIQUE NONCLUSTERED ([Code] ASC);


GO
PRINT N'Creating [dbo].[UX_Phenomenon_Name]...';


GO
ALTER TABLE [dbo].[Phenomenon]
    ADD CONSTRAINT [UX_Phenomenon_Name] UNIQUE NONCLUSTERED ([Name] ASC);


GO
PRINT N'Creating [dbo].[Phenomenon].[IX_Phenomenon_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Phenomenon_UserId]
    ON [dbo].[Phenomenon]([UserId] ASC);


GO
PRINT N'Creating [dbo].[PK_ProjectSite]...';


GO
ALTER TABLE [dbo].[ProjectSite]
    ADD CONSTRAINT [PK_ProjectSite] PRIMARY KEY CLUSTERED ([ID] ASC);


GO
PRINT N'Creating [dbo].[UX_ProjectSite_Code]...';


GO
ALTER TABLE [dbo].[ProjectSite]
    ADD CONSTRAINT [UX_ProjectSite_Code] UNIQUE NONCLUSTERED ([Code] ASC);


GO
PRINT N'Creating [dbo].[UX_ProjectSite_Name]...';


GO
ALTER TABLE [dbo].[ProjectSite]
    ADD CONSTRAINT [UX_ProjectSite_Name] UNIQUE NONCLUSTERED ([Name] ASC);


GO
PRINT N'Creating [dbo].[ProjectSite].[IX_ProjectSite_OrganisationID]...';


GO
CREATE NONCLUSTERED INDEX [IX_ProjectSite_OrganisationID]
    ON [dbo].[ProjectSite]([OrganisationID] ASC);


GO
PRINT N'Creating [dbo].[ProjectSite].[IX_ProjectSite_UserID]...';


GO
CREATE NONCLUSTERED INDEX [IX_ProjectSite_UserID]
    ON [dbo].[ProjectSite]([UserId] ASC);


GO
PRINT N'Creating [dbo].[PK_RoleModule]...';


GO
ALTER TABLE [dbo].[RoleModule]
    ADD CONSTRAINT [PK_RoleModule] PRIMARY KEY CLUSTERED ([ID] ASC);


GO
PRINT N'Creating [dbo].[RoleModule].[IX_RoleModule_ModuleID]...';


GO
CREATE NONCLUSTERED INDEX [IX_RoleModule_ModuleID]
    ON [dbo].[RoleModule]([ModuleID] ASC);


GO
PRINT N'Creating [dbo].[RoleModule].[IX_RoleModule_RoleId]...';


GO
CREATE NONCLUSTERED INDEX [IX_RoleModule_RoleId]
    ON [dbo].[RoleModule]([RoleId] ASC);


GO
PRINT N'Creating [dbo].[PK_UnitOfMeasure]...';


GO
ALTER TABLE [dbo].[UnitOfMeasure]
    ADD CONSTRAINT [PK_UnitOfMeasure] PRIMARY KEY CLUSTERED ([ID] ASC);


GO
PRINT N'Creating [dbo].[UX_UnitOfMeasure_Code]...';


GO
ALTER TABLE [dbo].[UnitOfMeasure]
    ADD CONSTRAINT [UX_UnitOfMeasure_Code] UNIQUE NONCLUSTERED ([Code] ASC);


GO
PRINT N'Creating [dbo].[UX_UnitOfMeasure_Unit]...';


GO
ALTER TABLE [dbo].[UnitOfMeasure]
    ADD CONSTRAINT [UX_UnitOfMeasure_Unit] UNIQUE NONCLUSTERED ([Unit] ASC);


GO
PRINT N'Creating [dbo].[UnitOfMeasure].[IX_UnitOfMeasure_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_UnitOfMeasure_UserId]
    ON [dbo].[UnitOfMeasure]([UserId] ASC);


GO
PRINT N'Creating [dbo].[aspnet_Applications].[aspnet_Applications_Index]...';


GO
CREATE CLUSTERED INDEX [aspnet_Applications_Index]
    ON [dbo].[aspnet_Applications]([LoweredApplicationName] ASC);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Applications]...';


GO
ALTER TABLE [dbo].[aspnet_Applications]
    ADD PRIMARY KEY NONCLUSTERED ([ApplicationId] ASC);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Applications]...';


GO
ALTER TABLE [dbo].[aspnet_Applications]
    ADD UNIQUE NONCLUSTERED ([ApplicationName] ASC);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Applications]...';


GO
ALTER TABLE [dbo].[aspnet_Applications]
    ADD UNIQUE NONCLUSTERED ([LoweredApplicationName] ASC);


GO
PRINT N'Creating [dbo].[aspnet_Paths].[aspnet_Paths_index]...';


GO
CREATE UNIQUE CLUSTERED INDEX [aspnet_Paths_index]
    ON [dbo].[aspnet_Paths]([ApplicationId] ASC, [LoweredPath] ASC);


GO
PRINT N'Creating [dbo].[aspnet_Roles].[aspnet_Roles_index1]...';


GO
CREATE UNIQUE CLUSTERED INDEX [aspnet_Roles_index1]
    ON [dbo].[aspnet_Roles]([ApplicationId] ASC, [LoweredRoleName] ASC);


GO
PRINT N'Creating [dbo].[aspnet_Users].[aspnet_Users_Index]...';


GO
CREATE UNIQUE CLUSTERED INDEX [aspnet_Users_Index]
    ON [dbo].[aspnet_Users]([ApplicationId] ASC, [LoweredUserName] ASC);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Users]...';


GO
ALTER TABLE [dbo].[aspnet_Users]
    ADD PRIMARY KEY NONCLUSTERED ([UserId] ASC);


GO
PRINT N'Creating [dbo].[aspnet_Users].[aspnet_Users_Index2]...';


GO
CREATE NONCLUSTERED INDEX [aspnet_Users_Index2]
    ON [dbo].[aspnet_Users]([ApplicationId] ASC, [LastActivityDate] ASC);


GO
PRINT N'Creating [dbo].[aspnet_UsersInRoles].[aspnet_UsersInRoles_index]...';


GO
CREATE NONCLUSTERED INDEX [aspnet_UsersInRoles_index]
    ON [dbo].[aspnet_UsersInRoles]([RoleId] ASC);


GO
PRINT N'Creating [dbo].[Module].[IX_Module_ModuleID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Module_ModuleID]
    ON [dbo].[Module]([ModuleID] ASC);


GO
PRINT N'Creating [dbo].[Progress].[IX_Progress_ImportBatchID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Progress_ImportBatchID]
    ON [dbo].[Progress]([ImportBatchID] ASC);


GO
PRINT N'Creating [dbo].[Progress].[IX_Progress_PhenomenonOfferingID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Progress_PhenomenonOfferingID]
    ON [dbo].[Progress]([PhenomenonOfferingID] ASC);


GO
PRINT N'Creating [dbo].[Progress].[IX_Progress_SensorID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Progress_SensorID]
    ON [dbo].[Progress]([SensorID] ASC);


GO
PRINT N'Creating [dbo].[Progress].[IX_Progress_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Progress_UserId]
    ON [dbo].[Progress]([UserId] ASC);


GO
PRINT N'Creating [dbo].[DF_AuditLog_ID]...';


GO
ALTER TABLE [dbo].[AuditLog]
    ADD CONSTRAINT [DF_AuditLog_ID] DEFAULT NewID() FOR [ID];


GO
PRINT N'Creating [dbo].[DF_AuditLog_AddedAt]...';


GO
ALTER TABLE [dbo].[AuditLog]
    ADD CONSTRAINT [DF_AuditLog_AddedAt] DEFAULT GetDate() FOR [AddedAt];


GO
PRINT N'Creating [dbo].[DF_AuditLog_UpdatedAt]...';


GO
ALTER TABLE [dbo].[AuditLog]
    ADD CONSTRAINT [DF_AuditLog_UpdatedAt] DEFAULT GetDate() FOR [UpdatedAt];


GO
PRINT N'Creating [dbo].[DF_Instrument_ID]...';


GO
ALTER TABLE [dbo].[Instrument]
    ADD CONSTRAINT [DF_Instrument_ID] DEFAULT newid() FOR [ID];


GO
PRINT N'Creating [dbo].[DF_Instrument_AddedAt]...';


GO
ALTER TABLE [dbo].[Instrument]
    ADD CONSTRAINT [DF_Instrument_AddedAt] DEFAULT GetDate() FOR [AddedAt];


GO
PRINT N'Creating [dbo].[DF_Instrument_UpdatedAt]...';


GO
ALTER TABLE [dbo].[Instrument]
    ADD CONSTRAINT [DF_Instrument_UpdatedAt] DEFAULT GetDate() FOR [UpdatedAt];


GO
PRINT N'Creating [dbo].[DF_Instrument_Organisation_ID]...';


GO
ALTER TABLE [dbo].[Instrument_Organisation]
    ADD CONSTRAINT [DF_Instrument_Organisation_ID] DEFAULT newid() FOR [ID];


GO
PRINT N'Creating [dbo].[DF_Instrument_Organisation_AddedAt]...';


GO
ALTER TABLE [dbo].[Instrument_Organisation]
    ADD CONSTRAINT [DF_Instrument_Organisation_AddedAt] DEFAULT GetDate() FOR [AddedAt];


GO
PRINT N'Creating [dbo].[DF_Instrument_Organisation_UpdatedAt]...';


GO
ALTER TABLE [dbo].[Instrument_Organisation]
    ADD CONSTRAINT [DF_Instrument_Organisation_UpdatedAt] DEFAULT GetDate() FOR [UpdatedAt];


GO
PRINT N'Creating [dbo].[DF_OrganisationRole_ID]...';


GO
ALTER TABLE [dbo].[OrganisationRole]
    ADD CONSTRAINT [DF_OrganisationRole_ID] DEFAULT newid() FOR [ID];


GO
PRINT N'Creating [dbo].[DF_Site_ID]...';


GO
ALTER TABLE [dbo].[Site]
    ADD CONSTRAINT [DF_Site_ID] DEFAULT newid() FOR [ID];


GO
PRINT N'Creating [dbo].[DF_Site_AddedAt]...';


GO
ALTER TABLE [dbo].[Site]
    ADD CONSTRAINT [DF_Site_AddedAt] DEFAULT GetDate() FOR [AddedAt];


GO
PRINT N'Creating [dbo].[DF_Site_UpdatedAt]...';


GO
ALTER TABLE [dbo].[Site]
    ADD CONSTRAINT [DF_Site_UpdatedAt] DEFAULT GetDate() FOR [UpdatedAt];


GO
PRINT N'Creating [dbo].[DF_Site_Organisation_ID]...';


GO
ALTER TABLE [dbo].[Site_Organisation]
    ADD CONSTRAINT [DF_Site_Organisation_ID] DEFAULT newid() FOR [ID];


GO
PRINT N'Creating [dbo].[DF_Site_Organisation_AddedAt]...';


GO
ALTER TABLE [dbo].[Site_Organisation]
    ADD CONSTRAINT [DF_Site_Organisation_AddedAt] DEFAULT GetDate() FOR [AddedAt];


GO
PRINT N'Creating [dbo].[DF_Site_Organisation_UpdatedAt]...';


GO
ALTER TABLE [dbo].[Site_Organisation]
    ADD CONSTRAINT [DF_Site_Organisation_UpdatedAt] DEFAULT GetDate() FOR [UpdatedAt];


GO
PRINT N'Creating [dbo].[DF_Station_Organisation_ID]...';


GO
ALTER TABLE [dbo].[Station_Organisation]
    ADD CONSTRAINT [DF_Station_Organisation_ID] DEFAULT newid() FOR [ID];


GO
PRINT N'Creating [dbo].[DF_Station_Organisation_AddedAt]...';


GO
ALTER TABLE [dbo].[Station_Organisation]
    ADD CONSTRAINT [DF_Station_Organisation_AddedAt] DEFAULT GetDate() FOR [AddedAt];


GO
PRINT N'Creating [dbo].[DF_Station_Organisation_UpdatedAt]...';


GO
ALTER TABLE [dbo].[Station_Organisation]
    ADD CONSTRAINT [DF_Station_Organisation_UpdatedAt] DEFAULT GetDate() FOR [UpdatedAt];


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Applications]...';


GO
ALTER TABLE [dbo].[aspnet_Applications]
    ADD DEFAULT (newid()) FOR [ApplicationId];


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Membership]...';


GO
ALTER TABLE [dbo].[aspnet_Membership]
    ADD DEFAULT ((0)) FOR [PasswordFormat];


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Paths]...';


GO
ALTER TABLE [dbo].[aspnet_Paths]
    ADD DEFAULT (newid()) FOR [PathId];


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_PersonalizationPerUser]...';


GO
ALTER TABLE [dbo].[aspnet_PersonalizationPerUser]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Roles]...';


GO
ALTER TABLE [dbo].[aspnet_Roles]
    ADD DEFAULT (newid()) FOR [RoleId];


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Users]...';


GO
ALTER TABLE [dbo].[aspnet_Users]
    ADD DEFAULT (newid()) FOR [UserId];


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Users]...';


GO
ALTER TABLE [dbo].[aspnet_Users]
    ADD DEFAULT (NULL) FOR [MobileAlias];


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Users]...';


GO
ALTER TABLE [dbo].[aspnet_Users]
    ADD DEFAULT ((0)) FOR [IsAnonymous];


GO
PRINT N'Creating [dbo].[DF_DataSchema_ID]...';


GO
ALTER TABLE [dbo].[DataSchema]
    ADD CONSTRAINT [DF_DataSchema_ID] DEFAULT (newid()) FOR [ID];


GO
PRINT N'Creating [dbo].[DF_DataSchema_IgnoreFirst]...';


GO
ALTER TABLE [dbo].[DataSchema]
    ADD CONSTRAINT [DF_DataSchema_IgnoreFirst] DEFAULT ((0)) FOR [IgnoreFirst];


GO
PRINT N'Creating [dbo].[DF_DataSchema_IgnoreLast]...';


GO
ALTER TABLE [dbo].[DataSchema]
    ADD CONSTRAINT [DF_DataSchema_IgnoreLast] DEFAULT ((0)) FOR [IgnoreLast];


GO
PRINT N'Creating [dbo].[DF_DataSourceRole_ID]...';


GO
ALTER TABLE [dbo].[DataSourceRole]
    ADD CONSTRAINT [DF_DataSourceRole_ID] DEFAULT (newid()) FOR [ID];


GO
PRINT N'Creating [dbo].[DF_DataSourceTransformation_ID]...';


GO
ALTER TABLE [dbo].[DataSourceTransformation]
    ADD CONSTRAINT [DF_DataSourceTransformation_ID] DEFAULT (newid()) FOR [ID];


GO
PRINT N'Creating [dbo].[DF_DataSourceTransformation_Rank]...';


GO
ALTER TABLE [dbo].[DataSourceTransformation]
    ADD CONSTRAINT [DF_DataSourceTransformation_Rank] DEFAULT ((0)) FOR [Rank];


GO
PRINT N'Creating [dbo].[DF_DataSourceType_ID]...';


GO
ALTER TABLE [dbo].[DataSourceType]
    ADD CONSTRAINT [DF_DataSourceType_ID] DEFAULT (newid()) FOR [ID];


GO
PRINT N'Creating [dbo].[DF_Module_ID]...';


GO
ALTER TABLE [dbo].[Module]
    ADD CONSTRAINT [DF_Module_ID] DEFAULT (newid()) FOR [ID];


GO
PRINT N'Creating [dbo].[DF_Offering_ID]...';


GO
ALTER TABLE [dbo].[Offering]
    ADD CONSTRAINT [DF_Offering_ID] DEFAULT (newid()) FOR [ID];


GO
PRINT N'Creating [dbo].[DF_Phenomenon_ID]...';


GO
ALTER TABLE [dbo].[Phenomenon]
    ADD CONSTRAINT [DF_Phenomenon_ID] DEFAULT (newid()) FOR [ID];


GO
PRINT N'Creating [dbo].[DF_PhenomenonOffering_ID]...';


GO
ALTER TABLE [dbo].[PhenomenonOffering]
    ADD CONSTRAINT [DF_PhenomenonOffering_ID] DEFAULT (newid()) FOR [ID];


GO
PRINT N'Creating [dbo].[DF_PhenomenonUOM_ID]...';


GO
ALTER TABLE [dbo].[PhenomenonUOM]
    ADD CONSTRAINT [DF_PhenomenonUOM_ID] DEFAULT (newid()) FOR [ID];


GO
PRINT N'Creating [dbo].[DF_PhenomenonUOM_IsDefault]...';


GO
ALTER TABLE [dbo].[PhenomenonUOM]
    ADD CONSTRAINT [DF_PhenomenonUOM_IsDefault] DEFAULT ((0)) FOR [IsDefault];


GO
PRINT N'Creating [dbo].[DF_ProjectSite_ID]...';


GO
ALTER TABLE [dbo].[ProjectSite]
    ADD CONSTRAINT [DF_ProjectSite_ID] DEFAULT (newid()) FOR [ID];


GO
PRINT N'Creating [dbo].[DF_RoleModule_ID]...';


GO
ALTER TABLE [dbo].[RoleModule]
    ADD CONSTRAINT [DF_RoleModule_ID] DEFAULT (newid()) FOR [ID];


GO
PRINT N'Creating [dbo].[DF_Statuib_StationID]...';


GO
ALTER TABLE [dbo].[Station]
    ADD CONSTRAINT [DF_Statuib_StationID] DEFAULT (newid()) FOR [ID];


GO
PRINT N'Creating [dbo].[DF_Status_ID]...';


GO
ALTER TABLE [dbo].[Status]
    ADD CONSTRAINT [DF_Status_ID] DEFAULT (newid()) FOR [ID];


GO
PRINT N'Creating [dbo].[DF_TransformationType_ID]...';


GO
ALTER TABLE [dbo].[TransformationType]
    ADD CONSTRAINT [DF_TransformationType_ID] DEFAULT (newid()) FOR [ID];


GO
PRINT N'Creating [dbo].[DF_UnitOfMeasure_ID]...';


GO
ALTER TABLE [dbo].[UnitOfMeasure]
    ADD CONSTRAINT [DF_UnitOfMeasure_ID] DEFAULT (newid()) FOR [ID];


GO
PRINT N'Creating [dbo].[FK_DataLog_aspnet_Users]...';


GO
ALTER TABLE [dbo].[DataLog] WITH NOCHECK
    ADD CONSTRAINT [FK_DataLog_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_DataLog_DataSourceTransformation]...';


GO
ALTER TABLE [dbo].[DataLog] WITH NOCHECK
    ADD CONSTRAINT [FK_DataLog_DataSourceTransformation] FOREIGN KEY ([DataSourceTransformationID]) REFERENCES [dbo].[DataSourceTransformation] ([ID]);


GO
PRINT N'Creating [dbo].[FK_DataLog_ImportBatch]...';


GO
ALTER TABLE [dbo].[DataLog] WITH NOCHECK
    ADD CONSTRAINT [FK_DataLog_ImportBatch] FOREIGN KEY ([ImportBatchID]) REFERENCES [dbo].[ImportBatch] ([ID]);


GO
PRINT N'Creating [dbo].[FK_DataLog_PhenomenonOffering]...';


GO
ALTER TABLE [dbo].[DataLog] WITH NOCHECK
    ADD CONSTRAINT [FK_DataLog_PhenomenonOffering] FOREIGN KEY ([PhenomenonOfferingID]) REFERENCES [dbo].[PhenomenonOffering] ([ID]);


GO
PRINT N'Creating [dbo].[FK_DataLog_PhenomenonUOM]...';


GO
ALTER TABLE [dbo].[DataLog] WITH NOCHECK
    ADD CONSTRAINT [FK_DataLog_PhenomenonUOM] FOREIGN KEY ([PhenomenonUOMID]) REFERENCES [dbo].[PhenomenonUOM] ([ID]);


GO
PRINT N'Creating [dbo].[FK_DataLog_Sensor]...';


GO
ALTER TABLE [dbo].[DataLog] WITH NOCHECK
    ADD CONSTRAINT [FK_DataLog_Sensor] FOREIGN KEY ([SensorID]) REFERENCES [dbo].[Sensor] ([ID]);


GO
PRINT N'Creating [dbo].[FK_DataLog_Status]...';


GO
ALTER TABLE [dbo].[DataLog] WITH NOCHECK
    ADD CONSTRAINT [FK_DataLog_Status] FOREIGN KEY ([StatusID]) REFERENCES [dbo].[Status] ([ID]);


GO
PRINT N'Creating [dbo].[FK_DataSource_aspnet_Users]...';


GO
ALTER TABLE [dbo].[DataSource] WITH NOCHECK
    ADD CONSTRAINT [FK_DataSource_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_DataSource_DataSchema]...';


GO
ALTER TABLE [dbo].[DataSource] WITH NOCHECK
    ADD CONSTRAINT [FK_DataSource_DataSchema] FOREIGN KEY ([DataSchemaID]) REFERENCES [dbo].[DataSchema] ([ID]);


GO
PRINT N'Creating [dbo].[FK_ImportBatch_aspnet_Users]...';


GO
ALTER TABLE [dbo].[ImportBatch] WITH NOCHECK
    ADD CONSTRAINT [FK_ImportBatch_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_ImportBatch_DataSource]...';


GO
ALTER TABLE [dbo].[ImportBatch] WITH NOCHECK
    ADD CONSTRAINT [FK_ImportBatch_DataSource] FOREIGN KEY ([DataSourceID]) REFERENCES [dbo].[DataSource] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Observation_aspnet_Users]...';


GO
ALTER TABLE [dbo].[Observation] WITH NOCHECK
    ADD CONSTRAINT [FK_Observation_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_Observation_ImportBatch]...';


GO
ALTER TABLE [dbo].[Observation] WITH NOCHECK
    ADD CONSTRAINT [FK_Observation_ImportBatch] FOREIGN KEY ([ImportBatchID]) REFERENCES [dbo].[ImportBatch] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Observation_PhenomenonOffering]...';


GO
ALTER TABLE [dbo].[Observation] WITH NOCHECK
    ADD CONSTRAINT [FK_Observation_PhenomenonOffering] FOREIGN KEY ([PhenomenonOfferingID]) REFERENCES [dbo].[PhenomenonOffering] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Observation_PhenomenonUOM]...';


GO
ALTER TABLE [dbo].[Observation] WITH NOCHECK
    ADD CONSTRAINT [FK_Observation_PhenomenonUOM] FOREIGN KEY ([PhenomenonUOMID]) REFERENCES [dbo].[PhenomenonUOM] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Observation_Sensor]...';


GO
ALTER TABLE [dbo].[Observation] WITH NOCHECK
    ADD CONSTRAINT [FK_Observation_Sensor] FOREIGN KEY ([SensorID]) REFERENCES [dbo].[Sensor] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Organisation_aspnet_Users]...';


GO
ALTER TABLE [dbo].[Organisation] WITH NOCHECK
    ADD CONSTRAINT [FK_Organisation_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_Sensor_aspnet_Users]...';


GO
ALTER TABLE [dbo].[Sensor] WITH NOCHECK
    ADD CONSTRAINT [FK_Sensor_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_Sensor_DataSource]...';


GO
ALTER TABLE [dbo].[Sensor] WITH NOCHECK
    ADD CONSTRAINT [FK_Sensor_DataSource] FOREIGN KEY ([DataSourceID]) REFERENCES [dbo].[DataSource] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Sensor_DataSchema]...';


GO
ALTER TABLE [dbo].[Sensor] WITH NOCHECK
    ADD CONSTRAINT [FK_Sensor_DataSchema] FOREIGN KEY ([DataSchemaID]) REFERENCES [dbo].[DataSchema] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Sensor_Phenomenon]...';


GO
ALTER TABLE [dbo].[Sensor] WITH NOCHECK
    ADD CONSTRAINT [FK_Sensor_Phenomenon] FOREIGN KEY ([PhenomenonID]) REFERENCES [dbo].[Phenomenon] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Sensor_Instrument]...';


GO
ALTER TABLE [dbo].[Sensor] WITH NOCHECK
    ADD CONSTRAINT [FK_Sensor_Instrument] FOREIGN KEY ([InstrumentID]) REFERENCES [dbo].[Instrument] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Sensor_Station]...';


GO
ALTER TABLE [dbo].[Sensor] WITH NOCHECK
    ADD CONSTRAINT [FK_Sensor_Station] FOREIGN KEY ([StationID]) REFERENCES [dbo].[Station] ([ID]);


GO
PRINT N'Creating [dbo].[FK_AuditLog_aspnet_Users]...';


GO
ALTER TABLE [dbo].[AuditLog] WITH NOCHECK
    ADD CONSTRAINT [FK_AuditLog_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_Instrument_Station]...';


GO
ALTER TABLE [dbo].[Instrument] WITH NOCHECK
    ADD CONSTRAINT [FK_Instrument_Station] FOREIGN KEY ([StationID]) REFERENCES [dbo].[Station] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Instrument_aspnet_Users]...';


GO
ALTER TABLE [dbo].[Instrument] WITH NOCHECK
    ADD CONSTRAINT [FK_Instrument_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_Instrument_Organisation_Instrument]...';


GO
ALTER TABLE [dbo].[Instrument_Organisation] WITH NOCHECK
    ADD CONSTRAINT [FK_Instrument_Organisation_Instrument] FOREIGN KEY ([InstrumentID]) REFERENCES [dbo].[Instrument] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Instrument_Organisation_Organisation]...';


GO
ALTER TABLE [dbo].[Instrument_Organisation] WITH NOCHECK
    ADD CONSTRAINT [FK_Instrument_Organisation_Organisation] FOREIGN KEY ([OrganisationID]) REFERENCES [dbo].[Organisation] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Instrument_Organisation_OrganisationRole]...';


GO
ALTER TABLE [dbo].[Instrument_Organisation] WITH NOCHECK
    ADD CONSTRAINT [FK_Instrument_Organisation_OrganisationRole] FOREIGN KEY ([OrganisationRoleID]) REFERENCES [dbo].[OrganisationRole] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Instrument_Organisation_aspnet_Users]...';


GO
ALTER TABLE [dbo].[Instrument_Organisation] WITH NOCHECK
    ADD CONSTRAINT [FK_Instrument_Organisation_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_OrganisationRole_aspnet_Users]...';


GO
ALTER TABLE [dbo].[OrganisationRole] WITH NOCHECK
    ADD CONSTRAINT [FK_OrganisationRole_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_Site_aspnet_Users]...';


GO
ALTER TABLE [dbo].[Site] WITH NOCHECK
    ADD CONSTRAINT [FK_Site_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_Site_Organisation_Site]...';


GO
ALTER TABLE [dbo].[Site_Organisation] WITH NOCHECK
    ADD CONSTRAINT [FK_Site_Organisation_Site] FOREIGN KEY ([SiteID]) REFERENCES [dbo].[Site] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Site_Organisation_Organisation]...';


GO
ALTER TABLE [dbo].[Site_Organisation] WITH NOCHECK
    ADD CONSTRAINT [FK_Site_Organisation_Organisation] FOREIGN KEY ([OrganisationID]) REFERENCES [dbo].[Organisation] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Site_Organisation_OrganisationRole]...';


GO
ALTER TABLE [dbo].[Site_Organisation] WITH NOCHECK
    ADD CONSTRAINT [FK_Site_Organisation_OrganisationRole] FOREIGN KEY ([OrganisationRoleID]) REFERENCES [dbo].[OrganisationRole] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Site_Organisation_aspnet_Users]...';


GO
ALTER TABLE [dbo].[Site_Organisation] WITH NOCHECK
    ADD CONSTRAINT [FK_Site_Organisation_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_Station_Organisation_Station]...';


GO
ALTER TABLE [dbo].[Station_Organisation] WITH NOCHECK
    ADD CONSTRAINT [FK_Station_Organisation_Station] FOREIGN KEY ([StationID]) REFERENCES [dbo].[Station] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Station_Organisation_Organisation]...';


GO
ALTER TABLE [dbo].[Station_Organisation] WITH NOCHECK
    ADD CONSTRAINT [FK_Station_Organisation_Organisation] FOREIGN KEY ([OrganisationID]) REFERENCES [dbo].[Organisation] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Station_Organisation_OrganisationRole]...';


GO
ALTER TABLE [dbo].[Station_Organisation] WITH NOCHECK
    ADD CONSTRAINT [FK_Station_Organisation_OrganisationRole] FOREIGN KEY ([OrganisationRoleID]) REFERENCES [dbo].[OrganisationRole] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Station_Organisation_aspnet_Users]...';


GO
ALTER TABLE [dbo].[Station_Organisation] WITH NOCHECK
    ADD CONSTRAINT [FK_Station_Organisation_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Membership]...';


GO
ALTER TABLE [dbo].[aspnet_Membership] WITH NOCHECK
    ADD FOREIGN KEY ([ApplicationId]) REFERENCES [dbo].[aspnet_Applications] ([ApplicationId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Membership]...';


GO
ALTER TABLE [dbo].[aspnet_Membership] WITH NOCHECK
    ADD FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Paths]...';


GO
ALTER TABLE [dbo].[aspnet_Paths] WITH NOCHECK
    ADD FOREIGN KEY ([ApplicationId]) REFERENCES [dbo].[aspnet_Applications] ([ApplicationId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_PersonalizationAllUsers]...';


GO
ALTER TABLE [dbo].[aspnet_PersonalizationAllUsers] WITH NOCHECK
    ADD FOREIGN KEY ([PathId]) REFERENCES [dbo].[aspnet_Paths] ([PathId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_PersonalizationPerUser]...';


GO
ALTER TABLE [dbo].[aspnet_PersonalizationPerUser] WITH NOCHECK
    ADD FOREIGN KEY ([PathId]) REFERENCES [dbo].[aspnet_Paths] ([PathId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_PersonalizationPerUser]...';


GO
ALTER TABLE [dbo].[aspnet_PersonalizationPerUser] WITH NOCHECK
    ADD FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Profile]...';


GO
ALTER TABLE [dbo].[aspnet_Profile] WITH NOCHECK
    ADD FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Roles]...';


GO
ALTER TABLE [dbo].[aspnet_Roles] WITH NOCHECK
    ADD FOREIGN KEY ([ApplicationId]) REFERENCES [dbo].[aspnet_Applications] ([ApplicationId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Users]...';


GO
ALTER TABLE [dbo].[aspnet_Users] WITH NOCHECK
    ADD FOREIGN KEY ([ApplicationId]) REFERENCES [dbo].[aspnet_Applications] ([ApplicationId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_UsersInRoles]...';


GO
ALTER TABLE [dbo].[aspnet_UsersInRoles] WITH NOCHECK
    ADD FOREIGN KEY ([RoleId]) REFERENCES [dbo].[aspnet_Roles] ([RoleId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_UsersInRoles]...';


GO
ALTER TABLE [dbo].[aspnet_UsersInRoles] WITH NOCHECK
    ADD FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_DataSchema_DataSourceType]...';


GO
ALTER TABLE [dbo].[DataSchema] WITH NOCHECK
    ADD CONSTRAINT [FK_DataSchema_DataSourceType] FOREIGN KEY ([DataSourceTypeID]) REFERENCES [dbo].[DataSourceType] ([ID]);


GO
PRINT N'Creating [dbo].[FK_DataSourceRole_aspnet_Roles]...';


GO
ALTER TABLE [dbo].[DataSourceRole] WITH NOCHECK
    ADD CONSTRAINT [FK_DataSourceRole_aspnet_Roles] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[aspnet_Roles] ([RoleId]);


GO
PRINT N'Creating [dbo].[FK_DataSourceRole_aspnet_Users]...';


GO
ALTER TABLE [dbo].[DataSourceRole] WITH NOCHECK
    ADD CONSTRAINT [FK_DataSourceRole_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_DataSourceRole_DataSource]...';


GO
ALTER TABLE [dbo].[DataSourceRole] WITH NOCHECK
    ADD CONSTRAINT [FK_DataSourceRole_DataSource] FOREIGN KEY ([DataSourceID]) REFERENCES [dbo].[DataSource] ([ID]);


GO
PRINT N'Creating [dbo].[FK_DataSourceTransformation_aspnet_Users]...';


GO
ALTER TABLE [dbo].[DataSourceTransformation] WITH NOCHECK
    ADD CONSTRAINT [FK_DataSourceTransformation_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_DataSourceTransformation_DataSource]...';


GO
ALTER TABLE [dbo].[DataSourceTransformation] WITH NOCHECK
    ADD CONSTRAINT [FK_DataSourceTransformation_DataSource] FOREIGN KEY ([DataSourceID]) REFERENCES [dbo].[DataSource] ([ID]);


GO
PRINT N'Creating [dbo].[FK_DataSourceTransformation_Phenomenon]...';


GO
ALTER TABLE [dbo].[DataSourceTransformation] WITH NOCHECK
    ADD CONSTRAINT [FK_DataSourceTransformation_Phenomenon] FOREIGN KEY ([PhenomenonID]) REFERENCES [dbo].[Phenomenon] ([ID]);


GO
PRINT N'Creating [dbo].[FK_DataSourceTransformation_PhenomenonOffering]...';


GO
ALTER TABLE [dbo].[DataSourceTransformation] WITH NOCHECK
    ADD CONSTRAINT [FK_DataSourceTransformation_PhenomenonOffering] FOREIGN KEY ([PhenomenonOfferingID]) REFERENCES [dbo].[PhenomenonOffering] ([ID]);


GO
PRINT N'Creating [dbo].[FK_DataSourceTransformation_PhenomenonUOM]...';


GO
ALTER TABLE [dbo].[DataSourceTransformation] WITH NOCHECK
    ADD CONSTRAINT [FK_DataSourceTransformation_PhenomenonUOM] FOREIGN KEY ([PhenomenonUOMID]) REFERENCES [dbo].[PhenomenonUOM] ([ID]);


GO
PRINT N'Creating [dbo].[FK_DataSourceTransformation_Sensor]...';


GO
ALTER TABLE [dbo].[DataSourceTransformation] WITH NOCHECK
    ADD CONSTRAINT [FK_DataSourceTransformation_Sensor] FOREIGN KEY ([SensorID]) REFERENCES [dbo].[Sensor] ([ID]);


GO
PRINT N'Creating [dbo].[FK_DataSourceTransformation_TransformationType]...';


GO
ALTER TABLE [dbo].[DataSourceTransformation] WITH NOCHECK
    ADD CONSTRAINT [FK_DataSourceTransformation_TransformationType] FOREIGN KEY ([TransformationTypeID]) REFERENCES [dbo].[TransformationType] ([ID]);


GO
PRINT N'Creating [dbo].[FK_DataSourceType_aspnet_Users]...';


GO
ALTER TABLE [dbo].[DataSourceType] WITH NOCHECK
    ADD CONSTRAINT [FK_DataSourceType_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_Module_Module]...';


GO
ALTER TABLE [dbo].[Module] WITH NOCHECK
    ADD CONSTRAINT [FK_Module_Module] FOREIGN KEY ([ModuleID]) REFERENCES [dbo].[Module] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Offering_aspnet_Users]...';


GO
ALTER TABLE [dbo].[Offering] WITH NOCHECK
    ADD CONSTRAINT [FK_Offering_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_Phenomenon_aspnet_Users]...';


GO
ALTER TABLE [dbo].[Phenomenon] WITH NOCHECK
    ADD CONSTRAINT [FK_Phenomenon_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_PhenomenonOffering_aspnet_Users]...';


GO
ALTER TABLE [dbo].[PhenomenonOffering] WITH NOCHECK
    ADD CONSTRAINT [FK_PhenomenonOffering_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_PhenomenonOffering_Offering]...';


GO
ALTER TABLE [dbo].[PhenomenonOffering] WITH NOCHECK
    ADD CONSTRAINT [FK_PhenomenonOffering_Offering] FOREIGN KEY ([OfferingID]) REFERENCES [dbo].[Offering] ([ID]);


GO
PRINT N'Creating [dbo].[FK_PhenomenonOffering_Phenomenon]...';


GO
ALTER TABLE [dbo].[PhenomenonOffering] WITH NOCHECK
    ADD CONSTRAINT [FK_PhenomenonOffering_Phenomenon] FOREIGN KEY ([PhenomenonID]) REFERENCES [dbo].[Phenomenon] ([ID]);


GO
PRINT N'Creating [dbo].[FK_PhenomenonUOM_aspnet_Users]...';


GO
ALTER TABLE [dbo].[PhenomenonUOM] WITH NOCHECK
    ADD CONSTRAINT [FK_PhenomenonUOM_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_PhenomenonUOM_PhenomenonUOM]...';


GO
ALTER TABLE [dbo].[PhenomenonUOM] WITH NOCHECK
    ADD CONSTRAINT [FK_PhenomenonUOM_PhenomenonUOM] FOREIGN KEY ([PhenomenonID]) REFERENCES [dbo].[Phenomenon] ([ID]);


GO
PRINT N'Creating [dbo].[FK_PhenomenonUOM_UnitOfMeasure]...';


GO
ALTER TABLE [dbo].[PhenomenonUOM] WITH NOCHECK
    ADD CONSTRAINT [FK_PhenomenonUOM_UnitOfMeasure] FOREIGN KEY ([UnitOfMeasureID]) REFERENCES [dbo].[UnitOfMeasure] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Progress_aspnet_Users]...';


GO
ALTER TABLE [dbo].[Progress] WITH NOCHECK
    ADD CONSTRAINT [FK_Progress_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_Progress_ImportBatch]...';


GO
ALTER TABLE [dbo].[Progress] WITH NOCHECK
    ADD CONSTRAINT [FK_Progress_ImportBatch] FOREIGN KEY ([ImportBatchID]) REFERENCES [dbo].[ImportBatch] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Progress_PhenomenonOffering]...';


GO
ALTER TABLE [dbo].[Progress] WITH NOCHECK
    ADD CONSTRAINT [FK_Progress_PhenomenonOffering] FOREIGN KEY ([PhenomenonOfferingID]) REFERENCES [dbo].[PhenomenonOffering] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Progress_Sensor]...';


GO
ALTER TABLE [dbo].[Progress] WITH NOCHECK
    ADD CONSTRAINT [FK_Progress_Sensor] FOREIGN KEY ([SensorID]) REFERENCES [dbo].[Sensor] ([ID]);


GO
PRINT N'Creating [dbo].[FK_ProjectSite_aspnet_Users]...';


GO
ALTER TABLE [dbo].[ProjectSite] WITH NOCHECK
    ADD CONSTRAINT [FK_ProjectSite_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_ProjectSite_Organisation]...';


GO
ALTER TABLE [dbo].[ProjectSite] WITH NOCHECK
    ADD CONSTRAINT [FK_ProjectSite_Organisation] FOREIGN KEY ([OrganisationID]) REFERENCES [dbo].[Organisation] ([ID]);


GO
PRINT N'Creating [dbo].[FK_RoleModule_aspnet_Roles]...';


GO
ALTER TABLE [dbo].[RoleModule] WITH NOCHECK
    ADD CONSTRAINT [FK_RoleModule_aspnet_Roles] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[aspnet_Roles] ([RoleId]);


GO
PRINT N'Creating [dbo].[FK_RoleModule_Module]...';


GO
ALTER TABLE [dbo].[RoleModule] WITH NOCHECK
    ADD CONSTRAINT [FK_RoleModule_Module] FOREIGN KEY ([ModuleID]) REFERENCES [dbo].[Module] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Station_aspnet_Users]...';


GO
ALTER TABLE [dbo].[Station] WITH NOCHECK
    ADD CONSTRAINT [FK_Station_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_Station_ProjectSite]...';


GO
ALTER TABLE [dbo].[Station] WITH NOCHECK
    ADD CONSTRAINT [FK_Station_ProjectSite] FOREIGN KEY ([ProjectSiteID]) REFERENCES [dbo].[ProjectSite] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Station_Site]...';


GO
ALTER TABLE [dbo].[Station] WITH NOCHECK
    ADD CONSTRAINT [FK_Station_Site] FOREIGN KEY ([SiteID]) REFERENCES [dbo].[Site] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Status_aspnet_Users]...';


GO
ALTER TABLE [dbo].[Status] WITH NOCHECK
    ADD CONSTRAINT [FK_Status_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_TransformationType_aspnet_Users]...';


GO
ALTER TABLE [dbo].[TransformationType] WITH NOCHECK
    ADD CONSTRAINT [FK_TransformationType_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_UnitOfMeasure_aspnet_Users]...';


GO
ALTER TABLE [dbo].[UnitOfMeasure] WITH NOCHECK
    ADD CONSTRAINT [FK_UnitOfMeasure_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[TR_DataSource_Insert]...';


GO
CREATE TRIGGER [dbo].[TR_DataSource_Insert] ON [dbo].[DataSource]
FOR INSERT
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = GETDATE(),
        UpdatedAt = NULL
    from
        inserted ins
        inner join DataSource src
            on (ins.ID = src.ID)
END
GO
PRINT N'Creating [dbo].[TR_DataSource_Update]...';


GO
CREATE TRIGGER [dbo].[TR_DataSource_Update] ON [dbo].[DataSource]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    --if UPDATE(AddedAt) RAISERROR ('Cannot update AddedAt.', 16, 1)
    Update
        src
    set
        UpdatedAt = GETDATE()
    from
        inserted ins
        inner join DataSource src
            on (ins.ID = src.ID)
END
--< Added 2.0.0.3 20160421 TimPN
GO
PRINT N'Creating [dbo].[TR_Organisation_Insert]...';


GO
CREATE TRIGGER [dbo].[TR_Organisation_Insert] ON [dbo].[Organisation]
FOR INSERT
AS
BEGIN
    SET NoCount ON
    Update 
        src 
    set 
        AddedAt = GETDATE(),
        UpdatedAt = NULL
    from
        inserted ins 
        inner join Organisation src
            on (ins.ID = src.ID)
END
GO
PRINT N'Creating [dbo].[TR_Organisation_Update]...';


GO
CREATE TRIGGER [dbo].[TR_Organisation_Update] ON [dbo].[Organisation]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    --if UPDATE(AddedAt) RAISERROR ('Cannot update AddedAt.', 16, 1)
    Update 
        src 
    set 
        UpdatedAt = GETDATE()
    from
        inserted ins 
        inner join Organisation src
            on (ins.ID = src.ID)
END
--< Added 2.0.0.4 20160508 TimPN
GO
PRINT N'Creating [dbo].[TR_AuditLog_Insert]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TRIGGER [dbo].[TR_AuditLog_Insert] ON [dbo].[AuditLog]
FOR INSERT
AS
BEGIN
    SET NoCount ON
    Update 
        src 
    set 
        AddedAt = GETDATE(),
        UpdatedAt = NULL
    from
        inserted ins 
        inner join AuditLog src
            on (ins.ID = src.ID)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[TR_AuditLog_Update]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TRIGGER [dbo].[TR_AuditLog_Update] ON [dbo].[AuditLog]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    if UPDATE(AddedAt) RAISERROR ('Cannot update AddedAt.', 16, 1)
    if UPDATE(UpdatedAt) RAISERROR ('Cannot update UpdatedAt.', 16, 1)
    if not UPDATE(AddedAt) and not UPDATE(UpdatedAt)
        Update 
            src 
        set 
            UpdatedAt = GETDATE()
        from
            inserted ins 
            inner join AuditLog src
                on (ins.ID = src.ID)
END
--< Added 2.0.0.3 20160421 TimPN
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[TR_Instrument_Insert]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TRIGGER [dbo].[TR_Instrument_Insert] ON [dbo].[Instrument]
FOR INSERT
AS
BEGIN
    SET NoCount ON
    Update 
        src 
    set 
        AddedAt = GETDATE(),
        UpdatedAt = NULL
    from
        inserted ins 
        inner join Instrument src
            on (ins.ID = src.ID)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[TR_Instrument_Update]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TRIGGER [dbo].[TR_Instrument_Update] ON [dbo].[Instrument]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    --if UPDATE(AddedAt) RAISERROR ('Cannot update AddedAt.', 16, 1)
    Update 
        src 
    set 
        UpdatedAt = GETDATE()
    from
        inserted ins 
        inner join Instrument src
            on (ins.ID = src.ID)
END
--< Added 2.0.0.4 20160508 TimPN
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[TR_Instrument_Organisation_Insert]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TRIGGER [dbo].[TR_Instrument_Organisation_Insert] ON [dbo].[Instrument_Organisation]
FOR INSERT
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = GETDATE(),
        UpdatedAt = NULL
    from
        inserted ins
        inner join Instrument_Organisation src
            on (ins.ID = src.ID)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[TR_Instrument_Organisation_Update]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TRIGGER [dbo].[TR_Instrument_Organisation_Update] ON [dbo].[Instrument_Organisation]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    --if UPDATE(AddedAt) RAISERROR ('Cannot update AddedAt.', 16, 1)
    Update
        src
    set
        UpdatedAt = GETDATE()
    from
        inserted ins
        inner join Instrument_Organisation src
            on (ins.ID = src.ID)
END
--< Added 2.0.0.4 20160508 TimPN
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[TR_Site_Insert]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TRIGGER [dbo].[TR_Site_Insert] ON [dbo].[Site]
FOR INSERT
AS
BEGIN
    SET NoCount ON
    Update 
        src 
    set 
        AddedAt = GETDATE(),
        UpdatedAt = NULL
    from
        inserted ins 
        inner join Site src
            on (ins.ID = src.ID)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[TR_Site_Update]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TRIGGER [dbo].[TR_Site_Update] ON [dbo].[Site]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    --if UPDATE(AddedAt) RAISERROR ('Cannot update AddedAt.', 16, 1)
    Update 
        src 
    set 
        UpdatedAt = GETDATE()
    from
        inserted ins 
        inner join Site src
            on (ins.ID = src.ID)
END
--< Added 2.0.0.3 20160421 TimPN
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[TR_Site_Organisation_Insert]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TRIGGER [dbo].[TR_Site_Organisation_Insert] ON [dbo].[Site_Organisation]
FOR INSERT
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = GETDATE(),
        UpdatedAt = NULL
    from
        inserted ins
        inner join Site_Organisation src
            on (ins.ID = src.ID)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[TR_Site_Organisation_Update]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TRIGGER [dbo].[TR_Site_Organisation_Update] ON [dbo].[Site_Organisation]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    --if UPDATE(AddedAt) RAISERROR ('Cannot update AddedAt.', 16, 1)
    Update
        src
    set
        UpdatedAt = GETDATE()
    from
        inserted ins
        inner join Site_Organisation src
            on (ins.ID = src.ID)
END
--< Added 2.0.0.3 20160426 TimPN
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[TR_Station_Organisation_Insert]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TRIGGER [dbo].[TR_Station_Organisation_Insert] ON [dbo].[Station_Organisation]
FOR INSERT
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = GETDATE(),
        UpdatedAt = NULL
    from
        inserted ins
        inner join Station_Organisation src
            on (ins.ID = src.ID)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[TR_Station_Organisation_Update]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TRIGGER [dbo].[TR_Station_Organisation_Update] ON [dbo].[Station_Organisation]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    --if UPDATE(AddedAt) RAISERROR ('Cannot update AddedAt.', 16, 1)
    Update
        src
    set
        UpdatedAt = GETDATE()
    from
        inserted ins
        inner join Station_Organisation src
            on (ins.ID = src.ID)
END
--< Added 2.0.0.3 20160426 TimPN
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[TR_Station_Insert]...';


GO
CREATE TRIGGER [dbo].[TR_Station_Insert] ON [dbo].[Station]
FOR INSERT
AS
BEGIN
    SET NoCount ON
    Update
        src
    set
        AddedAt = GETDATE(),
        UpdatedAt = NULL
    from
        inserted ins
        inner join Station src
            on (ins.ID = src.ID)
END
GO
PRINT N'Creating [dbo].[TR_Station_Update]...';


GO
CREATE TRIGGER [dbo].[TR_Station_Update] ON [dbo].[Station]
FOR UPDATE
AS
BEGIN
    SET NoCount ON
    --if UPDATE(AddedAt) RAISERROR ('Cannot update AddedAt.', 16, 1)
    Update
        src
    set
        UpdatedAt = GETDATE()
    from
        inserted ins
        inner join Station src
            on (ins.ID = src.ID)
END
--< Added 2.0.0.3 20160421 TimPN
GO
PRINT N'Creating [dbo].[progress_Progress_Resolved]...';


GO
--> Changed 2.0.0.3 20160503 TimPN
--Renamed SensorProcedure to Sensor
--< Changed 2.0.0.3 20160503 TimPN
CREATE VIEW dbo.progress_Progress_Resolved
AS
SELECT     dbo.ImportBatch.ImportDate, dbo.ImportBatch.FileName, dbo.Progress.StartDate, dbo.Progress.EndDate, dbo.Progress.Observations, dbo.Progress.DateUploaded, 
                      dbo.aspnet_Users.UserName, dbo.Sensor.Name AS Sensor, dbo.Sensor.StationID, dbo.Station.Name AS Station
FROM         dbo.Sensor FULL OUTER JOIN
                      dbo.Station ON dbo.Sensor.StationID = dbo.Station.ID FULL OUTER JOIN
                      dbo.Progress LEFT OUTER JOIN
                      dbo.aspnet_Users ON dbo.Progress.UserId = dbo.aspnet_Users.UserId LEFT OUTER JOIN
                      dbo.ImportBatch ON dbo.Progress.ImportBatchID = dbo.ImportBatch.ID ON dbo.Sensor.ID = dbo.Progress.SensorID
GO
PRINT N'Creating [dbo].[vAuditLog]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE VIEW [dbo].[vAuditLog]
AS
Select
  a.*, u.UserName
from
  AuditLog a
  inner join aspnet_Users u
    on (a.UserId = u.UserId)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vDataLog]...';


GO
--> Changed 2.0.0.3 20160503 TimPN
--Renamed SensorProcedure to Sensor
--< Changed 2.0.0.3 20160503 TimPN
CREATE VIEW [dbo].[vDataLog]
AS

SELECT 
d.ID, 
d.ImportDate,

org.Name Organisation,
ps.[Description] ProjectSite,
st.Name StationName,
d.SensorID,
sp.Name SensorName,
CASE 
    WHEN d.SensorID is null then 1
    ELSE 0
END SensorInvalid,

d.ValueDate,
d.InvalidDateValue, 
CASE 
    WHEN ValueDate is null then 1
    ELSE 0
END DateValueInvalid,

d.InvalidTimeValue, 
CASE 
    WHEN InvalidTimeValue is not null then 1
    ELSE 0
END TimeValueInvalid,

CASE 
    WHEN InvalidDateValue is null AND InvalidTimeValue IS NULL Then ValueDate
    WHEN ValueTime is not null then ValueTime 
END ValueTime,


d.RawValue,
d.ValueText,
CASE
    WHEN d.RawValue is null then 1
    ELSE 0
END RawValueInvalid,	

d.DataValue,
d.TransformValueText, 
CASE
    WHEN d.DataValue is null then 1
    ELSE 0
END DataValueInvalid,

d.PhenomenonOfferingID, 
CASE
    WHEN d.PhenomenonOfferingID is null then 1
    ELSE 0
END OfferingInvalid,

--> Changed 2.0.0.3 20160421 TimPN
--d.PhenonmenonUOMID, 
d.PhenomenonUOMID, 
--< Changed 2.0.0.3 20160421 TimPN
CASE
--> Changed 2.0.0.3 20160421 TimPN
--    WHEN d.PhenonmenonUOMID is null then 1
    WHEN d.PhenomenonUOMID is null then 1
--< Changed 2.0.0.3 20160421 TimPN
    ELSE 0
END UOMInvalid,

p.Name PhenomenonName,
o.Name OfferingName,
uom.Unit,

d.DataSourceTransformationID,
tt.Name Transformation,
d.StatusID,
s.Name [Status],
d.ImportBatchID,
d.RawFieldValue,
d.Comment

FROM DataLog d
LEFT JOIN Sensor sp
    on d.SensorID = sp.ID
LEFT JOIN Station st
    on sp.StationID = st.ID
LEFT JOIN ProjectSite ps
    on st.ProjectSiteID = ps.ID
LEFT JOIN Organisation org
    on ps.OrganisationID = org.ID
LEFT JOIN PhenomenonOffering po
 ON d.PhenomenonOfferingID = po.ID
LEFT JOIN Phenomenon p
    on po.PhenomenonID = p.ID
LEFT JOIN Offering o
    on po.OfferingID = o.ID
LEFT JOIN PhenomenonUOM pu
--> Changed 2.0.0.3 20160421 TimPN
--    on d.PhenonmenonUOMID = pu.ID
    on d.PhenomenonUOMID = pu.ID
--< Changed 2.0.0.3 20160421 TimPN
LEFT JOIN UnitOfMeasure uom
    on pu.UnitOfMeasureID = uom.ID
LEFT JOIN DataSourceTransformation ds
    on d.DataSourceTransformationID = ds.ID
LEFT JOIN TransformationType tt
    on ds.TransformationTypeID = tt.ID
INNER JOIN [Status] s
    on d.StatusID = s.ID
GO
PRINT N'Creating [dbo].[vDataQuery]...';


GO
--> Changed 2.0.0.3 20160503 TimPN
--Renamed SensorProcedure to Sensor
--< Changed 2.0.0.3 20160503 TimPN
CREATE VIEW [dbo].[vDataQuery]
AS
SELECT     TOP (100) PERCENT NEWID() AS ID, dbo.Organisation.ID AS OrganisationID, dbo.Organisation.Name AS Organisation, 
                      dbo.Organisation.Description AS OrganisationDesc, dbo.ProjectSite.ID AS ProjectSiteID, dbo.ProjectSite.Name AS ProjectSite, 
                      dbo.ProjectSite.Description AS ProjectSiteDesc, dbo.Station.ID AS StationID, dbo.Station.Name AS Station, dbo.Station.Description AS StationDesc, 
                      dbo.Sensor.ID AS SensorID, dbo.Sensor.Name AS Sensor, dbo.Sensor.Description AS SensorDesc, 
                      dbo.Phenomenon.ID AS PhenomenonID, dbo.Phenomenon.Name AS Phenomenon, dbo.Phenomenon.Description AS PhenomenonDesc, dbo.Offering.ID AS OfferingID, 
                      dbo.Offering.Name AS Offering, dbo.Offering.Description AS OfferingDesc
FROM         dbo.Station INNER JOIN
                      dbo.Sensor ON dbo.Sensor.StationID = dbo.Station.ID INNER JOIN
                      dbo.Phenomenon ON dbo.Phenomenon.ID = dbo.Sensor.PhenomenonID INNER JOIN
                      dbo.PhenomenonOffering ON dbo.PhenomenonOffering.PhenomenonID = dbo.Phenomenon.ID INNER JOIN
                      dbo.Offering ON dbo.Offering.ID = dbo.PhenomenonOffering.OfferingID INNER JOIN
                      dbo.ProjectSite ON dbo.ProjectSite.ID = dbo.Station.ProjectSiteID INNER JOIN
                      dbo.Organisation ON dbo.Organisation.ID = dbo.ProjectSite.OrganisationID
ORDER BY Organisation, ProjectSite, Station, Sensor, Phenomenon, Offering
GO
PRINT N'Creating [dbo].[vDataSchema]...';


GO
CREATE VIEW [dbo].[vDataSchema]
AS 

Select d.ID,
d.Code,
d.Name,
d.[Description],
d.UserId,
d.DataSourceTypeID,
d.IgnoreFirst,
d.IgnoreLast,
d.Delimiter,
d.Condition,
d.SplitSelector,
d.SplitIndex,
t.Code AS DataSourceTypeCode,
t.[Description] as DataSourceTypeDesc

FROM DataSchema d
	INNER JOIN DataSourceType t
ON d.DataSourceTypeID = t.ID
GO
PRINT N'Creating [dbo].[vDataSource]...';


GO
CREATE View [dbo].[vDataSource]
AS
Select 
  d.*,
  t.[Name] DataSchemaName
from 
  DataSource d
  LEFT JOIN DataSchema t  -- Must be inner join once all datasources have stations
    ON d.DataSchemaID = t.ID
GO
PRINT N'Creating [dbo].[vDataSourceTransformation]...';


GO
CREATE VIEW [dbo].[vDataSourceTransformation]
AS
Select dt.ID,
       dt.TransformationTypeID,
       dt.PhenomenonID,
       dt.StartDate,
       dt.EndDate,
       dt.DataSourceID,
       dt.[Definition],
       p.Name as PhenomenonName,
       tt.Name as TransformationName,
       po.ID as PhenomenonOfferingId,
       o.Name as OfferingName,
       pu.ID as UnitOfMeasureId,
       uom.Unit as UnitofMeasure,
       dt.NewPhenomenonOfferingID,
       dt.NewPhenomenonUOMID,
       tt.iorder,
       dt.Rank
       
From DataSourceTransformation dt
 INNER JOIN DataSource ds
    on dt.DataSourceID = ds.ID
 INNER JOIN TransformationType tt
    on dt.TransformationTypeID = tt.ID
 INNER JOIN Phenomenon p
    on dt.PhenomenonID = p.ID
 LEFT JOIN PhenomenonOffering po
    on dt.PhenomenonOfferingID = po.ID
 LEFT JOIN Offering o
    on po.OfferingID = o.ID
 LEFT JOIN PhenomenonUOM pu
    on dt.PhenomenonUOMID = pu.ID
 LEFT JOIN UnitOfMeasure uom
    on pu.UnitOfMeasureID = uom.ID
GO
PRINT N'Creating [dbo].[vImportBatch]...';


GO
CREATE VIEW [dbo].[vImportBatch]
AS

SELECT 
b.ID,
b.DataSourceID,
b.ImportDate, 
b.[Status],
d.Name DataSourceName,
b.UserId,
u.UserName,
CASE b.[Status]
	WHEN 0 THEN 'Errors in Datalog'
	WHEN 1 THEN 'No Errors in Log'
	WHEN 2 THEN 'Moved to Datalog'
END StatusDescription,
b.[FileName],
b.LogFileName

FROM ImportBatch b
INNER JOIN DataSource d
	on b.DataSourceID = d.ID
INNER JOIN aspnet_Users u
  on b.UserId = u.UserId
GO
PRINT N'Creating [dbo].[vInstrumentOrganisation]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE VIEW [dbo].[vInstrumentOrganisation] AS 
SELECT 
  so.*, o.Name OrganisationName, r.Name [OrganisationRoleName]
FROM 
  [Instrument_Organisation] so
  inner join [Organisation] o
    on (so.OrganisationID = o.ID)
  inner join [OrganisationRole] r
    on (so.OrganisationRoleID = r.ID)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vInventory]...';


GO
--> Changed 2.0.0.3 20160503 TimPN
--Renamed SensorProcedure to Sensor
--< Changed 2.0.0.3 20160503 TimPN
CREATE VIEW [dbo].[vInventory]
AS
Select 
 ps.Name Site,
 s.Name Station,
 sp.Name Sensor,
 p.Name Phenomenon,
 d.StartDate,
 d.EndDate
FROM Station s with (nolock)
 INNER Join ProjectSite ps with (nolock)
 on  ps.ID=  s.ProjectSiteID
INNER Join Sensor sp with (nolock)
 on s.ID = sp.StationID
INNER Join Phenomenon p with (nolock)
 on  sp.PhenomenonID = p.ID 

INNER JOIN 
(
 SELECT SensorID,MIN(ValueDate) StartDate,MAX(ValueDate) EndDate
  FROM Observation with (nolock)
 Group By SensorID
)d
ON sp.ID = d.SensorID
GO
PRINT N'Creating [dbo].[vModuleRoleModule]...';


GO
CREATE VIEW dbo.vModuleRoleModule
AS
SELECT     TOP (100) PERCENT dbo.RoleModule.ID, dbo.RoleModule.RoleId, dbo.RoleModule.ModuleID, dbo.Module.Name, dbo.Module.Description, dbo.Module.Url, 
                      dbo.Module.Icon, dbo.Module.ModuleID AS BaseModuleID
FROM         dbo.RoleModule INNER JOIN
                      dbo.Module ON dbo.RoleModule.ModuleID = dbo.Module.ID
ORDER BY dbo.RoleModule.RoleId
GO
PRINT N'Creating [dbo].[vObservation]...';


GO
--> Changed 2.0.0.3 20160503 TimPN
--Renamed SensorProcedure to Sensor
--< Changed 2.0.0.3 20160503 TimPN
CREATE VIEW [dbo].[vObservation]
AS
--> Changed 2.0.0.3 20160421 TimPN
--SELECT     o.ID, o.SensorID, o.PhenonmenonOfferingID, o.PhenonmenonUOMID, o.UserId, o.RawValue, o.DataValue, o.ImportBatchID, o.ValueDate, 
SELECT     o.ID, o.SensorID, o.PhenomenonOfferingID, o.PhenomenonUOMID, o.UserId, o.RawValue, o.DataValue, o.ImportBatchID, o.ValueDate, 
--< Changed 2.0.0.3 20160421 TimPN
                      sp.Code AS spCode, sp.Description AS spDesc, sp.Name AS spName, sp.Url AS spURL, sp.DataSchemaID, sp.DataSourceID, sp.PhenomenonID, sp.StationID, 
                      ph.Name AS phName, st.Name AS stName, ds.Name AS dsName, ISNULL(dschema.Name,dschema1.Name) AS dschemaName, offer.Name AS offName, offer.ID AS offID, ps.Name AS psName, 
                      ps.ID AS psID, org.Name AS orgName, org.ID AS orgID, uom.Unit AS uomUnit, uom.UnitSymbol AS uomSymbol, users.UserName,
                      o.Comment
FROM         dbo.Observation AS o INNER JOIN
                      dbo.Sensor AS sp ON sp.ID = o.SensorID INNER JOIN
                      dbo.Phenomenon AS ph ON ph.ID = sp.PhenomenonID INNER JOIN
--> Changed 2.0.0.3 20160421 TimPN
--                      dbo.PhenomenonOffering AS phOff ON phOff.ID = o.PhenonmenonOfferingID INNER JOIN  
                      dbo.PhenomenonOffering AS phOff ON phOff.ID = o.PhenomenonOfferingID INNER JOIN  
--< Changed 2.0.0.3 20160421 TimPN
                      dbo.Offering AS offer ON offer.ID = phOff.OfferingID INNER JOIN
--> Changed 2.0.0.3 20160421 TimPN
--                      dbo.PhenomenonUOM AS puom ON puom.ID = o.PhenonmenonUOMID INNER JOIN
                      dbo.PhenomenonUOM AS puom ON puom.ID = o.PhenomenonUOMID INNER JOIN
--< Changed 2.0.0.3 20160421 TimPN
                      dbo.Station AS st ON st.ID = sp.StationID INNER JOIN
                      dbo.DataSource AS ds ON ds.ID = sp.DataSourceID LEFT JOIN
                      dbo.DataSchema AS dschema1 ON dschema1.ID = ds.DataSchemaID LEFT JOIN
                      dbo.DataSchema AS dschema ON dschema.ID = sp.DataSchemaID INNER JOIN                   
                      dbo.ProjectSite AS ps ON ps.ID = st.ProjectSiteID INNER JOIN
                      dbo.Organisation AS org ON org.ID = ps.OrganisationID INNER JOIN
                      dbo.UnitOfMeasure AS uom ON uom.ID = puom.UnitOfMeasureID INNER JOIN
                      dbo.aspnet_Users AS users ON users.UserId = o.UserId
GO
PRINT N'Creating [dbo].[vObservationRoles]...';


GO
--> Changed 2.0.0.3 20160503 TimPN
--Renamed SensorProcedure to Sensor
--< Changed 2.0.0.3 20160503 TimPN
CREATE VIEW [dbo].[vObservationRoles]
AS
--> Changed 2.0.0.3 20160421 TimPN
--SELECT     vo.ID, vo.SensorID, vo.PhenonmenonOfferingID, vo.PhenonmenonUOMID, vo.UserId, vo.RawValue, vo.DataValue, vo.ImportBatchID, vo.ValueDate, 
SELECT     vo.ID, vo.SensorID, vo.PhenomenonOfferingID, vo.PhenomenonUOMID, vo.UserId, vo.RawValue, vo.DataValue, vo.ImportBatchID, vo.ValueDate, 
--> Changed 2.0.0.3 20160421 TimPN
                      vo.spCode, vo.spDesc, vo.spName, vo.spURL, vo.DataSchemaID, vo.DataSourceID, vo.PhenomenonID, vo.StationID, vo.phName, vo.stName, vo.dsName, 
                      vo.dschemaName, vo.offName, vo.offID, vo.psName, vo.psID, vo.orgName, vo.orgID, vo.uomUnit, vo.uomSymbol, vo.UserName,
                      dr.DataSourceID AS Expr2, dr.DateStart, dr.DateEnd,
                      ur.UserId AS Expr5, vo.Comment
FROM         dbo.vObservation AS vo 
INNER JOIN 
(
 SELECT dr.DataSourceID,
        ur.UserId,
        MIN(dr.DateStart) DateStart,
        MAX(dr.DateEnd) DateEnd
 FROM DataSourceRole dr
 INNER JOIN    dbo.aspnet_Roles AS ar ON dr.RoleId = ar.RoleId INNER JOIN
               dbo.aspnet_UsersInRoles AS ur ON ar.RoleId = ur.RoleId
 GROUP By dr.DataSourceID,ur.UserId
) dr
ON vo.DataSourceID = dr.DataSourceID 
AND vo.ValueDate >= dr.DateStart AND vo.ValueDate <= dr.DateEnd
INNER JOIN aspnet_Users ur
 ON dr.UserId = ur.UserId
GO
PRINT N'Creating [dbo].[vProjectSite]...';


GO
CREATE VIEW [dbo].[vProjectSite]
AS

SELECT p.*,o.Code + ' - ' + o.Name as OrganisationName FROM ProjectSite p
 INNER JOIN Organisation o
	on p.OrganisationID = o.ID
GO
PRINT N'Creating [dbo].[vSensor]...';


GO
--> Changed 2.0.0.3 20160503 TimPN
--Renamed SensorProcedure to Sensor
--< Changed 2.0.0.3 20160503 TimPN
CREATE VIEW [dbo].[vSensor]
AS

SELECT 
s.ID,
s.Code,
s.Name,
s.[Description],
s.Url,
s.StationID,
s.DataSourceID,
s.PhenomenonID,
s.UserId,
st.Name AS StationName,
d.Name AS DataSourceName,
ds.[Description] DataSchemaName,
--> Added 2.0.0.4 20160508 TimPN
i.Name as InstrumentName
--< Added 2.0.0.4 20160508 TimPN
FROM Sensor s
INNER JOIN DataSource d
	on s.DataSourceID = d.ID
INNER JOIN Station st
	on s.StationID = st.ID
LEFT JOIN DataSchema ds
	on s.DataSchemaID = ds.ID
--> Added 2.0.0.4 20160508 TimPN
LEFT Join Instrument i
  on (s.InstrumentID = i.ID)
--< Added 2.0.0.4 20160508 TimPN
GO
PRINT N'Creating [dbo].[vSiteOrganisation]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE VIEW [dbo].[vSiteOrganisation] AS 
SELECT 
  so.*, o.Name OrganisationName, r.Name [OrganisationRoleName]
FROM 
  [Site_Organisation] so
  inner join [Organisation] o
    on (so.OrganisationID = o.ID)
  inner join [OrganisationRole] r
    on (so.OrganisationRoleID = r.ID)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vStation]...';


GO
CREATE VIEW [dbo].[vStation]
AS
SELECT 
  Station.*,
  p.Code + ' - ' + p.Name ProjectSiteName,
  s.Code + ' - ' + s.Name SiteName
FROM 
  Station
  LEFT JOIN ProjectSite p -- Must be removed once all stations have sites
    on (Station.ProjectSiteID = p.ID)
  LEFT JOIN [Site] s -- Must be inner join once all stations have sites
    on (Station.SiteID = s.ID)
GO
PRINT N'Creating [dbo].[vStationOrganisation]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE VIEW [dbo].[vStationOrganisation] AS 
SELECT 
  so.*, o.Name OrganisationName, r.Name [OrganisationRoleName]
FROM 
  [Station_Organisation] so
  inner join [Organisation] o
    on (so.OrganisationID = o.ID)
  inner join [OrganisationRole] r
    on (so.OrganisationRoleID = r.ID)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vUserInfo]...';


GO

CREATE VIEW [dbo].[vUserInfo]
AS
SELECT     dbo.aspnet_Users.UserId, dbo.aspnet_Users.LastActivityDate, dbo.aspnet_Users.UserName, dbo.aspnet_Membership.CreateDate, dbo.aspnet_Membership.Email, 
                      dbo.aspnet_Membership.Comment
FROM         dbo.aspnet_Users INNER JOIN
                      dbo.aspnet_Membership ON dbo.aspnet_Users.UserId = dbo.aspnet_Membership.UserId
GO
PRINT N'Creating [dbo].[vw_aspnet_Applications]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
  CREATE VIEW [dbo].[vw_aspnet_Applications]
  AS SELECT [dbo].[aspnet_Applications].[ApplicationName], [dbo].[aspnet_Applications].[LoweredApplicationName], [dbo].[aspnet_Applications].[ApplicationId], [dbo].[aspnet_Applications].[Description]
  FROM [dbo].[aspnet_Applications]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vw_aspnet_MembershipUsers]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
  CREATE VIEW [dbo].[vw_aspnet_MembershipUsers]
  AS SELECT [dbo].[aspnet_Membership].[UserId],
            [dbo].[aspnet_Membership].[PasswordFormat],
            [dbo].[aspnet_Membership].[MobilePIN],
            [dbo].[aspnet_Membership].[Email],
            [dbo].[aspnet_Membership].[LoweredEmail],
            [dbo].[aspnet_Membership].[PasswordQuestion],
            [dbo].[aspnet_Membership].[PasswordAnswer],
            [dbo].[aspnet_Membership].[IsApproved],
            [dbo].[aspnet_Membership].[IsLockedOut],
            [dbo].[aspnet_Membership].[CreateDate],
            [dbo].[aspnet_Membership].[LastLoginDate],
            [dbo].[aspnet_Membership].[LastPasswordChangedDate],
            [dbo].[aspnet_Membership].[LastLockoutDate],
            [dbo].[aspnet_Membership].[FailedPasswordAttemptCount],
            [dbo].[aspnet_Membership].[FailedPasswordAttemptWindowStart],
            [dbo].[aspnet_Membership].[FailedPasswordAnswerAttemptCount],
            [dbo].[aspnet_Membership].[FailedPasswordAnswerAttemptWindowStart],
            [dbo].[aspnet_Membership].[Comment],
            [dbo].[aspnet_Users].[ApplicationId],
            [dbo].[aspnet_Users].[UserName],
            [dbo].[aspnet_Users].[MobileAlias],
            [dbo].[aspnet_Users].[IsAnonymous],
            [dbo].[aspnet_Users].[LastActivityDate]
  FROM [dbo].[aspnet_Membership] INNER JOIN [dbo].[aspnet_Users]
      ON [dbo].[aspnet_Membership].[UserId] = [dbo].[aspnet_Users].[UserId]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vw_aspnet_Profiles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
  CREATE VIEW [dbo].[vw_aspnet_Profiles]
  AS SELECT [dbo].[aspnet_Profile].[UserId], [dbo].[aspnet_Profile].[LastUpdatedDate],
      [DataSize]=  DATALENGTH([dbo].[aspnet_Profile].[PropertyNames])
                 + DATALENGTH([dbo].[aspnet_Profile].[PropertyValuesString])
                 + DATALENGTH([dbo].[aspnet_Profile].[PropertyValuesBinary])
  FROM [dbo].[aspnet_Profile]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vw_aspnet_Roles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
  CREATE VIEW [dbo].[vw_aspnet_Roles]
  AS SELECT [dbo].[aspnet_Roles].[ApplicationId], [dbo].[aspnet_Roles].[RoleId], [dbo].[aspnet_Roles].[RoleName], [dbo].[aspnet_Roles].[LoweredRoleName], [dbo].[aspnet_Roles].[Description]
  FROM [dbo].[aspnet_Roles]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vw_aspnet_Users]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
  CREATE VIEW [dbo].[vw_aspnet_Users]
  AS SELECT [dbo].[aspnet_Users].[ApplicationId], [dbo].[aspnet_Users].[UserId], [dbo].[aspnet_Users].[UserName], [dbo].[aspnet_Users].[LoweredUserName], [dbo].[aspnet_Users].[MobileAlias], [dbo].[aspnet_Users].[IsAnonymous], [dbo].[aspnet_Users].[LastActivityDate]
  FROM [dbo].[aspnet_Users]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vw_aspnet_UsersInRoles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
  CREATE VIEW [dbo].[vw_aspnet_UsersInRoles]
  AS SELECT [dbo].[aspnet_UsersInRoles].[UserId], [dbo].[aspnet_UsersInRoles].[RoleId]
  FROM [dbo].[aspnet_UsersInRoles]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vw_aspnet_WebPartState_Paths]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
  CREATE VIEW [dbo].[vw_aspnet_WebPartState_Paths]
  AS SELECT [dbo].[aspnet_Paths].[ApplicationId], [dbo].[aspnet_Paths].[PathId], [dbo].[aspnet_Paths].[Path], [dbo].[aspnet_Paths].[LoweredPath]
  FROM [dbo].[aspnet_Paths]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vw_aspnet_WebPartState_Shared]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
  CREATE VIEW [dbo].[vw_aspnet_WebPartState_Shared]
  AS SELECT [dbo].[aspnet_PersonalizationAllUsers].[PathId], [DataSize]=DATALENGTH([dbo].[aspnet_PersonalizationAllUsers].[PageSettings]), [dbo].[aspnet_PersonalizationAllUsers].[LastUpdatedDate]
  FROM [dbo].[aspnet_PersonalizationAllUsers]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vw_aspnet_WebPartState_User]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
  CREATE VIEW [dbo].[vw_aspnet_WebPartState_User]
  AS SELECT [dbo].[aspnet_PersonalizationPerUser].[PathId], [dbo].[aspnet_PersonalizationPerUser].[UserId], [DataSize]=DATALENGTH([dbo].[aspnet_PersonalizationPerUser].[PageSettings]), [dbo].[aspnet_PersonalizationPerUser].[LastUpdatedDate]
  FROM [dbo].[aspnet_PersonalizationPerUser]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_AnyDataInTables]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].aspnet_AnyDataInTables
    @TablesToCheck int
AS
BEGIN
    -- Check Membership table if (@TablesToCheck & 1) is set
    IF ((@TablesToCheck & 1) <> 0 AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_MembershipUsers') AND (type = 'V'))))
    BEGIN
        IF (EXISTS(SELECT TOP 1 UserId FROM dbo.aspnet_Membership))
        BEGIN
            SELECT N'aspnet_Membership'
            RETURN
        END
    END

    -- Check aspnet_Roles table if (@TablesToCheck & 2) is set
    IF ((@TablesToCheck & 2) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_Roles') AND (type = 'V'))) )
    BEGIN
        IF (EXISTS(SELECT TOP 1 RoleId FROM dbo.aspnet_Roles))
        BEGIN
            SELECT N'aspnet_Roles'
            RETURN
        END
    END

    -- Check aspnet_Profile table if (@TablesToCheck & 4) is set
    IF ((@TablesToCheck & 4) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_Profiles') AND (type = 'V'))) )
    BEGIN
        IF (EXISTS(SELECT TOP 1 UserId FROM dbo.aspnet_Profile))
        BEGIN
            SELECT N'aspnet_Profile'
            RETURN
        END
    END

    -- Check aspnet_PersonalizationPerUser table if (@TablesToCheck & 8) is set
    IF ((@TablesToCheck & 8) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_WebPartState_User') AND (type = 'V'))) )
    BEGIN
        IF (EXISTS(SELECT TOP 1 UserId FROM dbo.aspnet_PersonalizationPerUser))
        BEGIN
            SELECT N'aspnet_PersonalizationPerUser'
            RETURN
        END
    END

    -- Check aspnet_PersonalizationPerUser table if (@TablesToCheck & 16) is set
    IF ((@TablesToCheck & 16) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'aspnet_WebEvent_LogEvent') AND (type = 'P'))) )
    BEGIN
        IF (EXISTS(SELECT TOP 1 * FROM dbo.aspnet_WebEvent_Events))
        BEGIN
            SELECT N'aspnet_WebEvent_Events'
            RETURN
        END
    END

    -- Check aspnet_Users table if (@TablesToCheck & 1,2,4 & 8) are all set
    IF ((@TablesToCheck & 1) <> 0 AND
        (@TablesToCheck & 2) <> 0 AND
        (@TablesToCheck & 4) <> 0 AND
        (@TablesToCheck & 8) <> 0 AND
        (@TablesToCheck & 32) <> 0 AND
        (@TablesToCheck & 128) <> 0 AND
        (@TablesToCheck & 256) <> 0 AND
        (@TablesToCheck & 512) <> 0 AND
        (@TablesToCheck & 1024) <> 0)
    BEGIN
        IF (EXISTS(SELECT TOP 1 UserId FROM dbo.aspnet_Users))
        BEGIN
            SELECT N'aspnet_Users'
            RETURN
        END
        IF (EXISTS(SELECT TOP 1 ApplicationId FROM dbo.aspnet_Applications))
        BEGIN
            SELECT N'aspnet_Applications'
            RETURN
        END
    END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Applications_CreateApplication]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].aspnet_Applications_CreateApplication
    @ApplicationName      nvarchar(256),
    @ApplicationId        uniqueidentifier OUTPUT
AS
BEGIN
    SELECT  @ApplicationId = ApplicationId FROM dbo.aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName

    IF(@ApplicationId IS NULL)
    BEGIN
        DECLARE @TranStarted   bit
        SET @TranStarted = 0

        IF( @@TRANCOUNT = 0 )
        BEGIN
	        BEGIN TRANSACTION
	        SET @TranStarted = 1
        END
        ELSE
    	    SET @TranStarted = 0

        SELECT  @ApplicationId = ApplicationId
        FROM dbo.aspnet_Applications WITH (UPDLOCK, HOLDLOCK)
        WHERE LOWER(@ApplicationName) = LoweredApplicationName

        IF(@ApplicationId IS NULL)
        BEGIN
            SELECT  @ApplicationId = NEWID()
            INSERT  dbo.aspnet_Applications (ApplicationId, ApplicationName, LoweredApplicationName)
            VALUES  (@ApplicationId, @ApplicationName, LOWER(@ApplicationName))
        END


        IF( @TranStarted = 1 )
        BEGIN
            IF(@@ERROR = 0)
            BEGIN
	        SET @TranStarted = 0
	        COMMIT TRANSACTION
            END
            ELSE
            BEGIN
                SET @TranStarted = 0
                ROLLBACK TRANSACTION
            END
        END
    END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_CheckSchemaVersion]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].aspnet_CheckSchemaVersion
    @Feature                   nvarchar(128),
    @CompatibleSchemaVersion   nvarchar(128)
AS
BEGIN
    IF (EXISTS( SELECT  *
                FROM    dbo.aspnet_SchemaVersions
                WHERE   Feature = LOWER( @Feature ) AND
                        CompatibleSchemaVersion = @CompatibleSchemaVersion ))
        RETURN 0

    RETURN 1
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Membership_ChangePasswordQuestionAndAnswer]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_ChangePasswordQuestionAndAnswer
    @ApplicationName       nvarchar(256),
    @UserName              nvarchar(256),
    @NewPasswordQuestion   nvarchar(256),
    @NewPasswordAnswer     nvarchar(128)
AS
BEGIN
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL
    SELECT  @UserId = u.UserId
    FROM    dbo.aspnet_Membership m, dbo.aspnet_Users u, dbo.aspnet_Applications a
    WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId
    IF (@UserId IS NULL)
    BEGIN
        RETURN(1)
    END

    UPDATE dbo.aspnet_Membership
    SET    PasswordQuestion = @NewPasswordQuestion, PasswordAnswer = @NewPasswordAnswer
    WHERE  UserId=@UserId
    RETURN(0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Membership_FindUsersByEmail]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_FindUsersByEmail
    @ApplicationName       nvarchar(256),
    @EmailToMatch          nvarchar(256),
    @PageIndex             int,
    @PageSize              int
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM dbo.aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN 0

    -- Set the page bounds
    DECLARE @PageLowerBound int
    DECLARE @PageUpperBound int
    DECLARE @TotalRecords   int
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table TO store the select results
    CREATE TABLE #PageIndexForUsers
    (
        IndexId int IDENTITY (0, 1) NOT NULL,
        UserId uniqueidentifier
    )

    -- Insert into our temp table
    IF( @EmailToMatch IS NULL )
        INSERT INTO #PageIndexForUsers (UserId)
            SELECT u.UserId
            FROM   dbo.aspnet_Users u, dbo.aspnet_Membership m
            WHERE  u.ApplicationId = @ApplicationId AND m.UserId = u.UserId AND m.Email IS NULL
            ORDER BY m.LoweredEmail
    ELSE
        INSERT INTO #PageIndexForUsers (UserId)
            SELECT u.UserId
            FROM   dbo.aspnet_Users u, dbo.aspnet_Membership m
            WHERE  u.ApplicationId = @ApplicationId AND m.UserId = u.UserId AND m.LoweredEmail LIKE LOWER(@EmailToMatch)
            ORDER BY m.LoweredEmail

    SELECT  u.UserName, m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
            m.CreateDate,
            m.LastLoginDate,
            u.LastActivityDate,
            m.LastPasswordChangedDate,
            u.UserId, m.IsLockedOut,
            m.LastLockoutDate
    FROM   dbo.aspnet_Membership m, dbo.aspnet_Users u, #PageIndexForUsers p
    WHERE  u.UserId = p.UserId AND u.UserId = m.UserId AND
           p.IndexId >= @PageLowerBound AND p.IndexId <= @PageUpperBound
    ORDER BY m.LoweredEmail

    SELECT  @TotalRecords = COUNT(*)
    FROM    #PageIndexForUsers
    RETURN @TotalRecords
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Membership_FindUsersByName]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_FindUsersByName
    @ApplicationName       nvarchar(256),
    @UserNameToMatch       nvarchar(256),
    @PageIndex             int,
    @PageSize              int
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM dbo.aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN 0

    -- Set the page bounds
    DECLARE @PageLowerBound int
    DECLARE @PageUpperBound int
    DECLARE @TotalRecords   int
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table TO store the select results
    CREATE TABLE #PageIndexForUsers
    (
        IndexId int IDENTITY (0, 1) NOT NULL,
        UserId uniqueidentifier
    )

    -- Insert into our temp table
    INSERT INTO #PageIndexForUsers (UserId)
        SELECT u.UserId
        FROM   dbo.aspnet_Users u, dbo.aspnet_Membership m
        WHERE  u.ApplicationId = @ApplicationId AND m.UserId = u.UserId AND u.LoweredUserName LIKE LOWER(@UserNameToMatch)
        ORDER BY u.UserName


    SELECT  u.UserName, m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
            m.CreateDate,
            m.LastLoginDate,
            u.LastActivityDate,
            m.LastPasswordChangedDate,
            u.UserId, m.IsLockedOut,
            m.LastLockoutDate
    FROM   dbo.aspnet_Membership m, dbo.aspnet_Users u, #PageIndexForUsers p
    WHERE  u.UserId = p.UserId AND u.UserId = m.UserId AND
           p.IndexId >= @PageLowerBound AND p.IndexId <= @PageUpperBound
    ORDER BY u.UserName

    SELECT  @TotalRecords = COUNT(*)
    FROM    #PageIndexForUsers
    RETURN @TotalRecords
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Membership_GetAllUsers]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_GetAllUsers
    @ApplicationName       nvarchar(256),
    @PageIndex             int,
    @PageSize              int
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM dbo.aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN 0


    -- Set the page bounds
    DECLARE @PageLowerBound int
    DECLARE @PageUpperBound int
    DECLARE @TotalRecords   int
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table TO store the select results
    CREATE TABLE #PageIndexForUsers
    (
        IndexId int IDENTITY (0, 1) NOT NULL,
        UserId uniqueidentifier
    )

    -- Insert into our temp table
    INSERT INTO #PageIndexForUsers (UserId)
    SELECT u.UserId
    FROM   dbo.aspnet_Membership m, dbo.aspnet_Users u
    WHERE  u.ApplicationId = @ApplicationId AND u.UserId = m.UserId
    ORDER BY u.UserName

    SELECT @TotalRecords = @@ROWCOUNT

    SELECT u.UserName, m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
            m.CreateDate,
            m.LastLoginDate,
            u.LastActivityDate,
            m.LastPasswordChangedDate,
            u.UserId, m.IsLockedOut,
            m.LastLockoutDate
    FROM   dbo.aspnet_Membership m, dbo.aspnet_Users u, #PageIndexForUsers p
    WHERE  u.UserId = p.UserId AND u.UserId = m.UserId AND
           p.IndexId >= @PageLowerBound AND p.IndexId <= @PageUpperBound
    ORDER BY u.UserName
    RETURN @TotalRecords
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Membership_GetNumberOfUsersOnline]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_GetNumberOfUsersOnline
    @ApplicationName            nvarchar(256),
    @MinutesSinceLastInActive   int,
    @CurrentTimeUtc             datetime
AS
BEGIN
    DECLARE @DateActive datetime
    SELECT  @DateActive = DATEADD(minute,  -(@MinutesSinceLastInActive), @CurrentTimeUtc)

    DECLARE @NumOnline int
    SELECT  @NumOnline = COUNT(*)
    FROM    dbo.aspnet_Users u(NOLOCK),
            dbo.aspnet_Applications a(NOLOCK),
            dbo.aspnet_Membership m(NOLOCK)
    WHERE   u.ApplicationId = a.ApplicationId                  AND
            LastActivityDate > @DateActive                     AND
            a.LoweredApplicationName = LOWER(@ApplicationName) AND
            u.UserId = m.UserId
    RETURN(@NumOnline)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Membership_GetPassword]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_GetPassword
    @ApplicationName                nvarchar(256),
    @UserName                       nvarchar(256),
    @MaxInvalidPasswordAttempts     int,
    @PasswordAttemptWindow          int,
    @CurrentTimeUtc                 datetime,
    @PasswordAnswer                 nvarchar(128) = NULL
AS
BEGIN
    DECLARE @UserId                                 uniqueidentifier
    DECLARE @PasswordFormat                         int
    DECLARE @Password                               nvarchar(128)
    DECLARE @passAns                                nvarchar(128)
    DECLARE @IsLockedOut                            bit
    DECLARE @LastLockoutDate                        datetime
    DECLARE @FailedPasswordAttemptCount             int
    DECLARE @FailedPasswordAttemptWindowStart       datetime
    DECLARE @FailedPasswordAnswerAttemptCount       int
    DECLARE @FailedPasswordAnswerAttemptWindowStart datetime

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    SELECT  @UserId = u.UserId,
            @Password = m.Password,
            @passAns = m.PasswordAnswer,
            @PasswordFormat = m.PasswordFormat,
            @IsLockedOut = m.IsLockedOut,
            @LastLockoutDate = m.LastLockoutDate,
            @FailedPasswordAttemptCount = m.FailedPasswordAttemptCount,
            @FailedPasswordAttemptWindowStart = m.FailedPasswordAttemptWindowStart,
            @FailedPasswordAnswerAttemptCount = m.FailedPasswordAnswerAttemptCount,
            @FailedPasswordAnswerAttemptWindowStart = m.FailedPasswordAnswerAttemptWindowStart
    FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m WITH ( UPDLOCK )
    WHERE   LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.ApplicationId = a.ApplicationId    AND
            u.UserId = m.UserId AND
            LOWER(@UserName) = u.LoweredUserName

    IF ( @@rowcount = 0 )
    BEGIN
        SET @ErrorCode = 1
        GOTO Cleanup
    END

    IF( @IsLockedOut = 1 )
    BEGIN
        SET @ErrorCode = 99
        GOTO Cleanup
    END

    IF ( NOT( @PasswordAnswer IS NULL ) )
    BEGIN
        IF( ( @passAns IS NULL ) OR ( LOWER( @passAns ) <> LOWER( @PasswordAnswer ) ) )
        BEGIN
            IF( @CurrentTimeUtc > DATEADD( minute, @PasswordAttemptWindow, @FailedPasswordAnswerAttemptWindowStart ) )
            BEGIN
                SET @FailedPasswordAnswerAttemptWindowStart = @CurrentTimeUtc
                SET @FailedPasswordAnswerAttemptCount = 1
            END
            ELSE
            BEGIN
                SET @FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount + 1
                SET @FailedPasswordAnswerAttemptWindowStart = @CurrentTimeUtc
            END

            BEGIN
                IF( @FailedPasswordAnswerAttemptCount >= @MaxInvalidPasswordAttempts )
                BEGIN
                    SET @IsLockedOut = 1
                    SET @LastLockoutDate = @CurrentTimeUtc
                END
            END

            SET @ErrorCode = 3
        END
        ELSE
        BEGIN
            IF( @FailedPasswordAnswerAttemptCount > 0 )
            BEGIN
                SET @FailedPasswordAnswerAttemptCount = 0
                SET @FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 )
            END
        END

        UPDATE dbo.aspnet_Membership
        SET IsLockedOut = @IsLockedOut, LastLockoutDate = @LastLockoutDate,
            FailedPasswordAttemptCount = @FailedPasswordAttemptCount,
            FailedPasswordAttemptWindowStart = @FailedPasswordAttemptWindowStart,
            FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount,
            FailedPasswordAnswerAttemptWindowStart = @FailedPasswordAnswerAttemptWindowStart
        WHERE @UserId = UserId

        IF( @@ERROR <> 0 )
        BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END
    END

    IF( @TranStarted = 1 )
    BEGIN
	SET @TranStarted = 0
	COMMIT TRANSACTION
    END

    IF( @ErrorCode = 0 )
        SELECT @Password, @PasswordFormat

    RETURN @ErrorCode

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Membership_GetPasswordWithFormat]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_GetPasswordWithFormat
    @ApplicationName                nvarchar(256),
    @UserName                       nvarchar(256),
    @UpdateLastLoginActivityDate    bit,
    @CurrentTimeUtc                 datetime
AS
BEGIN
    DECLARE @IsLockedOut                        bit
    DECLARE @UserId                             uniqueidentifier
    DECLARE @Password                           nvarchar(128)
    DECLARE @PasswordSalt                       nvarchar(128)
    DECLARE @PasswordFormat                     int
    DECLARE @FailedPasswordAttemptCount         int
    DECLARE @FailedPasswordAnswerAttemptCount   int
    DECLARE @IsApproved                         bit
    DECLARE @LastActivityDate                   datetime
    DECLARE @LastLoginDate                      datetime

    SELECT  @UserId          = NULL

    SELECT  @UserId = u.UserId, @IsLockedOut = m.IsLockedOut, @Password=Password, @PasswordFormat=PasswordFormat,
            @PasswordSalt=PasswordSalt, @FailedPasswordAttemptCount=FailedPasswordAttemptCount,
		    @FailedPasswordAnswerAttemptCount=FailedPasswordAnswerAttemptCount, @IsApproved=IsApproved,
            @LastActivityDate = LastActivityDate, @LastLoginDate = LastLoginDate
    FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m
    WHERE   LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.ApplicationId = a.ApplicationId    AND
            u.UserId = m.UserId AND
            LOWER(@UserName) = u.LoweredUserName

    IF (@UserId IS NULL)
        RETURN 1

    IF (@IsLockedOut = 1)
        RETURN 99

    SELECT   @Password, @PasswordFormat, @PasswordSalt, @FailedPasswordAttemptCount,
             @FailedPasswordAnswerAttemptCount, @IsApproved, @LastLoginDate, @LastActivityDate

    IF (@UpdateLastLoginActivityDate = 1 AND @IsApproved = 1)
    BEGIN
        UPDATE  dbo.aspnet_Membership
        SET     LastLoginDate = @CurrentTimeUtc
        WHERE   UserId = @UserId

        UPDATE  dbo.aspnet_Users
        SET     LastActivityDate = @CurrentTimeUtc
        WHERE   @UserId = UserId
    END


    RETURN 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Membership_GetUserByEmail]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_GetUserByEmail
    @ApplicationName  nvarchar(256),
    @Email            nvarchar(256)
AS
BEGIN
    IF( @Email IS NULL )
        SELECT  u.UserName
        FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m
        WHERE   LOWER(@ApplicationName) = a.LoweredApplicationName AND
                u.ApplicationId = a.ApplicationId    AND
                u.UserId = m.UserId AND
                m.ApplicationId = a.ApplicationId AND
                m.LoweredEmail IS NULL
    ELSE
        SELECT  u.UserName
        FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m
        WHERE   LOWER(@ApplicationName) = a.LoweredApplicationName AND
                u.ApplicationId = a.ApplicationId    AND
                u.UserId = m.UserId AND
                m.ApplicationId = a.ApplicationId AND
                LOWER(@Email) = m.LoweredEmail

    IF (@@rowcount = 0)
        RETURN(1)
    RETURN(0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Membership_GetUserByName]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_GetUserByName
    @ApplicationName      nvarchar(256),
    @UserName             nvarchar(256),
    @CurrentTimeUtc       datetime,
    @UpdateLastActivity   bit = 0
AS
BEGIN
    DECLARE @UserId uniqueidentifier

    IF (@UpdateLastActivity = 1)
    BEGIN
        -- select user ID from aspnet_users table
        SELECT TOP 1 @UserId = u.UserId
        FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m
        WHERE    LOWER(@ApplicationName) = a.LoweredApplicationName AND
                u.ApplicationId = a.ApplicationId    AND
                LOWER(@UserName) = u.LoweredUserName AND u.UserId = m.UserId

        IF (@@ROWCOUNT = 0) -- Username not found
            RETURN -1

        UPDATE   dbo.aspnet_Users
        SET      LastActivityDate = @CurrentTimeUtc
        WHERE    @UserId = UserId

        SELECT m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
                m.CreateDate, m.LastLoginDate, u.LastActivityDate, m.LastPasswordChangedDate,
                u.UserId, m.IsLockedOut, m.LastLockoutDate
        FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m
        WHERE  @UserId = u.UserId AND u.UserId = m.UserId 
    END
    ELSE
    BEGIN
        SELECT TOP 1 m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
                m.CreateDate, m.LastLoginDate, u.LastActivityDate, m.LastPasswordChangedDate,
                u.UserId, m.IsLockedOut,m.LastLockoutDate
        FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m
        WHERE    LOWER(@ApplicationName) = a.LoweredApplicationName AND
                u.ApplicationId = a.ApplicationId    AND
                LOWER(@UserName) = u.LoweredUserName AND u.UserId = m.UserId

        IF (@@ROWCOUNT = 0) -- Username not found
            RETURN -1
    END

    RETURN 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Membership_GetUserByUserId]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_GetUserByUserId
    @UserId               uniqueidentifier,
    @CurrentTimeUtc       datetime,
    @UpdateLastActivity   bit = 0
AS
BEGIN
    IF ( @UpdateLastActivity = 1 )
    BEGIN
        UPDATE   dbo.aspnet_Users
        SET      LastActivityDate = @CurrentTimeUtc
        FROM     dbo.aspnet_Users
        WHERE    @UserId = UserId

        IF ( @@ROWCOUNT = 0 ) -- User ID not found
            RETURN -1
    END

    SELECT  m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
            m.CreateDate, m.LastLoginDate, u.LastActivityDate,
            m.LastPasswordChangedDate, u.UserName, m.IsLockedOut,
            m.LastLockoutDate
    FROM    dbo.aspnet_Users u, dbo.aspnet_Membership m
    WHERE   @UserId = u.UserId AND u.UserId = m.UserId

    IF ( @@ROWCOUNT = 0 ) -- User ID not found
       RETURN -1

    RETURN 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Membership_ResetPassword]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_ResetPassword
    @ApplicationName             nvarchar(256),
    @UserName                    nvarchar(256),
    @NewPassword                 nvarchar(128),
    @MaxInvalidPasswordAttempts  int,
    @PasswordAttemptWindow       int,
    @PasswordSalt                nvarchar(128),
    @CurrentTimeUtc              datetime,
    @PasswordFormat              int = 0,
    @PasswordAnswer              nvarchar(128) = NULL
AS
BEGIN
    DECLARE @IsLockedOut                            bit
    DECLARE @LastLockoutDate                        datetime
    DECLARE @FailedPasswordAttemptCount             int
    DECLARE @FailedPasswordAttemptWindowStart       datetime
    DECLARE @FailedPasswordAnswerAttemptCount       int
    DECLARE @FailedPasswordAnswerAttemptWindowStart datetime

    DECLARE @UserId                                 uniqueidentifier
    SET     @UserId = NULL

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    SELECT  @UserId = u.UserId
    FROM    dbo.aspnet_Users u, dbo.aspnet_Applications a, dbo.aspnet_Membership m
    WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId

    IF ( @UserId IS NULL )
    BEGIN
        SET @ErrorCode = 1
        GOTO Cleanup
    END

    SELECT @IsLockedOut = IsLockedOut,
           @LastLockoutDate = LastLockoutDate,
           @FailedPasswordAttemptCount = FailedPasswordAttemptCount,
           @FailedPasswordAttemptWindowStart = FailedPasswordAttemptWindowStart,
           @FailedPasswordAnswerAttemptCount = FailedPasswordAnswerAttemptCount,
           @FailedPasswordAnswerAttemptWindowStart = FailedPasswordAnswerAttemptWindowStart
    FROM dbo.aspnet_Membership WITH ( UPDLOCK )
    WHERE @UserId = UserId

    IF( @IsLockedOut = 1 )
    BEGIN
        SET @ErrorCode = 99
        GOTO Cleanup
    END

    UPDATE dbo.aspnet_Membership
    SET    Password = @NewPassword,
           LastPasswordChangedDate = @CurrentTimeUtc,
           PasswordFormat = @PasswordFormat,
           PasswordSalt = @PasswordSalt
    WHERE  @UserId = UserId AND
           ( ( @PasswordAnswer IS NULL ) OR ( LOWER( PasswordAnswer ) = LOWER( @PasswordAnswer ) ) )

    IF ( @@ROWCOUNT = 0 )
        BEGIN
            IF( @CurrentTimeUtc > DATEADD( minute, @PasswordAttemptWindow, @FailedPasswordAnswerAttemptWindowStart ) )
            BEGIN
                SET @FailedPasswordAnswerAttemptWindowStart = @CurrentTimeUtc
                SET @FailedPasswordAnswerAttemptCount = 1
            END
            ELSE
            BEGIN
                SET @FailedPasswordAnswerAttemptWindowStart = @CurrentTimeUtc
                SET @FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount + 1
            END

            BEGIN
                IF( @FailedPasswordAnswerAttemptCount >= @MaxInvalidPasswordAttempts )
                BEGIN
                    SET @IsLockedOut = 1
                    SET @LastLockoutDate = @CurrentTimeUtc
                END
            END

            SET @ErrorCode = 3
        END
    ELSE
        BEGIN
            IF( @FailedPasswordAnswerAttemptCount > 0 )
            BEGIN
                SET @FailedPasswordAnswerAttemptCount = 0
                SET @FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 )
            END
        END

    IF( NOT ( @PasswordAnswer IS NULL ) )
    BEGIN
        UPDATE dbo.aspnet_Membership
        SET IsLockedOut = @IsLockedOut, LastLockoutDate = @LastLockoutDate,
            FailedPasswordAttemptCount = @FailedPasswordAttemptCount,
            FailedPasswordAttemptWindowStart = @FailedPasswordAttemptWindowStart,
            FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount,
            FailedPasswordAnswerAttemptWindowStart = @FailedPasswordAnswerAttemptWindowStart
        WHERE @UserId = UserId

        IF( @@ERROR <> 0 )
        BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END
    END

    IF( @TranStarted = 1 )
    BEGIN
	SET @TranStarted = 0
	COMMIT TRANSACTION
    END

    RETURN @ErrorCode

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Membership_SetPassword]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_SetPassword
    @ApplicationName  nvarchar(256),
    @UserName         nvarchar(256),
    @NewPassword      nvarchar(128),
    @PasswordSalt     nvarchar(128),
    @CurrentTimeUtc   datetime,
    @PasswordFormat   int = 0
AS
BEGIN
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL
    SELECT  @UserId = u.UserId
    FROM    dbo.aspnet_Users u, dbo.aspnet_Applications a, dbo.aspnet_Membership m
    WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId

    IF (@UserId IS NULL)
        RETURN(1)

    UPDATE dbo.aspnet_Membership
    SET Password = @NewPassword, PasswordFormat = @PasswordFormat, PasswordSalt = @PasswordSalt,
        LastPasswordChangedDate = @CurrentTimeUtc
    WHERE @UserId = UserId
    RETURN(0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Membership_UnlockUser]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_UnlockUser
    @ApplicationName                         nvarchar(256),
    @UserName                                nvarchar(256)
AS
BEGIN
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL
    SELECT  @UserId = u.UserId
    FROM    dbo.aspnet_Users u, dbo.aspnet_Applications a, dbo.aspnet_Membership m
    WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId

    IF ( @UserId IS NULL )
        RETURN 1

    UPDATE dbo.aspnet_Membership
    SET IsLockedOut = 0,
        FailedPasswordAttemptCount = 0,
        FailedPasswordAttemptWindowStart = CONVERT( datetime, '17540101', 112 ),
        FailedPasswordAnswerAttemptCount = 0,
        FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 ),
        LastLockoutDate = CONVERT( datetime, '17540101', 112 )
    WHERE @UserId = UserId

    RETURN 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Membership_UpdateUser]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_UpdateUser
    @ApplicationName      nvarchar(256),
    @UserName             nvarchar(256),
    @Email                nvarchar(256),
    @Comment              ntext,
    @IsApproved           bit,
    @LastLoginDate        datetime,
    @LastActivityDate     datetime,
    @UniqueEmail          int,
    @CurrentTimeUtc       datetime
AS
BEGIN
    DECLARE @UserId uniqueidentifier
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @UserId = NULL
    SELECT  @UserId = u.UserId, @ApplicationId = a.ApplicationId
    FROM    dbo.aspnet_Users u, dbo.aspnet_Applications a, dbo.aspnet_Membership m
    WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId

    IF (@UserId IS NULL)
        RETURN(1)

    IF (@UniqueEmail = 1)
    BEGIN
        IF (EXISTS (SELECT *
                    FROM  dbo.aspnet_Membership WITH (UPDLOCK, HOLDLOCK)
                    WHERE ApplicationId = @ApplicationId  AND @UserId <> UserId AND LoweredEmail = LOWER(@Email)))
        BEGIN
            RETURN(7)
        END
    END

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
	SET @TranStarted = 0

    UPDATE dbo.aspnet_Users WITH (ROWLOCK)
    SET
         LastActivityDate = @LastActivityDate
    WHERE
       @UserId = UserId

    IF( @@ERROR <> 0 )
        GOTO Cleanup

    UPDATE dbo.aspnet_Membership WITH (ROWLOCK)
    SET
         Email            = @Email,
         LoweredEmail     = LOWER(@Email),
         Comment          = @Comment,
         IsApproved       = @IsApproved,
         LastLoginDate    = @LastLoginDate
    WHERE
       @UserId = UserId

    IF( @@ERROR <> 0 )
        GOTO Cleanup

    IF( @TranStarted = 1 )
    BEGIN
	SET @TranStarted = 0
	COMMIT TRANSACTION
    END

    RETURN 0

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN -1
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Membership_UpdateUserInfo]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_UpdateUserInfo
    @ApplicationName                nvarchar(256),
    @UserName                       nvarchar(256),
    @IsPasswordCorrect              bit,
    @UpdateLastLoginActivityDate    bit,
    @MaxInvalidPasswordAttempts     int,
    @PasswordAttemptWindow          int,
    @CurrentTimeUtc                 datetime,
    @LastLoginDate                  datetime,
    @LastActivityDate               datetime
AS
BEGIN
    DECLARE @UserId                                 uniqueidentifier
    DECLARE @IsApproved                             bit
    DECLARE @IsLockedOut                            bit
    DECLARE @LastLockoutDate                        datetime
    DECLARE @FailedPasswordAttemptCount             int
    DECLARE @FailedPasswordAttemptWindowStart       datetime
    DECLARE @FailedPasswordAnswerAttemptCount       int
    DECLARE @FailedPasswordAnswerAttemptWindowStart datetime

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    SELECT  @UserId = u.UserId,
            @IsApproved = m.IsApproved,
            @IsLockedOut = m.IsLockedOut,
            @LastLockoutDate = m.LastLockoutDate,
            @FailedPasswordAttemptCount = m.FailedPasswordAttemptCount,
            @FailedPasswordAttemptWindowStart = m.FailedPasswordAttemptWindowStart,
            @FailedPasswordAnswerAttemptCount = m.FailedPasswordAnswerAttemptCount,
            @FailedPasswordAnswerAttemptWindowStart = m.FailedPasswordAnswerAttemptWindowStart
    FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m WITH ( UPDLOCK )
    WHERE   LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.ApplicationId = a.ApplicationId    AND
            u.UserId = m.UserId AND
            LOWER(@UserName) = u.LoweredUserName

    IF ( @@rowcount = 0 )
    BEGIN
        SET @ErrorCode = 1
        GOTO Cleanup
    END

    IF( @IsLockedOut = 1 )
    BEGIN
        GOTO Cleanup
    END

    IF( @IsPasswordCorrect = 0 )
    BEGIN
        IF( @CurrentTimeUtc > DATEADD( minute, @PasswordAttemptWindow, @FailedPasswordAttemptWindowStart ) )
        BEGIN
            SET @FailedPasswordAttemptWindowStart = @CurrentTimeUtc
            SET @FailedPasswordAttemptCount = 1
        END
        ELSE
        BEGIN
            SET @FailedPasswordAttemptWindowStart = @CurrentTimeUtc
            SET @FailedPasswordAttemptCount = @FailedPasswordAttemptCount + 1
        END

        BEGIN
            IF( @FailedPasswordAttemptCount >= @MaxInvalidPasswordAttempts )
            BEGIN
                SET @IsLockedOut = 1
                SET @LastLockoutDate = @CurrentTimeUtc
            END
        END
    END
    ELSE
    BEGIN
        IF( @FailedPasswordAttemptCount > 0 OR @FailedPasswordAnswerAttemptCount > 0 )
        BEGIN
            SET @FailedPasswordAttemptCount = 0
            SET @FailedPasswordAttemptWindowStart = CONVERT( datetime, '17540101', 112 )
            SET @FailedPasswordAnswerAttemptCount = 0
            SET @FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 )
            SET @LastLockoutDate = CONVERT( datetime, '17540101', 112 )
        END
    END

    IF( @UpdateLastLoginActivityDate = 1 )
    BEGIN
        UPDATE  dbo.aspnet_Users
        SET     LastActivityDate = @LastActivityDate
        WHERE   @UserId = UserId

        IF( @@ERROR <> 0 )
        BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END

        UPDATE  dbo.aspnet_Membership
        SET     LastLoginDate = @LastLoginDate
        WHERE   UserId = @UserId

        IF( @@ERROR <> 0 )
        BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END
    END


    UPDATE dbo.aspnet_Membership
    SET IsLockedOut = @IsLockedOut, LastLockoutDate = @LastLockoutDate,
        FailedPasswordAttemptCount = @FailedPasswordAttemptCount,
        FailedPasswordAttemptWindowStart = @FailedPasswordAttemptWindowStart,
        FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount,
        FailedPasswordAnswerAttemptWindowStart = @FailedPasswordAnswerAttemptWindowStart
    WHERE @UserId = UserId

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
	SET @TranStarted = 0
	COMMIT TRANSACTION
    END

    RETURN @ErrorCode

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Paths_CreatePath]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Paths_CreatePath
    @ApplicationId UNIQUEIDENTIFIER,
    @Path           NVARCHAR(256),
    @PathId         UNIQUEIDENTIFIER OUTPUT
AS
BEGIN
    BEGIN TRANSACTION
    IF (NOT EXISTS(SELECT * FROM dbo.aspnet_Paths WHERE LoweredPath = LOWER(@Path) AND ApplicationId = @ApplicationId))
    BEGIN
        INSERT dbo.aspnet_Paths (ApplicationId, Path, LoweredPath) VALUES (@ApplicationId, @Path, LOWER(@Path))
    END
    COMMIT TRANSACTION
    SELECT @PathId = PathId FROM dbo.aspnet_Paths WHERE LOWER(@Path) = LoweredPath AND ApplicationId = @ApplicationId
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Personalization_GetApplicationId]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Personalization_GetApplicationId (
    @ApplicationName NVARCHAR(256),
    @ApplicationId UNIQUEIDENTIFIER OUT)
AS
BEGIN
    SELECT @ApplicationId = ApplicationId FROM dbo.aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationAdministration_DeleteAllState]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationAdministration_DeleteAllState (
    @AllUsersScope bit,
    @ApplicationName NVARCHAR(256),
    @Count int OUT)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
        SELECT @Count = 0
    ELSE
    BEGIN
        IF (@AllUsersScope = 1)
            DELETE FROM aspnet_PersonalizationAllUsers
            WHERE PathId IN
               (SELECT Paths.PathId
                FROM dbo.aspnet_Paths Paths
                WHERE Paths.ApplicationId = @ApplicationId)
        ELSE
            DELETE FROM aspnet_PersonalizationPerUser
            WHERE PathId IN
               (SELECT Paths.PathId
                FROM dbo.aspnet_Paths Paths
                WHERE Paths.ApplicationId = @ApplicationId)

        SELECT @Count = @@ROWCOUNT
    END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationAdministration_FindState]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationAdministration_FindState (
    @AllUsersScope bit,
    @ApplicationName NVARCHAR(256),
    @PageIndex              INT,
    @PageSize               INT,
    @Path NVARCHAR(256) = NULL,
    @UserName NVARCHAR(256) = NULL,
    @InactiveSinceDate DATETIME = NULL)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
        RETURN

    -- Set the page bounds
    DECLARE @PageLowerBound INT
    DECLARE @PageUpperBound INT
    DECLARE @TotalRecords   INT
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table to store the selected results
    CREATE TABLE #PageIndex (
        IndexId int IDENTITY (0, 1) NOT NULL,
        ItemId UNIQUEIDENTIFIER
    )

    IF (@AllUsersScope = 1)
    BEGIN
        -- Insert into our temp table
        INSERT INTO #PageIndex (ItemId)
        SELECT Paths.PathId
        FROM dbo.aspnet_Paths Paths,
             ((SELECT Paths.PathId
               FROM dbo.aspnet_PersonalizationAllUsers AllUsers, dbo.aspnet_Paths Paths
               WHERE Paths.ApplicationId = @ApplicationId
                      AND AllUsers.PathId = Paths.PathId
                      AND (@Path IS NULL OR Paths.LoweredPath LIKE LOWER(@Path))
              ) AS SharedDataPerPath
              FULL OUTER JOIN
              (SELECT DISTINCT Paths.PathId
               FROM dbo.aspnet_PersonalizationPerUser PerUser, dbo.aspnet_Paths Paths
               WHERE Paths.ApplicationId = @ApplicationId
                      AND PerUser.PathId = Paths.PathId
                      AND (@Path IS NULL OR Paths.LoweredPath LIKE LOWER(@Path))
              ) AS UserDataPerPath
              ON SharedDataPerPath.PathId = UserDataPerPath.PathId
             )
        WHERE Paths.PathId = SharedDataPerPath.PathId OR Paths.PathId = UserDataPerPath.PathId
        ORDER BY Paths.Path ASC

        SELECT @TotalRecords = @@ROWCOUNT

        SELECT Paths.Path,
               SharedDataPerPath.LastUpdatedDate,
               SharedDataPerPath.SharedDataLength,
               UserDataPerPath.UserDataLength,
               UserDataPerPath.UserCount
        FROM dbo.aspnet_Paths Paths,
             ((SELECT PageIndex.ItemId AS PathId,
                      AllUsers.LastUpdatedDate AS LastUpdatedDate,
                      DATALENGTH(AllUsers.PageSettings) AS SharedDataLength
               FROM dbo.aspnet_PersonalizationAllUsers AllUsers, #PageIndex PageIndex
               WHERE AllUsers.PathId = PageIndex.ItemId
                     AND PageIndex.IndexId >= @PageLowerBound AND PageIndex.IndexId <= @PageUpperBound
              ) AS SharedDataPerPath
              FULL OUTER JOIN
              (SELECT PageIndex.ItemId AS PathId,
                      SUM(DATALENGTH(PerUser.PageSettings)) AS UserDataLength,
                      COUNT(*) AS UserCount
               FROM aspnet_PersonalizationPerUser PerUser, #PageIndex PageIndex
               WHERE PerUser.PathId = PageIndex.ItemId
                     AND PageIndex.IndexId >= @PageLowerBound AND PageIndex.IndexId <= @PageUpperBound
               GROUP BY PageIndex.ItemId
              ) AS UserDataPerPath
              ON SharedDataPerPath.PathId = UserDataPerPath.PathId
             )
        WHERE Paths.PathId = SharedDataPerPath.PathId OR Paths.PathId = UserDataPerPath.PathId
        ORDER BY Paths.Path ASC
    END
    ELSE
    BEGIN
        -- Insert into our temp table
        INSERT INTO #PageIndex (ItemId)
        SELECT PerUser.Id
        FROM dbo.aspnet_PersonalizationPerUser PerUser, dbo.aspnet_Users Users, dbo.aspnet_Paths Paths
        WHERE Paths.ApplicationId = @ApplicationId
              AND PerUser.UserId = Users.UserId
              AND PerUser.PathId = Paths.PathId
              AND (@Path IS NULL OR Paths.LoweredPath LIKE LOWER(@Path))
              AND (@UserName IS NULL OR Users.LoweredUserName LIKE LOWER(@UserName))
              AND (@InactiveSinceDate IS NULL OR Users.LastActivityDate <= @InactiveSinceDate)
        ORDER BY Paths.Path ASC, Users.UserName ASC

        SELECT @TotalRecords = @@ROWCOUNT

        SELECT Paths.Path, PerUser.LastUpdatedDate, DATALENGTH(PerUser.PageSettings), Users.UserName, Users.LastActivityDate
        FROM dbo.aspnet_PersonalizationPerUser PerUser, dbo.aspnet_Users Users, dbo.aspnet_Paths Paths, #PageIndex PageIndex
        WHERE PerUser.Id = PageIndex.ItemId
              AND PerUser.UserId = Users.UserId
              AND PerUser.PathId = Paths.PathId
              AND PageIndex.IndexId >= @PageLowerBound AND PageIndex.IndexId <= @PageUpperBound
        ORDER BY Paths.Path ASC, Users.UserName ASC
    END

    RETURN @TotalRecords
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationAdministration_GetCountOfState]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationAdministration_GetCountOfState (
    @Count int OUT,
    @AllUsersScope bit,
    @ApplicationName NVARCHAR(256),
    @Path NVARCHAR(256) = NULL,
    @UserName NVARCHAR(256) = NULL,
    @InactiveSinceDate DATETIME = NULL)
AS
BEGIN

    DECLARE @ApplicationId UNIQUEIDENTIFIER
    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
        SELECT @Count = 0
    ELSE
        IF (@AllUsersScope = 1)
            SELECT @Count = COUNT(*)
            FROM dbo.aspnet_PersonalizationAllUsers AllUsers, dbo.aspnet_Paths Paths
            WHERE Paths.ApplicationId = @ApplicationId
                  AND AllUsers.PathId = Paths.PathId
                  AND (@Path IS NULL OR Paths.LoweredPath LIKE LOWER(@Path))
        ELSE
            SELECT @Count = COUNT(*)
            FROM dbo.aspnet_PersonalizationPerUser PerUser, dbo.aspnet_Users Users, dbo.aspnet_Paths Paths
            WHERE Paths.ApplicationId = @ApplicationId
                  AND PerUser.UserId = Users.UserId
                  AND PerUser.PathId = Paths.PathId
                  AND (@Path IS NULL OR Paths.LoweredPath LIKE LOWER(@Path))
                  AND (@UserName IS NULL OR Users.LoweredUserName LIKE LOWER(@UserName))
                  AND (@InactiveSinceDate IS NULL OR Users.LastActivityDate <= @InactiveSinceDate)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationAdministration_ResetSharedState]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationAdministration_ResetSharedState (
    @Count int OUT,
    @ApplicationName NVARCHAR(256),
    @Path NVARCHAR(256))
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
        SELECT @Count = 0
    ELSE
    BEGIN
        DELETE FROM dbo.aspnet_PersonalizationAllUsers
        WHERE PathId IN
            (SELECT AllUsers.PathId
             FROM dbo.aspnet_PersonalizationAllUsers AllUsers, dbo.aspnet_Paths Paths
             WHERE Paths.ApplicationId = @ApplicationId
                   AND AllUsers.PathId = Paths.PathId
                   AND Paths.LoweredPath = LOWER(@Path))

        SELECT @Count = @@ROWCOUNT
    END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationAdministration_ResetUserState]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationAdministration_ResetUserState (
    @Count                  int                 OUT,
    @ApplicationName        NVARCHAR(256),
    @InactiveSinceDate      DATETIME            = NULL,
    @UserName               NVARCHAR(256)       = NULL,
    @Path                   NVARCHAR(256)       = NULL)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
        SELECT @Count = 0
    ELSE
    BEGIN
        DELETE FROM dbo.aspnet_PersonalizationPerUser
        WHERE Id IN (SELECT PerUser.Id
                     FROM dbo.aspnet_PersonalizationPerUser PerUser, dbo.aspnet_Users Users, dbo.aspnet_Paths Paths
                     WHERE Paths.ApplicationId = @ApplicationId
                           AND PerUser.UserId = Users.UserId
                           AND PerUser.PathId = Paths.PathId
                           AND (@InactiveSinceDate IS NULL OR Users.LastActivityDate <= @InactiveSinceDate)
                           AND (@UserName IS NULL OR Users.LoweredUserName = LOWER(@UserName))
                           AND (@Path IS NULL OR Paths.LoweredPath = LOWER(@Path)))

        SELECT @Count = @@ROWCOUNT
    END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationAllUsers_GetPageSettings]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationAllUsers_GetPageSettings (
    @ApplicationName  NVARCHAR(256),
    @Path              NVARCHAR(256))
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL

    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @PathId = u.PathId FROM dbo.aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        RETURN
    END

    SELECT p.PageSettings FROM dbo.aspnet_PersonalizationAllUsers p WHERE p.PathId = @PathId
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationAllUsers_ResetPageSettings]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationAllUsers_ResetPageSettings (
    @ApplicationName  NVARCHAR(256),
    @Path              NVARCHAR(256))
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL

    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @PathId = u.PathId FROM dbo.aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        RETURN
    END

    DELETE FROM dbo.aspnet_PersonalizationAllUsers WHERE PathId = @PathId
    RETURN 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationAllUsers_SetPageSettings]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationAllUsers_SetPageSettings (
    @ApplicationName  NVARCHAR(256),
    @Path             NVARCHAR(256),
    @PageSettings     IMAGE,
    @CurrentTimeUtc   DATETIME)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL

    EXEC dbo.aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    SELECT @PathId = u.PathId FROM dbo.aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        EXEC dbo.aspnet_Paths_CreatePath @ApplicationId, @Path, @PathId OUTPUT
    END

    IF (EXISTS(SELECT PathId FROM dbo.aspnet_PersonalizationAllUsers WHERE PathId = @PathId))
        UPDATE dbo.aspnet_PersonalizationAllUsers SET PageSettings = @PageSettings, LastUpdatedDate = @CurrentTimeUtc WHERE PathId = @PathId
    ELSE
        INSERT INTO dbo.aspnet_PersonalizationAllUsers(PathId, PageSettings, LastUpdatedDate) VALUES (@PathId, @PageSettings, @CurrentTimeUtc)
    RETURN 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationPerUser_GetPageSettings]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationPerUser_GetPageSettings (
    @ApplicationName  NVARCHAR(256),
    @UserName         NVARCHAR(256),
    @Path             NVARCHAR(256),
    @CurrentTimeUtc   DATETIME)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER
    DECLARE @UserId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL
    SELECT @UserId = NULL

    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @PathId = u.PathId FROM dbo.aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @UserId = u.UserId FROM dbo.aspnet_Users u WHERE u.ApplicationId = @ApplicationId AND u.LoweredUserName = LOWER(@UserName)
    IF (@UserId IS NULL)
    BEGIN
        RETURN
    END

    UPDATE   dbo.aspnet_Users WITH (ROWLOCK)
    SET      LastActivityDate = @CurrentTimeUtc
    WHERE    UserId = @UserId
    IF (@@ROWCOUNT = 0) -- Username not found
        RETURN

    SELECT p.PageSettings FROM dbo.aspnet_PersonalizationPerUser p WHERE p.PathId = @PathId AND p.UserId = @UserId
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationPerUser_ResetPageSettings]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationPerUser_ResetPageSettings (
    @ApplicationName  NVARCHAR(256),
    @UserName         NVARCHAR(256),
    @Path             NVARCHAR(256),
    @CurrentTimeUtc   DATETIME)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER
    DECLARE @UserId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL
    SELECT @UserId = NULL

    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @PathId = u.PathId FROM dbo.aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @UserId = u.UserId FROM dbo.aspnet_Users u WHERE u.ApplicationId = @ApplicationId AND u.LoweredUserName = LOWER(@UserName)
    IF (@UserId IS NULL)
    BEGIN
        RETURN
    END

    UPDATE   dbo.aspnet_Users WITH (ROWLOCK)
    SET      LastActivityDate = @CurrentTimeUtc
    WHERE    UserId = @UserId
    IF (@@ROWCOUNT = 0) -- Username not found
        RETURN

    DELETE FROM dbo.aspnet_PersonalizationPerUser WHERE PathId = @PathId AND UserId = @UserId
    RETURN 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Profile_DeleteInactiveProfiles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_Profile_DeleteInactiveProfiles
    @ApplicationName        nvarchar(256),
    @ProfileAuthOptions     int,
    @InactiveSinceDate      datetime
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
    BEGIN
        SELECT  0
        RETURN
    END

    DELETE
    FROM    dbo.aspnet_Profile
    WHERE   UserId IN
            (   SELECT  UserId
                FROM    dbo.aspnet_Users u
                WHERE   ApplicationId = @ApplicationId
                        AND (LastActivityDate <= @InactiveSinceDate)
                        AND (
                                (@ProfileAuthOptions = 2)
                             OR (@ProfileAuthOptions = 0 AND IsAnonymous = 1)
                             OR (@ProfileAuthOptions = 1 AND IsAnonymous = 0)
                            )
            )

    SELECT  @@ROWCOUNT
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Profile_GetNumberOfInactiveProfiles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_Profile_GetNumberOfInactiveProfiles
    @ApplicationName        nvarchar(256),
    @ProfileAuthOptions     int,
    @InactiveSinceDate      datetime
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
    BEGIN
        SELECT 0
        RETURN
    END

    SELECT  COUNT(*)
    FROM    dbo.aspnet_Users u, dbo.aspnet_Profile p
    WHERE   ApplicationId = @ApplicationId
        AND u.UserId = p.UserId
        AND (LastActivityDate <= @InactiveSinceDate)
        AND (
                (@ProfileAuthOptions = 2)
                OR (@ProfileAuthOptions = 0 AND IsAnonymous = 1)
                OR (@ProfileAuthOptions = 1 AND IsAnonymous = 0)
            )
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Profile_GetProfiles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_Profile_GetProfiles
    @ApplicationName        nvarchar(256),
    @ProfileAuthOptions     int,
    @PageIndex              int,
    @PageSize               int,
    @UserNameToMatch        nvarchar(256) = NULL,
    @InactiveSinceDate      datetime      = NULL
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN

    -- Set the page bounds
    DECLARE @PageLowerBound int
    DECLARE @PageUpperBound int
    DECLARE @TotalRecords   int
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table TO store the select results
    CREATE TABLE #PageIndexForUsers
    (
        IndexId int IDENTITY (0, 1) NOT NULL,
        UserId uniqueidentifier
    )

    -- Insert into our temp table
    INSERT INTO #PageIndexForUsers (UserId)
        SELECT  u.UserId
        FROM    dbo.aspnet_Users u, dbo.aspnet_Profile p
        WHERE   ApplicationId = @ApplicationId
            AND u.UserId = p.UserId
            AND (@InactiveSinceDate IS NULL OR LastActivityDate <= @InactiveSinceDate)
            AND (     (@ProfileAuthOptions = 2)
                   OR (@ProfileAuthOptions = 0 AND IsAnonymous = 1)
                   OR (@ProfileAuthOptions = 1 AND IsAnonymous = 0)
                 )
            AND (@UserNameToMatch IS NULL OR LoweredUserName LIKE LOWER(@UserNameToMatch))
        ORDER BY UserName

    SELECT  u.UserName, u.IsAnonymous, u.LastActivityDate, p.LastUpdatedDate,
            DATALENGTH(p.PropertyNames) + DATALENGTH(p.PropertyValuesString) + DATALENGTH(p.PropertyValuesBinary)
    FROM    dbo.aspnet_Users u, dbo.aspnet_Profile p, #PageIndexForUsers i
    WHERE   u.UserId = p.UserId AND p.UserId = i.UserId AND i.IndexId >= @PageLowerBound AND i.IndexId <= @PageUpperBound

    SELECT COUNT(*)
    FROM   #PageIndexForUsers

    DROP TABLE #PageIndexForUsers
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Profile_GetProperties]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_Profile_GetProperties
    @ApplicationName      nvarchar(256),
    @UserName             nvarchar(256),
    @CurrentTimeUtc       datetime
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM dbo.aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN

    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL

    SELECT @UserId = UserId
    FROM   dbo.aspnet_Users
    WHERE  ApplicationId = @ApplicationId AND LoweredUserName = LOWER(@UserName)

    IF (@UserId IS NULL)
        RETURN
    SELECT TOP 1 PropertyNames, PropertyValuesString, PropertyValuesBinary
    FROM         dbo.aspnet_Profile
    WHERE        UserId = @UserId

    IF (@@ROWCOUNT > 0)
    BEGIN
        UPDATE dbo.aspnet_Users
        SET    LastActivityDate=@CurrentTimeUtc
        WHERE  UserId = @UserId
    END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_RegisterSchemaVersion]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].aspnet_RegisterSchemaVersion
    @Feature                   nvarchar(128),
    @CompatibleSchemaVersion   nvarchar(128),
    @IsCurrentVersion          bit,
    @RemoveIncompatibleSchema  bit
AS
BEGIN
    IF( @RemoveIncompatibleSchema = 1 )
    BEGIN
        DELETE FROM dbo.aspnet_SchemaVersions WHERE Feature = LOWER( @Feature )
    END
    ELSE
    BEGIN
        IF( @IsCurrentVersion = 1 )
        BEGIN
            UPDATE dbo.aspnet_SchemaVersions
            SET IsCurrentVersion = 0
            WHERE Feature = LOWER( @Feature )
        END
    END

    INSERT  dbo.aspnet_SchemaVersions( Feature, CompatibleSchemaVersion, IsCurrentVersion )
    VALUES( LOWER( @Feature ), @CompatibleSchemaVersion, @IsCurrentVersion )
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Roles_CreateRole]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Roles_CreateRole
    @ApplicationName  nvarchar(256),
    @RoleName         nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
        BEGIN TRANSACTION
        SET @TranStarted = 1
    END
    ELSE
        SET @TranStarted = 0

    EXEC dbo.aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF (EXISTS(SELECT RoleId FROM dbo.aspnet_Roles WHERE LoweredRoleName = LOWER(@RoleName) AND ApplicationId = @ApplicationId))
    BEGIN
        SET @ErrorCode = 1
        GOTO Cleanup
    END

    INSERT INTO dbo.aspnet_Roles
                (ApplicationId, RoleName, LoweredRoleName)
         VALUES (@ApplicationId, @RoleName, LOWER(@RoleName))

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
        COMMIT TRANSACTION
    END

    RETURN(0)

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
        ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Roles_DeleteRole]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_Roles_DeleteRole
    @ApplicationName            nvarchar(256),
    @RoleName                   nvarchar(256),
    @DeleteOnlyIfRoleIsEmpty    bit
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(1)

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
        BEGIN TRANSACTION
        SET @TranStarted = 1
    END
    ELSE
        SET @TranStarted = 0

    DECLARE @RoleId   uniqueidentifier
    SELECT  @RoleId = NULL
    SELECT  @RoleId = RoleId FROM dbo.aspnet_Roles WHERE LoweredRoleName = LOWER(@RoleName) AND ApplicationId = @ApplicationId

    IF (@RoleId IS NULL)
    BEGIN
        SELECT @ErrorCode = 1
        GOTO Cleanup
    END
    IF (@DeleteOnlyIfRoleIsEmpty <> 0)
    BEGIN
        IF (EXISTS (SELECT RoleId FROM dbo.aspnet_UsersInRoles  WHERE @RoleId = RoleId))
        BEGIN
            SELECT @ErrorCode = 2
            GOTO Cleanup
        END
    END


    DELETE FROM dbo.aspnet_UsersInRoles  WHERE @RoleId = RoleId

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    DELETE FROM dbo.aspnet_Roles WHERE @RoleId = RoleId  AND ApplicationId = @ApplicationId

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
        COMMIT TRANSACTION
    END

    RETURN(0)

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
        ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Roles_GetAllRoles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_Roles_GetAllRoles (
    @ApplicationName           nvarchar(256))
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN
    SELECT RoleName
    FROM   dbo.aspnet_Roles WHERE ApplicationId = @ApplicationId
    ORDER BY RoleName
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Roles_RoleExists]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_Roles_RoleExists
    @ApplicationName  nvarchar(256),
    @RoleName         nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(0)
    IF (EXISTS (SELECT RoleName FROM dbo.aspnet_Roles WHERE LOWER(@RoleName) = LoweredRoleName AND ApplicationId = @ApplicationId ))
        RETURN(1)
    ELSE
        RETURN(0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Setup_RemoveAllRoleMembers]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].aspnet_Setup_RemoveAllRoleMembers
    @name   sysname
AS
BEGIN
    CREATE TABLE #aspnet_RoleMembers
    (
        Group_name      sysname,
        Group_id        smallint,
        Users_in_group  sysname,
        User_id         smallint
    )

    INSERT INTO #aspnet_RoleMembers
    EXEC sp_helpuser @name

    DECLARE @user_id smallint
    DECLARE @cmd nvarchar(500)
    DECLARE c1 cursor FORWARD_ONLY FOR
        SELECT User_id FROM #aspnet_RoleMembers

    OPEN c1

    FETCH c1 INTO @user_id
    WHILE (@@fetch_status = 0)
    BEGIN
        SET @cmd = 'EXEC sp_droprolemember ' + '''' + @name + ''', ''' + USER_NAME(@user_id) + ''''
        EXEC (@cmd)
        FETCH c1 INTO @user_id
    END

    CLOSE c1
    DEALLOCATE c1
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Setup_RestorePermissions]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].aspnet_Setup_RestorePermissions
    @name   sysname
AS
BEGIN
    DECLARE @object sysname
    DECLARE @protectType char(10)
    DECLARE @action varchar(60)
    DECLARE @grantee sysname
    DECLARE @cmd nvarchar(500)
	IF(OBJECT_ID('tempdb.#aspnet_Permissions') IS NULL)
	   BEGIN
		  CREATE TABLE #aspnet_Permissions
		   (
			 Owner     sysname,
		 Object    sysname,  
		 Grantee   sysname,  
		 Grantor   sysname,  
		 ProtectType char(10),  
		 [Action]    varchar(60),  
		 [Column]    sysname
		  )
	   END
    DECLARE c1 cursor FORWARD_ONLY FOR
        SELECT Object, ProtectType, [Action], Grantee FROM #aspnet_Permissions where Object = @name

    OPEN c1

    FETCH c1 INTO @object, @protectType, @action, @grantee
    WHILE (@@fetch_status = 0)
    BEGIN
        SET @cmd = @protectType + ' ' + @action + ' on ' + @object + ' TO [' + @grantee + ']'
        EXEC (@cmd)
        FETCH c1 INTO @object, @protectType, @action, @grantee
    END

    CLOSE c1
    DEALLOCATE c1
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_UnRegisterSchemaVersion]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].aspnet_UnRegisterSchemaVersion
    @Feature                   nvarchar(128),
    @CompatibleSchemaVersion   nvarchar(128)
AS
BEGIN
    DELETE FROM dbo.aspnet_SchemaVersions
        WHERE   Feature = LOWER(@Feature) AND @CompatibleSchemaVersion = CompatibleSchemaVersion
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Users_CreateUser]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].aspnet_Users_CreateUser
    @ApplicationId    uniqueidentifier,
    @UserName         nvarchar(256),
    @IsUserAnonymous  bit,
    @LastActivityDate DATETIME,
    @UserId           uniqueidentifier OUTPUT
AS
BEGIN
    IF( @UserId IS NULL )
        SELECT @UserId = NEWID()
    ELSE
    BEGIN
        IF( EXISTS( SELECT UserId FROM dbo.aspnet_Users
                    WHERE @UserId = UserId ) )
            RETURN -1
    END

    INSERT dbo.aspnet_Users (ApplicationId, UserId, UserName, LoweredUserName, IsAnonymous, LastActivityDate)
    VALUES (@ApplicationId, @UserId, @UserName, LOWER(@UserName), @IsUserAnonymous, @LastActivityDate)

    RETURN 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Users_DeleteUser]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].aspnet_Users_DeleteUser
    @ApplicationName  nvarchar(256),
    @UserName         nvarchar(256),
    @TablesToDeleteFrom int,
    @NumTablesDeletedFrom int OUTPUT
AS
BEGIN
    DECLARE @UserId               uniqueidentifier
    SELECT  @UserId               = NULL
    SELECT  @NumTablesDeletedFrom = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
	SET @TranStarted = 0

    DECLARE @ErrorCode   int
    DECLARE @RowCount    int

    SET @ErrorCode = 0
    SET @RowCount  = 0

    SELECT  @UserId = u.UserId
    FROM    dbo.aspnet_Users u, dbo.aspnet_Applications a
    WHERE   u.LoweredUserName       = LOWER(@UserName)
        AND u.ApplicationId         = a.ApplicationId
        AND LOWER(@ApplicationName) = a.LoweredApplicationName

    IF (@UserId IS NULL)
    BEGIN
        GOTO Cleanup
    END

    -- Delete from Membership table if (@TablesToDeleteFrom & 1) is set
    IF ((@TablesToDeleteFrom & 1) <> 0 AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_MembershipUsers') AND (type = 'V'))))
    BEGIN
        DELETE FROM dbo.aspnet_Membership WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
               @RowCount = @@ROWCOUNT

        IF( @ErrorCode <> 0 )
            GOTO Cleanup

        IF (@RowCount <> 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    -- Delete from aspnet_UsersInRoles table if (@TablesToDeleteFrom & 2) is set
    IF ((@TablesToDeleteFrom & 2) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_UsersInRoles') AND (type = 'V'))) )
    BEGIN
        DELETE FROM dbo.aspnet_UsersInRoles WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
                @RowCount = @@ROWCOUNT

        IF( @ErrorCode <> 0 )
            GOTO Cleanup

        IF (@RowCount <> 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    -- Delete from aspnet_Profile table if (@TablesToDeleteFrom & 4) is set
    IF ((@TablesToDeleteFrom & 4) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_Profiles') AND (type = 'V'))) )
    BEGIN
        DELETE FROM dbo.aspnet_Profile WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
                @RowCount = @@ROWCOUNT

        IF( @ErrorCode <> 0 )
            GOTO Cleanup

        IF (@RowCount <> 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    -- Delete from aspnet_PersonalizationPerUser table if (@TablesToDeleteFrom & 8) is set
    IF ((@TablesToDeleteFrom & 8) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_WebPartState_User') AND (type = 'V'))) )
    BEGIN
        DELETE FROM dbo.aspnet_PersonalizationPerUser WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
                @RowCount = @@ROWCOUNT

        IF( @ErrorCode <> 0 )
            GOTO Cleanup

        IF (@RowCount <> 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    -- Delete from aspnet_Users table if (@TablesToDeleteFrom & 1,2,4 & 8) are all set
    IF ((@TablesToDeleteFrom & 1) <> 0 AND
        (@TablesToDeleteFrom & 2) <> 0 AND
        (@TablesToDeleteFrom & 4) <> 0 AND
        (@TablesToDeleteFrom & 8) <> 0 AND
        (EXISTS (SELECT UserId FROM dbo.aspnet_Users WHERE @UserId = UserId)))
    BEGIN
        DELETE FROM dbo.aspnet_Users WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
                @RowCount = @@ROWCOUNT

        IF( @ErrorCode <> 0 )
            GOTO Cleanup

        IF (@RowCount <> 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    IF( @TranStarted = 1 )
    BEGIN
	    SET @TranStarted = 0
	    COMMIT TRANSACTION
    END

    RETURN 0

Cleanup:
    SET @NumTablesDeletedFrom = 0

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
	    ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_UsersInRoles_AddUsersToRoles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_UsersInRoles_AddUsersToRoles
	@ApplicationName  nvarchar(256),
	@UserNames		  nvarchar(4000),
	@RoleNames		  nvarchar(4000),
	@CurrentTimeUtc   datetime
AS
BEGIN
	DECLARE @AppId uniqueidentifier
	SELECT  @AppId = NULL
	SELECT  @AppId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
	IF (@AppId IS NULL)
		RETURN(2)
	DECLARE @TranStarted   bit
	SET @TranStarted = 0

	IF( @@TRANCOUNT = 0 )
	BEGIN
		BEGIN TRANSACTION
		SET @TranStarted = 1
	END

	DECLARE @tbNames	table(Name nvarchar(256) NOT NULL PRIMARY KEY)
	DECLARE @tbRoles	table(RoleId uniqueidentifier NOT NULL PRIMARY KEY)
	DECLARE @tbUsers	table(UserId uniqueidentifier NOT NULL PRIMARY KEY)
	DECLARE @Num		int
	DECLARE @Pos		int
	DECLARE @NextPos	int
	DECLARE @Name		nvarchar(256)

	SET @Num = 0
	SET @Pos = 1
	WHILE(@Pos <= LEN(@RoleNames))
	BEGIN
		SELECT @NextPos = CHARINDEX(N',', @RoleNames,  @Pos)
		IF (@NextPos = 0 OR @NextPos IS NULL)
			SELECT @NextPos = LEN(@RoleNames) + 1
		SELECT @Name = RTRIM(LTRIM(SUBSTRING(@RoleNames, @Pos, @NextPos - @Pos)))
		SELECT @Pos = @NextPos+1

		INSERT INTO @tbNames VALUES (@Name)
		SET @Num = @Num + 1
	END

	INSERT INTO @tbRoles
	  SELECT RoleId
	  FROM   dbo.aspnet_Roles ar, @tbNames t
	  WHERE  LOWER(t.Name) = ar.LoweredRoleName AND ar.ApplicationId = @AppId

	IF (@@ROWCOUNT <> @Num)
	BEGIN
		SELECT TOP 1 Name
		FROM   @tbNames
		WHERE  LOWER(Name) NOT IN (SELECT ar.LoweredRoleName FROM dbo.aspnet_Roles ar,  @tbRoles r WHERE r.RoleId = ar.RoleId)
		IF( @TranStarted = 1 )
			ROLLBACK TRANSACTION
		RETURN(2)
	END

	DELETE FROM @tbNames WHERE 1=1
	SET @Num = 0
	SET @Pos = 1

	WHILE(@Pos <= LEN(@UserNames))
	BEGIN
		SELECT @NextPos = CHARINDEX(N',', @UserNames,  @Pos)
		IF (@NextPos = 0 OR @NextPos IS NULL)
			SELECT @NextPos = LEN(@UserNames) + 1
		SELECT @Name = RTRIM(LTRIM(SUBSTRING(@UserNames, @Pos, @NextPos - @Pos)))
		SELECT @Pos = @NextPos+1

		INSERT INTO @tbNames VALUES (@Name)
		SET @Num = @Num + 1
	END

	INSERT INTO @tbUsers
	  SELECT UserId
	  FROM   dbo.aspnet_Users ar, @tbNames t
	  WHERE  LOWER(t.Name) = ar.LoweredUserName AND ar.ApplicationId = @AppId

	IF (@@ROWCOUNT <> @Num)
	BEGIN
		DELETE FROM @tbNames
		WHERE LOWER(Name) IN (SELECT LoweredUserName FROM dbo.aspnet_Users au,  @tbUsers u WHERE au.UserId = u.UserId)

		INSERT dbo.aspnet_Users (ApplicationId, UserId, UserName, LoweredUserName, IsAnonymous, LastActivityDate)
		  SELECT @AppId, NEWID(), Name, LOWER(Name), 0, @CurrentTimeUtc
		  FROM   @tbNames

		INSERT INTO @tbUsers
		  SELECT  UserId
		  FROM	dbo.aspnet_Users au, @tbNames t
		  WHERE   LOWER(t.Name) = au.LoweredUserName AND au.ApplicationId = @AppId
	END

	IF (EXISTS (SELECT * FROM dbo.aspnet_UsersInRoles ur, @tbUsers tu, @tbRoles tr WHERE tu.UserId = ur.UserId AND tr.RoleId = ur.RoleId))
	BEGIN
		SELECT TOP 1 UserName, RoleName
		FROM		 dbo.aspnet_UsersInRoles ur, @tbUsers tu, @tbRoles tr, aspnet_Users u, aspnet_Roles r
		WHERE		u.UserId = tu.UserId AND r.RoleId = tr.RoleId AND tu.UserId = ur.UserId AND tr.RoleId = ur.RoleId

		IF( @TranStarted = 1 )
			ROLLBACK TRANSACTION
		RETURN(3)
	END

	INSERT INTO dbo.aspnet_UsersInRoles (UserId, RoleId)
	SELECT UserId, RoleId
	FROM @tbUsers, @tbRoles

	IF( @TranStarted = 1 )
		COMMIT TRANSACTION
	RETURN(0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_UsersInRoles_FindUsersInRole]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_UsersInRoles_FindUsersInRole
    @ApplicationName  nvarchar(256),
    @RoleName         nvarchar(256),
    @UserNameToMatch  nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(1)
     DECLARE @RoleId uniqueidentifier
     SELECT  @RoleId = NULL

     SELECT  @RoleId = RoleId
     FROM    dbo.aspnet_Roles
     WHERE   LOWER(@RoleName) = LoweredRoleName AND ApplicationId = @ApplicationId

     IF (@RoleId IS NULL)
         RETURN(1)

    SELECT u.UserName
    FROM   dbo.aspnet_Users u, dbo.aspnet_UsersInRoles ur
    WHERE  u.UserId = ur.UserId AND @RoleId = ur.RoleId AND u.ApplicationId = @ApplicationId AND LoweredUserName LIKE LOWER(@UserNameToMatch)
    ORDER BY u.UserName
    RETURN(0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_UsersInRoles_GetRolesForUser]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_UsersInRoles_GetRolesForUser
    @ApplicationName  nvarchar(256),
    @UserName         nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(1)
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL

    SELECT  @UserId = UserId
    FROM    dbo.aspnet_Users
    WHERE   LoweredUserName = LOWER(@UserName) AND ApplicationId = @ApplicationId

    IF (@UserId IS NULL)
        RETURN(1)

    SELECT r.RoleName
    FROM   dbo.aspnet_Roles r, dbo.aspnet_UsersInRoles ur
    WHERE  r.RoleId = ur.RoleId AND r.ApplicationId = @ApplicationId AND ur.UserId = @UserId
    ORDER BY r.RoleName
    RETURN (0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_UsersInRoles_GetUsersInRoles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_UsersInRoles_GetUsersInRoles
    @ApplicationName  nvarchar(256),
    @RoleName         nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(1)
     DECLARE @RoleId uniqueidentifier
     SELECT  @RoleId = NULL

     SELECT  @RoleId = RoleId
     FROM    dbo.aspnet_Roles
     WHERE   LOWER(@RoleName) = LoweredRoleName AND ApplicationId = @ApplicationId

     IF (@RoleId IS NULL)
         RETURN(1)

    SELECT u.UserName
    FROM   dbo.aspnet_Users u, dbo.aspnet_UsersInRoles ur
    WHERE  u.UserId = ur.UserId AND @RoleId = ur.RoleId AND u.ApplicationId = @ApplicationId
    ORDER BY u.UserName
    RETURN(0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_UsersInRoles_IsUserInRole]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_UsersInRoles_IsUserInRole
    @ApplicationName  nvarchar(256),
    @UserName         nvarchar(256),
    @RoleName         nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(2)
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL
    DECLARE @RoleId uniqueidentifier
    SELECT  @RoleId = NULL

    SELECT  @UserId = UserId
    FROM    dbo.aspnet_Users
    WHERE   LoweredUserName = LOWER(@UserName) AND ApplicationId = @ApplicationId

    IF (@UserId IS NULL)
        RETURN(2)

    SELECT  @RoleId = RoleId
    FROM    dbo.aspnet_Roles
    WHERE   LoweredRoleName = LOWER(@RoleName) AND ApplicationId = @ApplicationId

    IF (@RoleId IS NULL)
        RETURN(3)

    IF (EXISTS( SELECT * FROM dbo.aspnet_UsersInRoles WHERE  UserId = @UserId AND RoleId = @RoleId))
        RETURN(1)
    ELSE
        RETURN(0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_UsersInRoles_RemoveUsersFromRoles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_UsersInRoles_RemoveUsersFromRoles
	@ApplicationName  nvarchar(256),
	@UserNames		  nvarchar(4000),
	@RoleNames		  nvarchar(4000)
AS
BEGIN
	DECLARE @AppId uniqueidentifier
	SELECT  @AppId = NULL
	SELECT  @AppId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
	IF (@AppId IS NULL)
		RETURN(2)


	DECLARE @TranStarted   bit
	SET @TranStarted = 0

	IF( @@TRANCOUNT = 0 )
	BEGIN
		BEGIN TRANSACTION
		SET @TranStarted = 1
	END

	DECLARE @tbNames  table(Name nvarchar(256) NOT NULL PRIMARY KEY)
	DECLARE @tbRoles  table(RoleId uniqueidentifier NOT NULL PRIMARY KEY)
	DECLARE @tbUsers  table(UserId uniqueidentifier NOT NULL PRIMARY KEY)
	DECLARE @Num	  int
	DECLARE @Pos	  int
	DECLARE @NextPos  int
	DECLARE @Name	  nvarchar(256)
	DECLARE @CountAll int
	DECLARE @CountU	  int
	DECLARE @CountR	  int


	SET @Num = 0
	SET @Pos = 1
	WHILE(@Pos <= LEN(@RoleNames))
	BEGIN
		SELECT @NextPos = CHARINDEX(N',', @RoleNames,  @Pos)
		IF (@NextPos = 0 OR @NextPos IS NULL)
			SELECT @NextPos = LEN(@RoleNames) + 1
		SELECT @Name = RTRIM(LTRIM(SUBSTRING(@RoleNames, @Pos, @NextPos - @Pos)))
		SELECT @Pos = @NextPos+1

		INSERT INTO @tbNames VALUES (@Name)
		SET @Num = @Num + 1
	END

	INSERT INTO @tbRoles
	  SELECT RoleId
	  FROM   dbo.aspnet_Roles ar, @tbNames t
	  WHERE  LOWER(t.Name) = ar.LoweredRoleName AND ar.ApplicationId = @AppId
	SELECT @CountR = @@ROWCOUNT

	IF (@CountR <> @Num)
	BEGIN
		SELECT TOP 1 N'', Name
		FROM   @tbNames
		WHERE  LOWER(Name) NOT IN (SELECT ar.LoweredRoleName FROM dbo.aspnet_Roles ar,  @tbRoles r WHERE r.RoleId = ar.RoleId)
		IF( @TranStarted = 1 )
			ROLLBACK TRANSACTION
		RETURN(2)
	END


	DELETE FROM @tbNames WHERE 1=1
	SET @Num = 0
	SET @Pos = 1


	WHILE(@Pos <= LEN(@UserNames))
	BEGIN
		SELECT @NextPos = CHARINDEX(N',', @UserNames,  @Pos)
		IF (@NextPos = 0 OR @NextPos IS NULL)
			SELECT @NextPos = LEN(@UserNames) + 1
		SELECT @Name = RTRIM(LTRIM(SUBSTRING(@UserNames, @Pos, @NextPos - @Pos)))
		SELECT @Pos = @NextPos+1

		INSERT INTO @tbNames VALUES (@Name)
		SET @Num = @Num + 1
	END

	INSERT INTO @tbUsers
	  SELECT UserId
	  FROM   dbo.aspnet_Users ar, @tbNames t
	  WHERE  LOWER(t.Name) = ar.LoweredUserName AND ar.ApplicationId = @AppId

	SELECT @CountU = @@ROWCOUNT
	IF (@CountU <> @Num)
	BEGIN
		SELECT TOP 1 Name, N''
		FROM   @tbNames
		WHERE  LOWER(Name) NOT IN (SELECT au.LoweredUserName FROM dbo.aspnet_Users au,  @tbUsers u WHERE u.UserId = au.UserId)

		IF( @TranStarted = 1 )
			ROLLBACK TRANSACTION
		RETURN(1)
	END

	SELECT  @CountAll = COUNT(*)
	FROM	dbo.aspnet_UsersInRoles ur, @tbUsers u, @tbRoles r
	WHERE   ur.UserId = u.UserId AND ur.RoleId = r.RoleId

	IF (@CountAll <> @CountU * @CountR)
	BEGIN
		SELECT TOP 1 UserName, RoleName
		FROM		 @tbUsers tu, @tbRoles tr, dbo.aspnet_Users u, dbo.aspnet_Roles r
		WHERE		 u.UserId = tu.UserId AND r.RoleId = tr.RoleId AND
					 tu.UserId NOT IN (SELECT ur.UserId FROM dbo.aspnet_UsersInRoles ur WHERE ur.RoleId = tr.RoleId) AND
					 tr.RoleId NOT IN (SELECT ur.RoleId FROM dbo.aspnet_UsersInRoles ur WHERE ur.UserId = tu.UserId)
		IF( @TranStarted = 1 )
			ROLLBACK TRANSACTION
		RETURN(3)
	END

	DELETE FROM dbo.aspnet_UsersInRoles
	WHERE UserId IN (SELECT UserId FROM @tbUsers)
	  AND RoleId IN (SELECT RoleId FROM @tbRoles)
	IF( @TranStarted = 1 )
		COMMIT TRANSACTION
	RETURN(0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_WebEvent_LogEvent]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_WebEvent_LogEvent
        @EventId         char(32),
        @EventTimeUtc    datetime,
        @EventTime       datetime,
        @EventType       nvarchar(256),
        @EventSequence   decimal(19,0),
        @EventOccurrence decimal(19,0),
        @EventCode       int,
        @EventDetailCode int,
        @Message         nvarchar(1024),
        @ApplicationPath nvarchar(256),
        @ApplicationVirtualPath nvarchar(256),
        @MachineName    nvarchar(256),
        @RequestUrl      nvarchar(1024),
        @ExceptionType   nvarchar(256),
        @Details         ntext
AS
BEGIN
    INSERT
        dbo.aspnet_WebEvent_Events
        (
            EventId,
            EventTimeUtc,
            EventTime,
            EventType,
            EventSequence,
            EventOccurrence,
            EventCode,
            EventDetailCode,
            Message,
            ApplicationPath,
            ApplicationVirtualPath,
            MachineName,
            RequestUrl,
            ExceptionType,
            Details
        )
    VALUES
    (
        @EventId,
        @EventTimeUtc,
        @EventTime,
        @EventType,
        @EventSequence,
        @EventOccurrence,
        @EventCode,
        @EventDetailCode,
        @Message,
        @ApplicationPath,
        @ApplicationVirtualPath,
        @MachineName,
        @RequestUrl,
        @ExceptionType,
        @Details
    )
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ExecuteView]...';


GO

CREATE PROCEDURE [dbo].[ExecuteView]
	@View varchar(50),
	@Schema bit = 0,
	@Export bit = 0,
	@SortColumn varchar(50), -- = 'Phenomenon',
	@SortOrder varchar(4), -- = 'DESC',
	@PageNumber int, --= 1,
	@PageSize int, -- 20,
	@Filter varchar(5000) = '' 
AS

DECLARE @sql NVARCHAR(MAX),
		@paramlist nvarchar(4000);

 SET @sql = ' SET ANSI_WARNINGS OFF SET NOCOUNT ON; ' + CHAR(13)
 
  IF @Schema = 0
   BEGIN
   SET @sql = ' WITH Paging AS (SELECT * ,ROW_NUMBER() OVER (ORDER BY ['+@SortColumn+'] '+ @SortOrder +') AS RowNo FROM  '
   END
  ELSE
   BEGIN
	SET @sql = ' WITH Paging AS (SELECT TOP 1 *,2 As RowNo FROM  '
   END
  
 
 SET @sql = @sql + @View  + ' WHERE 1 = 1 '
 
  IF LEN(@Filter) > 0
  BEGIN
	SET @Sql = @Sql +  @Filter
  END
 
SET  @Sql = @Sql  + ')'  + CHAR(13)
 SET @sql = @sql + ' Select *,(select COUNT(*) from Paging) AS CNT from Paging ' + CHAR(13)
 IF @Export = 0
   BEGIN
	SET @sql = @sql + ' Where RowNo between @PageNumber and @PageNumber + @PageSize '
   END
   


SELECT @paramlist = '@PageNumber int,
					 @PageSize int';
				
 
exec sp_executesql @Sql,@paramlist,
				   @PageNumber,
				   @PageSize
GO
PRINT N'Creating [dbo].[progress_Status_Raw]...';


GO
-- =============================================
-- Author:		Wim Hugo
-- Create date: 20-06-2014
-- Description:	Create Progress Table - Raw Data
-- =============================================

--> Changed 2.0.0.3 20160503 TimPN
--Renamed SensorProcedure to Sensor
--< Changed 2.0.0.3 20160503 TimPN

CREATE PROCEDURE progress_Status_Raw 
    -- Add the parameters for the stored procedure here

AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON;
    
    DROP Table dbo.Progress
    
    CREATE TABLE [dbo].Progress(
    [ImportBatchID] [int],
    [StartDate] [datetime],
    [EndDate] [datetime],
    [DateUploaded] [datetime],
    [Observations] [bigint],
    [UserId] [uniqueidentifier],
    [SensorID] [uniqueidentifier],
--> Changed 2.0.0.3 20160421 TimPN
--    [PhenonmenonOfferingID] [uniqueidentifier]
    [PhenomenonOfferingID] [uniqueidentifier]
--< Changed 2.0.0.3 20160421 TimPN
    )

    -- Insert statements for procedure here
    INSERT INTO [dbo].[Progress]
    (
    [ImportBatchID],
    [StartDate],
    [EndDate],
    [DateUploaded],
    [Observations],
    [UserId],
    [SensorID],
--> Changed 2.0.0.3 20160421 TimPN
--    [PhenonmenonOfferingID]
    [PhenomenonOfferingID]
--< Changed 2.0.0.3 20160421 TimPN
    )
   
    SELECT     
        ImportBatchID, 
        MIN(ValueDate) AS StartDate, 
        MAX(ValueDate) AS EndDate, 
        MIN(AddedDate) AS DateUploaded, 
        COUNT(ID) AS Observations, 
        UserId, 
        SensorID, 
--> Changed 2.0.0.3 20160421 TimPN
--        PhenonmenonOfferingID
        PhenomenonOfferingID
--< Changed 2.0.0.3 20160421 TimPN
FROM    dbo.Observation
--> Changed 2.0.0.3 20160421 TimPN
--GROUP BY PhenonmenonOfferingID, PhenonmenonUOMID, ImportBatchID, UserId, SensorID
GROUP BY PhenomenonOfferingID, PhenomenonUOMID, ImportBatchID, UserId, SensorID
--< Changed 2.0.0.3 20160421 TimPN
END
GO
PRINT N'Creating [dbo].[aspnet_Membership_CreateUser]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_CreateUser
    @ApplicationName                        nvarchar(256),
    @UserName                               nvarchar(256),
    @Password                               nvarchar(128),
    @PasswordSalt                           nvarchar(128),
    @Email                                  nvarchar(256),
    @PasswordQuestion                       nvarchar(256),
    @PasswordAnswer                         nvarchar(128),
    @IsApproved                             bit,
    @CurrentTimeUtc                         datetime,
    @CreateDate                             datetime = NULL,
    @UniqueEmail                            int      = 0,
    @PasswordFormat                         int      = 0,
    @UserId                                 uniqueidentifier OUTPUT
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL

    DECLARE @NewUserId uniqueidentifier
    SELECT @NewUserId = NULL

    DECLARE @IsLockedOut bit
    SET @IsLockedOut = 0

    DECLARE @LastLockoutDate  datetime
    SET @LastLockoutDate = CONVERT( datetime, '17540101', 112 )

    DECLARE @FailedPasswordAttemptCount int
    SET @FailedPasswordAttemptCount = 0

    DECLARE @FailedPasswordAttemptWindowStart  datetime
    SET @FailedPasswordAttemptWindowStart = CONVERT( datetime, '17540101', 112 )

    DECLARE @FailedPasswordAnswerAttemptCount int
    SET @FailedPasswordAnswerAttemptCount = 0

    DECLARE @FailedPasswordAnswerAttemptWindowStart  datetime
    SET @FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 )

    DECLARE @NewUserCreated bit
    DECLARE @ReturnValue   int
    SET @ReturnValue = 0

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    EXEC dbo.aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    SET @CreateDate = @CurrentTimeUtc

    SELECT  @NewUserId = UserId FROM dbo.aspnet_Users WHERE LOWER(@UserName) = LoweredUserName AND @ApplicationId = ApplicationId
    IF ( @NewUserId IS NULL )
    BEGIN
        SET @NewUserId = @UserId
        EXEC @ReturnValue = dbo.aspnet_Users_CreateUser @ApplicationId, @UserName, 0, @CreateDate, @NewUserId OUTPUT
        SET @NewUserCreated = 1
    END
    ELSE
    BEGIN
        SET @NewUserCreated = 0
        IF( @NewUserId <> @UserId AND @UserId IS NOT NULL )
        BEGIN
            SET @ErrorCode = 6
            GOTO Cleanup
        END
    END

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @ReturnValue = -1 )
    BEGIN
        SET @ErrorCode = 10
        GOTO Cleanup
    END

    IF ( EXISTS ( SELECT UserId
                  FROM   dbo.aspnet_Membership
                  WHERE  @NewUserId = UserId ) )
    BEGIN
        SET @ErrorCode = 6
        GOTO Cleanup
    END

    SET @UserId = @NewUserId

    IF (@UniqueEmail = 1)
    BEGIN
        IF (EXISTS (SELECT *
                    FROM  dbo.aspnet_Membership m WITH ( UPDLOCK, HOLDLOCK )
                    WHERE ApplicationId = @ApplicationId AND LoweredEmail = LOWER(@Email)))
        BEGIN
            SET @ErrorCode = 7
            GOTO Cleanup
        END
    END

    IF (@NewUserCreated = 0)
    BEGIN
        UPDATE dbo.aspnet_Users
        SET    LastActivityDate = @CreateDate
        WHERE  @UserId = UserId
        IF( @@ERROR <> 0 )
        BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END
    END

    INSERT INTO dbo.aspnet_Membership
                ( ApplicationId,
                  UserId,
                  Password,
                  PasswordSalt,
                  Email,
                  LoweredEmail,
                  PasswordQuestion,
                  PasswordAnswer,
                  PasswordFormat,
                  IsApproved,
                  IsLockedOut,
                  CreateDate,
                  LastLoginDate,
                  LastPasswordChangedDate,
                  LastLockoutDate,
                  FailedPasswordAttemptCount,
                  FailedPasswordAttemptWindowStart,
                  FailedPasswordAnswerAttemptCount,
                  FailedPasswordAnswerAttemptWindowStart )
         VALUES ( @ApplicationId,
                  @UserId,
                  @Password,
                  @PasswordSalt,
                  @Email,
                  LOWER(@Email),
                  @PasswordQuestion,
                  @PasswordAnswer,
                  @PasswordFormat,
                  @IsApproved,
                  @IsLockedOut,
                  @CreateDate,
                  @CreateDate,
                  @CreateDate,
                  @LastLockoutDate,
                  @FailedPasswordAttemptCount,
                  @FailedPasswordAttemptWindowStart,
                  @FailedPasswordAnswerAttemptCount,
                  @FailedPasswordAnswerAttemptWindowStart )

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
	    SET @TranStarted = 0
	    COMMIT TRANSACTION
    END

    RETURN 0

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationPerUser_SetPageSettings]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationPerUser_SetPageSettings (
    @ApplicationName  NVARCHAR(256),
    @UserName         NVARCHAR(256),
    @Path             NVARCHAR(256),
    @PageSettings     IMAGE,
    @CurrentTimeUtc   DATETIME)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER
    DECLARE @UserId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL
    SELECT @UserId = NULL

    EXEC dbo.aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    SELECT @PathId = u.PathId FROM dbo.aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        EXEC dbo.aspnet_Paths_CreatePath @ApplicationId, @Path, @PathId OUTPUT
    END

    SELECT @UserId = u.UserId FROM dbo.aspnet_Users u WHERE u.ApplicationId = @ApplicationId AND u.LoweredUserName = LOWER(@UserName)
    IF (@UserId IS NULL)
    BEGIN
        EXEC dbo.aspnet_Users_CreateUser @ApplicationId, @UserName, 0, @CurrentTimeUtc, @UserId OUTPUT
    END

    UPDATE   dbo.aspnet_Users WITH (ROWLOCK)
    SET      LastActivityDate = @CurrentTimeUtc
    WHERE    UserId = @UserId
    IF (@@ROWCOUNT = 0) -- Username not found
        RETURN

    IF (EXISTS(SELECT PathId FROM dbo.aspnet_PersonalizationPerUser WHERE UserId = @UserId AND PathId = @PathId))
        UPDATE dbo.aspnet_PersonalizationPerUser SET PageSettings = @PageSettings, LastUpdatedDate = @CurrentTimeUtc WHERE UserId = @UserId AND PathId = @PathId
    ELSE
        INSERT INTO dbo.aspnet_PersonalizationPerUser(UserId, PathId, PageSettings, LastUpdatedDate) VALUES (@UserId, @PathId, @PageSettings, @CurrentTimeUtc)
    RETURN 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Profile_DeleteProfiles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_Profile_DeleteProfiles
    @ApplicationName        nvarchar(256),
    @UserNames              nvarchar(4000)
AS
BEGIN
    DECLARE @UserName     nvarchar(256)
    DECLARE @CurrentPos   int
    DECLARE @NextPos      int
    DECLARE @NumDeleted   int
    DECLARE @DeletedUser  int
    DECLARE @TranStarted  bit
    DECLARE @ErrorCode    int

    SET @ErrorCode = 0
    SET @CurrentPos = 1
    SET @NumDeleted = 0
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
        BEGIN TRANSACTION
        SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    WHILE (@CurrentPos <= LEN(@UserNames))
    BEGIN
        SELECT @NextPos = CHARINDEX(N',', @UserNames,  @CurrentPos)
        IF (@NextPos = 0 OR @NextPos IS NULL)
            SELECT @NextPos = LEN(@UserNames) + 1

        SELECT @UserName = SUBSTRING(@UserNames, @CurrentPos, @NextPos - @CurrentPos)
        SELECT @CurrentPos = @NextPos+1

        IF (LEN(@UserName) > 0)
        BEGIN
            SELECT @DeletedUser = 0
            EXEC dbo.aspnet_Users_DeleteUser @ApplicationName, @UserName, 4, @DeletedUser OUTPUT
            IF( @@ERROR <> 0 )
            BEGIN
                SET @ErrorCode = -1
                GOTO Cleanup
            END
            IF (@DeletedUser <> 0)
                SELECT @NumDeleted = @NumDeleted + 1
        END
    END
    SELECT @NumDeleted
    IF (@TranStarted = 1)
    BEGIN
    	SET @TranStarted = 0
    	COMMIT TRANSACTION
    END
    SET @TranStarted = 0

    RETURN 0

Cleanup:
    IF (@TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END
    RETURN @ErrorCode
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Profile_SetProperties]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_Profile_SetProperties
    @ApplicationName        nvarchar(256),
    @PropertyNames          ntext,
    @PropertyValuesString   ntext,
    @PropertyValuesBinary   image,
    @UserName               nvarchar(256),
    @IsUserAnonymous        bit,
    @CurrentTimeUtc         datetime
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
       BEGIN TRANSACTION
       SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    EXEC dbo.aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    DECLARE @UserId uniqueidentifier
    DECLARE @LastActivityDate datetime
    SELECT  @UserId = NULL
    SELECT  @LastActivityDate = @CurrentTimeUtc

    SELECT @UserId = UserId
    FROM   dbo.aspnet_Users
    WHERE  ApplicationId = @ApplicationId AND LoweredUserName = LOWER(@UserName)
    IF (@UserId IS NULL)
        EXEC dbo.aspnet_Users_CreateUser @ApplicationId, @UserName, @IsUserAnonymous, @LastActivityDate, @UserId OUTPUT

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    UPDATE dbo.aspnet_Users
    SET    LastActivityDate=@CurrentTimeUtc
    WHERE  UserId = @UserId

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF (EXISTS( SELECT *
               FROM   dbo.aspnet_Profile
               WHERE  UserId = @UserId))
        UPDATE dbo.aspnet_Profile
        SET    PropertyNames=@PropertyNames, PropertyValuesString = @PropertyValuesString,
               PropertyValuesBinary = @PropertyValuesBinary, LastUpdatedDate=@CurrentTimeUtc
        WHERE  UserId = @UserId
    ELSE
        INSERT INTO dbo.aspnet_Profile(UserId, PropertyNames, PropertyValuesString, PropertyValuesBinary, LastUpdatedDate)
             VALUES (@UserId, @PropertyNames, @PropertyValuesString, @PropertyValuesBinary, @CurrentTimeUtc)

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
    	SET @TranStarted = 0
    	COMMIT TRANSACTION
    END

    RETURN 0

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_CheckSchemaVersion] TO [aspnet_Membership_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_CheckSchemaVersion] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_CheckSchemaVersion] TO [aspnet_Profile_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_CheckSchemaVersion] TO [aspnet_Profile_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_CheckSchemaVersion] TO [aspnet_Roles_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_CheckSchemaVersion] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_CheckSchemaVersion] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_CheckSchemaVersion] TO [aspnet_Personalization_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_CheckSchemaVersion] TO [aspnet_WebEvent_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_ChangePasswordQuestionAndAnswer] TO [aspnet_Membership_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_CreateUser] TO [aspnet_Membership_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_FindUsersByEmail] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_FindUsersByName] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetAllUsers] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetNumberOfUsersOnline] TO [aspnet_Membership_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetNumberOfUsersOnline] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetPassword] TO [aspnet_Membership_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetPasswordWithFormat] TO [aspnet_Membership_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetUserByEmail] TO [aspnet_Membership_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetUserByEmail] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetUserByName] TO [aspnet_Membership_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetUserByName] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetUserByUserId] TO [aspnet_Membership_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetUserByUserId] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_ResetPassword] TO [aspnet_Membership_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_SetPassword] TO [aspnet_Membership_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_UnlockUser] TO [aspnet_Membership_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_UpdateUser] TO [aspnet_Membership_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_UpdateUserInfo] TO [aspnet_Membership_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Paths_CreatePath] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Personalization_GetApplicationId] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationAdministration_DeleteAllState] TO [aspnet_Personalization_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationAdministration_FindState] TO [aspnet_Personalization_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationAdministration_GetCountOfState] TO [aspnet_Personalization_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationAdministration_ResetSharedState] TO [aspnet_Personalization_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationAdministration_ResetUserState] TO [aspnet_Personalization_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationAllUsers_GetPageSettings] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationAllUsers_ResetPageSettings] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationAllUsers_SetPageSettings] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationPerUser_GetPageSettings] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationPerUser_ResetPageSettings] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationPerUser_SetPageSettings] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Profile_DeleteInactiveProfiles] TO [aspnet_Profile_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Profile_DeleteProfiles] TO [aspnet_Profile_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Profile_GetNumberOfInactiveProfiles] TO [aspnet_Profile_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Profile_GetProfiles] TO [aspnet_Profile_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Profile_GetProperties] TO [aspnet_Profile_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Profile_SetProperties] TO [aspnet_Profile_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_RegisterSchemaVersion] TO [aspnet_Membership_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_RegisterSchemaVersion] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_RegisterSchemaVersion] TO [aspnet_Profile_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_RegisterSchemaVersion] TO [aspnet_Profile_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_RegisterSchemaVersion] TO [aspnet_Roles_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_RegisterSchemaVersion] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_RegisterSchemaVersion] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_RegisterSchemaVersion] TO [aspnet_Personalization_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_RegisterSchemaVersion] TO [aspnet_WebEvent_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Roles_CreateRole] TO [aspnet_Roles_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Roles_DeleteRole] TO [aspnet_Roles_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Roles_GetAllRoles] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Roles_RoleExists] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UnRegisterSchemaVersion] TO [aspnet_Membership_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UnRegisterSchemaVersion] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UnRegisterSchemaVersion] TO [aspnet_Profile_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UnRegisterSchemaVersion] TO [aspnet_Profile_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UnRegisterSchemaVersion] TO [aspnet_Roles_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UnRegisterSchemaVersion] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UnRegisterSchemaVersion] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UnRegisterSchemaVersion] TO [aspnet_Personalization_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UnRegisterSchemaVersion] TO [aspnet_WebEvent_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Users_DeleteUser] TO [aspnet_Membership_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UsersInRoles_AddUsersToRoles] TO [aspnet_Roles_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UsersInRoles_FindUsersInRole] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UsersInRoles_GetRolesForUser] TO [aspnet_Roles_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UsersInRoles_GetRolesForUser] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UsersInRoles_GetUsersInRoles] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UsersInRoles_IsUserInRole] TO [aspnet_Roles_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UsersInRoles_IsUserInRole] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UsersInRoles_RemoveUsersFromRoles] TO [aspnet_Roles_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_WebEvent_LogEvent] TO [aspnet_WebEvent_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_Applications] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_Applications] TO [aspnet_Profile_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_Applications] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_Applications] TO [aspnet_Personalization_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_MembershipUsers] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_Profiles] TO [aspnet_Profile_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_Roles] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_Users] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_Users] TO [aspnet_Profile_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_Users] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_Users] TO [aspnet_Personalization_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_UsersInRoles] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_WebPartState_Paths] TO [aspnet_Personalization_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_WebPartState_Shared] TO [aspnet_Personalization_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_WebPartState_User] TO [aspnet_Personalization_ReportingAccess]
    AS [dbo];


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '05cd2faa-7c23-4e5f-9264-81298f8ceefe')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('05cd2faa-7c23-4e5f-9264-81298f8ceefe')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'fee5307d-8a4a-429b-9921-bf8139f25a56')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('fee5307d-8a4a-429b-9921-bf8139f25a56')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '231c3cc6-48ee-4187-bb05-d713c8d495c3')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('231c3cc6-48ee-4187-bb05-d713c8d495c3')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '47ddd230-8ddf-458a-bd1c-014f3805a4a8')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('47ddd230-8ddf-458a-bd1c-014f3805a4a8')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '96fcdfa7-cde1-4b86-aa45-f7389ce65f94')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('96fcdfa7-cde1-4b86-aa45-f7389ce65f94')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '2486a920-cb37-4d6e-9bc6-b1a7bb9d3f87')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('2486a920-cb37-4d6e-9bc6-b1a7bb9d3f87')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '276a2e24-039a-4bf7-a9ce-cce5ceb4e50c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('276a2e24-039a-4bf7-a9ce-cce5ceb4e50c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '256144d4-2f99-4700-b150-0c257126c337')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('256144d4-2f99-4700-b150-0c257126c337')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '43448c07-d402-400f-bf6d-9d87395cfab3')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('43448c07-d402-400f-bf6d-9d87395cfab3')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '049cdc54-9501-4b6d-a846-45c27db04a39')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('049cdc54-9501-4b6d-a846-45c27db04a39')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4ebff796-fe28-4feb-906f-bcee8e078946')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4ebff796-fe28-4feb-906f-bcee8e078946')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a80503a6-5c20-478a-b2eb-a1fc057457c6')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a80503a6-5c20-478a-b2eb-a1fc057457c6')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f76c9143-8c8e-41cc-974a-cb6b1304c4c4')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f76c9143-8c8e-41cc-974a-cb6b1304c4c4')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '512e36e1-6b21-47b7-b7db-82e6cf040e34')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('512e36e1-6b21-47b7-b7db-82e6cf040e34')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e29eb5f4-8a30-4346-b3bc-c84664baf1b8')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e29eb5f4-8a30-4346-b3bc-c84664baf1b8')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f214d16e-5d6e-4329-a8ea-6f7d561778ec')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f214d16e-5d6e-4329-a8ea-6f7d561778ec')

GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[DataLog] WITH CHECK CHECK CONSTRAINT [FK_DataLog_aspnet_Users];

ALTER TABLE [dbo].[DataLog] WITH CHECK CHECK CONSTRAINT [FK_DataLog_DataSourceTransformation];

ALTER TABLE [dbo].[DataLog] WITH CHECK CHECK CONSTRAINT [FK_DataLog_ImportBatch];

ALTER TABLE [dbo].[DataLog] WITH CHECK CHECK CONSTRAINT [FK_DataLog_PhenomenonOffering];

ALTER TABLE [dbo].[DataLog] WITH CHECK CHECK CONSTRAINT [FK_DataLog_PhenomenonUOM];

ALTER TABLE [dbo].[DataLog] WITH CHECK CHECK CONSTRAINT [FK_DataLog_Sensor];

ALTER TABLE [dbo].[DataLog] WITH CHECK CHECK CONSTRAINT [FK_DataLog_Status];

ALTER TABLE [dbo].[DataSource] WITH CHECK CHECK CONSTRAINT [FK_DataSource_aspnet_Users];

ALTER TABLE [dbo].[DataSource] WITH CHECK CHECK CONSTRAINT [FK_DataSource_DataSchema];

ALTER TABLE [dbo].[ImportBatch] WITH CHECK CHECK CONSTRAINT [FK_ImportBatch_aspnet_Users];

ALTER TABLE [dbo].[ImportBatch] WITH CHECK CHECK CONSTRAINT [FK_ImportBatch_DataSource];

ALTER TABLE [dbo].[Observation] WITH CHECK CHECK CONSTRAINT [FK_Observation_aspnet_Users];

ALTER TABLE [dbo].[Observation] WITH CHECK CHECK CONSTRAINT [FK_Observation_ImportBatch];

ALTER TABLE [dbo].[Observation] WITH CHECK CHECK CONSTRAINT [FK_Observation_PhenomenonOffering];

ALTER TABLE [dbo].[Observation] WITH CHECK CHECK CONSTRAINT [FK_Observation_PhenomenonUOM];

ALTER TABLE [dbo].[Observation] WITH CHECK CHECK CONSTRAINT [FK_Observation_Sensor];

ALTER TABLE [dbo].[Organisation] WITH CHECK CHECK CONSTRAINT [FK_Organisation_aspnet_Users];

ALTER TABLE [dbo].[Sensor] WITH CHECK CHECK CONSTRAINT [FK_Sensor_aspnet_Users];

ALTER TABLE [dbo].[Sensor] WITH CHECK CHECK CONSTRAINT [FK_Sensor_DataSource];

ALTER TABLE [dbo].[Sensor] WITH CHECK CHECK CONSTRAINT [FK_Sensor_DataSchema];

ALTER TABLE [dbo].[Sensor] WITH CHECK CHECK CONSTRAINT [FK_Sensor_Phenomenon];

ALTER TABLE [dbo].[Sensor] WITH CHECK CHECK CONSTRAINT [FK_Sensor_Instrument];

ALTER TABLE [dbo].[Sensor] WITH CHECK CHECK CONSTRAINT [FK_Sensor_Station];

ALTER TABLE [dbo].[AuditLog] WITH CHECK CHECK CONSTRAINT [FK_AuditLog_aspnet_Users];

ALTER TABLE [dbo].[Instrument] WITH CHECK CHECK CONSTRAINT [FK_Instrument_Station];

ALTER TABLE [dbo].[Instrument] WITH CHECK CHECK CONSTRAINT [FK_Instrument_aspnet_Users];

ALTER TABLE [dbo].[Instrument_Organisation] WITH CHECK CHECK CONSTRAINT [FK_Instrument_Organisation_Instrument];

ALTER TABLE [dbo].[Instrument_Organisation] WITH CHECK CHECK CONSTRAINT [FK_Instrument_Organisation_Organisation];

ALTER TABLE [dbo].[Instrument_Organisation] WITH CHECK CHECK CONSTRAINT [FK_Instrument_Organisation_OrganisationRole];

ALTER TABLE [dbo].[Instrument_Organisation] WITH CHECK CHECK CONSTRAINT [FK_Instrument_Organisation_aspnet_Users];

ALTER TABLE [dbo].[OrganisationRole] WITH CHECK CHECK CONSTRAINT [FK_OrganisationRole_aspnet_Users];

ALTER TABLE [dbo].[Site] WITH CHECK CHECK CONSTRAINT [FK_Site_aspnet_Users];

ALTER TABLE [dbo].[Site_Organisation] WITH CHECK CHECK CONSTRAINT [FK_Site_Organisation_Site];

ALTER TABLE [dbo].[Site_Organisation] WITH CHECK CHECK CONSTRAINT [FK_Site_Organisation_Organisation];

ALTER TABLE [dbo].[Site_Organisation] WITH CHECK CHECK CONSTRAINT [FK_Site_Organisation_OrganisationRole];

ALTER TABLE [dbo].[Site_Organisation] WITH CHECK CHECK CONSTRAINT [FK_Site_Organisation_aspnet_Users];

ALTER TABLE [dbo].[Station_Organisation] WITH CHECK CHECK CONSTRAINT [FK_Station_Organisation_Station];

ALTER TABLE [dbo].[Station_Organisation] WITH CHECK CHECK CONSTRAINT [FK_Station_Organisation_Organisation];

ALTER TABLE [dbo].[Station_Organisation] WITH CHECK CHECK CONSTRAINT [FK_Station_Organisation_OrganisationRole];

ALTER TABLE [dbo].[Station_Organisation] WITH CHECK CHECK CONSTRAINT [FK_Station_Organisation_aspnet_Users];

ALTER TABLE [dbo].[DataSchema] WITH CHECK CHECK CONSTRAINT [FK_DataSchema_DataSourceType];

ALTER TABLE [dbo].[DataSourceRole] WITH CHECK CHECK CONSTRAINT [FK_DataSourceRole_aspnet_Roles];

ALTER TABLE [dbo].[DataSourceRole] WITH CHECK CHECK CONSTRAINT [FK_DataSourceRole_aspnet_Users];

ALTER TABLE [dbo].[DataSourceRole] WITH CHECK CHECK CONSTRAINT [FK_DataSourceRole_DataSource];

ALTER TABLE [dbo].[DataSourceTransformation] WITH CHECK CHECK CONSTRAINT [FK_DataSourceTransformation_aspnet_Users];

ALTER TABLE [dbo].[DataSourceTransformation] WITH CHECK CHECK CONSTRAINT [FK_DataSourceTransformation_DataSource];

ALTER TABLE [dbo].[DataSourceTransformation] WITH CHECK CHECK CONSTRAINT [FK_DataSourceTransformation_Phenomenon];

ALTER TABLE [dbo].[DataSourceTransformation] WITH CHECK CHECK CONSTRAINT [FK_DataSourceTransformation_PhenomenonOffering];

ALTER TABLE [dbo].[DataSourceTransformation] WITH CHECK CHECK CONSTRAINT [FK_DataSourceTransformation_PhenomenonUOM];

ALTER TABLE [dbo].[DataSourceTransformation] WITH CHECK CHECK CONSTRAINT [FK_DataSourceTransformation_Sensor];

ALTER TABLE [dbo].[DataSourceTransformation] WITH CHECK CHECK CONSTRAINT [FK_DataSourceTransformation_TransformationType];

ALTER TABLE [dbo].[DataSourceType] WITH CHECK CHECK CONSTRAINT [FK_DataSourceType_aspnet_Users];

ALTER TABLE [dbo].[Module] WITH CHECK CHECK CONSTRAINT [FK_Module_Module];

ALTER TABLE [dbo].[Offering] WITH CHECK CHECK CONSTRAINT [FK_Offering_aspnet_Users];

ALTER TABLE [dbo].[Phenomenon] WITH CHECK CHECK CONSTRAINT [FK_Phenomenon_aspnet_Users];

ALTER TABLE [dbo].[PhenomenonOffering] WITH CHECK CHECK CONSTRAINT [FK_PhenomenonOffering_aspnet_Users];

ALTER TABLE [dbo].[PhenomenonOffering] WITH CHECK CHECK CONSTRAINT [FK_PhenomenonOffering_Offering];

ALTER TABLE [dbo].[PhenomenonOffering] WITH CHECK CHECK CONSTRAINT [FK_PhenomenonOffering_Phenomenon];

ALTER TABLE [dbo].[PhenomenonUOM] WITH CHECK CHECK CONSTRAINT [FK_PhenomenonUOM_aspnet_Users];

ALTER TABLE [dbo].[PhenomenonUOM] WITH CHECK CHECK CONSTRAINT [FK_PhenomenonUOM_PhenomenonUOM];

ALTER TABLE [dbo].[PhenomenonUOM] WITH CHECK CHECK CONSTRAINT [FK_PhenomenonUOM_UnitOfMeasure];

ALTER TABLE [dbo].[Progress] WITH CHECK CHECK CONSTRAINT [FK_Progress_aspnet_Users];

ALTER TABLE [dbo].[Progress] WITH CHECK CHECK CONSTRAINT [FK_Progress_ImportBatch];

ALTER TABLE [dbo].[Progress] WITH CHECK CHECK CONSTRAINT [FK_Progress_PhenomenonOffering];

ALTER TABLE [dbo].[Progress] WITH CHECK CHECK CONSTRAINT [FK_Progress_Sensor];

ALTER TABLE [dbo].[ProjectSite] WITH CHECK CHECK CONSTRAINT [FK_ProjectSite_aspnet_Users];

ALTER TABLE [dbo].[ProjectSite] WITH CHECK CHECK CONSTRAINT [FK_ProjectSite_Organisation];

ALTER TABLE [dbo].[RoleModule] WITH CHECK CHECK CONSTRAINT [FK_RoleModule_aspnet_Roles];

ALTER TABLE [dbo].[RoleModule] WITH CHECK CHECK CONSTRAINT [FK_RoleModule_Module];

ALTER TABLE [dbo].[Station] WITH CHECK CHECK CONSTRAINT [FK_Station_aspnet_Users];

ALTER TABLE [dbo].[Station] WITH CHECK CHECK CONSTRAINT [FK_Station_ProjectSite];

ALTER TABLE [dbo].[Station] WITH CHECK CHECK CONSTRAINT [FK_Station_Site];

ALTER TABLE [dbo].[Status] WITH CHECK CHECK CONSTRAINT [FK_Status_aspnet_Users];

ALTER TABLE [dbo].[TransformationType] WITH CHECK CHECK CONSTRAINT [FK_TransformationType_aspnet_Users];

ALTER TABLE [dbo].[UnitOfMeasure] WITH CHECK CHECK CONSTRAINT [FK_UnitOfMeasure_aspnet_Users];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.aspnet_Membership'), OBJECT_ID(N'dbo.aspnet_Paths'), OBJECT_ID(N'dbo.aspnet_PersonalizationAllUsers'), OBJECT_ID(N'dbo.aspnet_PersonalizationPerUser'), OBJECT_ID(N'dbo.aspnet_Profile'), OBJECT_ID(N'dbo.aspnet_Roles'), OBJECT_ID(N'dbo.aspnet_Users'), OBJECT_ID(N'dbo.aspnet_UsersInRoles'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
